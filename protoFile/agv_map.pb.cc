// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agv_map.proto

#include "agv_map.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Area_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Area_AgvNumEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Area_Basic_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Area_Coord_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Area_ParamEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Area_TypeNumEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AreaDesc_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AreaDesc_DescEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Conf_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Describe_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Describe_AreaDescEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Describe_CargoAreaDescEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Describe_FpointDescEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Describe_PointAgvDescEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Describe_PointAvoDescEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Describe_PointCtlDescEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Describe_SegAgvDescEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Describe_SegAvoDescEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Describe_SegCtlDescEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Fpoint_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fpoint_Basic_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MAP_ARR_StoreOffConfigEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Map_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_AreaEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_FpointEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_PointChargeListEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_PointEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_PointStopListEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_SegmentEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Param_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Point_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_AgvParamEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_AvoParamEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_Basic_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_CtlParamEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_Sparam_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point_StaParamEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_Tparam_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Segment_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Segment_AgvParamEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Segment_AvoParamEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Segment_Basic_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Segment_CtlParamEntry_DoNotUse_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Store_offset_agv_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_store_offset_by_layer_agv_5fmap_2eproto;
namespace agv_map {
class MAP_ARR_StoreOffConfigEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MAP_ARR_StoreOffConfigEntry_DoNotUse> _instance;
} _MAP_ARR_StoreOffConfigEntry_DoNotUse_default_instance_;
class MAP_ARRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MAP_ARR> _instance;
} _MAP_ARR_default_instance_;
class Map_PointEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map_PointEntry_DoNotUse> _instance;
} _Map_PointEntry_DoNotUse_default_instance_;
class Map_SegmentEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map_SegmentEntry_DoNotUse> _instance;
} _Map_SegmentEntry_DoNotUse_default_instance_;
class Map_FpointEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map_FpointEntry_DoNotUse> _instance;
} _Map_FpointEntry_DoNotUse_default_instance_;
class Map_AreaEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map_AreaEntry_DoNotUse> _instance;
} _Map_AreaEntry_DoNotUse_default_instance_;
class Map_PointStopListEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map_PointStopListEntry_DoNotUse> _instance;
} _Map_PointStopListEntry_DoNotUse_default_instance_;
class Map_PointChargeListEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map_PointChargeListEntry_DoNotUse> _instance;
} _Map_PointChargeListEntry_DoNotUse_default_instance_;
class MapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map> _instance;
} _Map_default_instance_;
class ConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Conf> _instance;
} _Conf_default_instance_;
class Point_AgvParamEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point_AgvParamEntry_DoNotUse> _instance;
} _Point_AgvParamEntry_DoNotUse_default_instance_;
class Point_CtlParamEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point_CtlParamEntry_DoNotUse> _instance;
} _Point_CtlParamEntry_DoNotUse_default_instance_;
class Point_AvoParamEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point_AvoParamEntry_DoNotUse> _instance;
} _Point_AvoParamEntry_DoNotUse_default_instance_;
class Point_StaParamEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point_StaParamEntry_DoNotUse> _instance;
} _Point_StaParamEntry_DoNotUse_default_instance_;
class Point_BasicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point_Basic> _instance;
} _Point_Basic_default_instance_;
class Point_SparamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point_Sparam> _instance;
} _Point_Sparam_default_instance_;
class Point_TparamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point_Tparam> _instance;
} _Point_Tparam_default_instance_;
class PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class Segment_AgvParamEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Segment_AgvParamEntry_DoNotUse> _instance;
} _Segment_AgvParamEntry_DoNotUse_default_instance_;
class Segment_CtlParamEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Segment_CtlParamEntry_DoNotUse> _instance;
} _Segment_CtlParamEntry_DoNotUse_default_instance_;
class Segment_AvoParamEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Segment_AvoParamEntry_DoNotUse> _instance;
} _Segment_AvoParamEntry_DoNotUse_default_instance_;
class Segment_BasicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Segment_Basic> _instance;
} _Segment_Basic_default_instance_;
class SegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Segment> _instance;
} _Segment_default_instance_;
class Fpoint_BasicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fpoint_Basic> _instance;
} _Fpoint_Basic_default_instance_;
class FpointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fpoint> _instance;
} _Fpoint_default_instance_;
class Area_ParamEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Area_ParamEntry_DoNotUse> _instance;
} _Area_ParamEntry_DoNotUse_default_instance_;
class Area_AgvNumEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Area_AgvNumEntry_DoNotUse> _instance;
} _Area_AgvNumEntry_DoNotUse_default_instance_;
class Area_TypeNumEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Area_TypeNumEntry_DoNotUse> _instance;
} _Area_TypeNumEntry_DoNotUse_default_instance_;
class Area_BasicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Area_Basic> _instance;
} _Area_Basic_default_instance_;
class Area_CoordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Area_Coord> _instance;
} _Area_Coord_default_instance_;
class AreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Area> _instance;
} _Area_default_instance_;
class ParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Param> _instance;
} _Param_default_instance_;
class Describe_PointAgvDescEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Describe_PointAgvDescEntry_DoNotUse> _instance;
} _Describe_PointAgvDescEntry_DoNotUse_default_instance_;
class Describe_PointCtlDescEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Describe_PointCtlDescEntry_DoNotUse> _instance;
} _Describe_PointCtlDescEntry_DoNotUse_default_instance_;
class Describe_PointAvoDescEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Describe_PointAvoDescEntry_DoNotUse> _instance;
} _Describe_PointAvoDescEntry_DoNotUse_default_instance_;
class Describe_SegAgvDescEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Describe_SegAgvDescEntry_DoNotUse> _instance;
} _Describe_SegAgvDescEntry_DoNotUse_default_instance_;
class Describe_SegCtlDescEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Describe_SegCtlDescEntry_DoNotUse> _instance;
} _Describe_SegCtlDescEntry_DoNotUse_default_instance_;
class Describe_SegAvoDescEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Describe_SegAvoDescEntry_DoNotUse> _instance;
} _Describe_SegAvoDescEntry_DoNotUse_default_instance_;
class Describe_FpointDescEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Describe_FpointDescEntry_DoNotUse> _instance;
} _Describe_FpointDescEntry_DoNotUse_default_instance_;
class Describe_AreaDescEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Describe_AreaDescEntry_DoNotUse> _instance;
} _Describe_AreaDescEntry_DoNotUse_default_instance_;
class Describe_CargoAreaDescEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Describe_CargoAreaDescEntry_DoNotUse> _instance;
} _Describe_CargoAreaDescEntry_DoNotUse_default_instance_;
class DescribeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Describe> _instance;
} _Describe_default_instance_;
class AreaDesc_DescEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AreaDesc_DescEntry_DoNotUse> _instance;
} _AreaDesc_DescEntry_DoNotUse_default_instance_;
class AreaDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AreaDesc> _instance;
} _AreaDesc_default_instance_;
class Store_offsetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Store_offset> _instance;
} _Store_offset_default_instance_;
class store_offset_by_layerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<store_offset_by_layer> _instance;
} _store_offset_by_layer_default_instance_;
}  // namespace agv_map
static void InitDefaultsscc_info_Area_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Area_default_instance_;
    new (ptr) ::agv_map::Area();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Area_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Area_agv_5fmap_2eproto}, {
      &scc_info_Area_Basic_agv_5fmap_2eproto.base,
      &scc_info_Area_ParamEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Area_Coord_agv_5fmap_2eproto.base,
      &scc_info_Area_AgvNumEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Area_TypeNumEntry_DoNotUse_agv_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Area_AgvNumEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Area_AgvNumEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Area_AgvNumEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Area_AgvNumEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Area_AgvNumEntry_DoNotUse_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Area_Basic_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Area_Basic_default_instance_;
    new (ptr) ::agv_map::Area_Basic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Area_Basic_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Area_Basic_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Area_Coord_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Area_Coord_default_instance_;
    new (ptr) ::agv_map::Area_Coord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Area_Coord_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Area_Coord_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Area_ParamEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Area_ParamEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Area_ParamEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Area_ParamEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Area_ParamEntry_DoNotUse_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Area_TypeNumEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Area_TypeNumEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Area_TypeNumEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Area_TypeNumEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Area_TypeNumEntry_DoNotUse_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_AreaDesc_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_AreaDesc_default_instance_;
    new (ptr) ::agv_map::AreaDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AreaDesc_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AreaDesc_agv_5fmap_2eproto}, {
      &scc_info_AreaDesc_DescEntry_DoNotUse_agv_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_AreaDesc_DescEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_AreaDesc_DescEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::AreaDesc_DescEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AreaDesc_DescEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AreaDesc_DescEntry_DoNotUse_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Conf_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Conf_default_instance_;
    new (ptr) ::agv_map::Conf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Conf_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Conf_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Describe_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Describe_default_instance_;
    new (ptr) ::agv_map::Describe();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Describe_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_Describe_agv_5fmap_2eproto}, {
      &scc_info_Describe_PointAgvDescEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Describe_PointCtlDescEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Describe_PointAvoDescEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Describe_SegAgvDescEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Describe_SegCtlDescEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Describe_SegAvoDescEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Describe_FpointDescEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Describe_AreaDescEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Describe_CargoAreaDescEntry_DoNotUse_agv_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Describe_AreaDescEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Describe_AreaDescEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Describe_AreaDescEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Describe_AreaDescEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Describe_AreaDescEntry_DoNotUse_agv_5fmap_2eproto}, {
      &scc_info_AreaDesc_agv_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Describe_CargoAreaDescEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Describe_CargoAreaDescEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Describe_CargoAreaDescEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Describe_CargoAreaDescEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Describe_CargoAreaDescEntry_DoNotUse_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Describe_FpointDescEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Describe_FpointDescEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Describe_FpointDescEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Describe_FpointDescEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Describe_FpointDescEntry_DoNotUse_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Describe_PointAgvDescEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Describe_PointAgvDescEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Describe_PointAgvDescEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Describe_PointAgvDescEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Describe_PointAgvDescEntry_DoNotUse_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Describe_PointAvoDescEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Describe_PointAvoDescEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Describe_PointAvoDescEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Describe_PointAvoDescEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Describe_PointAvoDescEntry_DoNotUse_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Describe_PointCtlDescEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Describe_PointCtlDescEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Describe_PointCtlDescEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Describe_PointCtlDescEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Describe_PointCtlDescEntry_DoNotUse_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Describe_SegAgvDescEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Describe_SegAgvDescEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Describe_SegAgvDescEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Describe_SegAgvDescEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Describe_SegAgvDescEntry_DoNotUse_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Describe_SegAvoDescEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Describe_SegAvoDescEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Describe_SegAvoDescEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Describe_SegAvoDescEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Describe_SegAvoDescEntry_DoNotUse_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Describe_SegCtlDescEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Describe_SegCtlDescEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Describe_SegCtlDescEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Describe_SegCtlDescEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Describe_SegCtlDescEntry_DoNotUse_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Fpoint_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Fpoint_default_instance_;
    new (ptr) ::agv_map::Fpoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Fpoint_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Fpoint_agv_5fmap_2eproto}, {
      &scc_info_Fpoint_Basic_agv_5fmap_2eproto.base,
      &scc_info_Param_agv_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Fpoint_Basic_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Fpoint_Basic_default_instance_;
    new (ptr) ::agv_map::Fpoint_Basic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fpoint_Basic_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Fpoint_Basic_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_MAP_ARR_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_MAP_ARR_default_instance_;
    new (ptr) ::agv_map::MAP_ARR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MAP_ARR_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MAP_ARR_agv_5fmap_2eproto}, {
      &scc_info_Map_agv_5fmap_2eproto.base,
      &scc_info_Describe_agv_5fmap_2eproto.base,
      &scc_info_MAP_ARR_StoreOffConfigEntry_DoNotUse_agv_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_MAP_ARR_StoreOffConfigEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_MAP_ARR_StoreOffConfigEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::MAP_ARR_StoreOffConfigEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MAP_ARR_StoreOffConfigEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MAP_ARR_StoreOffConfigEntry_DoNotUse_agv_5fmap_2eproto}, {
      &scc_info_Store_offset_agv_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Map_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Map_default_instance_;
    new (ptr) ::agv_map::Map();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Map_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Map_agv_5fmap_2eproto}, {
      &scc_info_Conf_agv_5fmap_2eproto.base,
      &scc_info_Map_PointEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Map_SegmentEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Map_FpointEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Map_AreaEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Map_PointStopListEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Map_PointChargeListEntry_DoNotUse_agv_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Map_AreaEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Map_AreaEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Map_AreaEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_AreaEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Map_AreaEntry_DoNotUse_agv_5fmap_2eproto}, {
      &scc_info_Area_agv_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Map_FpointEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Map_FpointEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Map_FpointEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_FpointEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Map_FpointEntry_DoNotUse_agv_5fmap_2eproto}, {
      &scc_info_Fpoint_agv_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Map_PointChargeListEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Map_PointChargeListEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Map_PointChargeListEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_PointChargeListEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Map_PointChargeListEntry_DoNotUse_agv_5fmap_2eproto}, {
      &scc_info_Point_agv_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Map_PointEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Map_PointEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Map_PointEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_PointEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Map_PointEntry_DoNotUse_agv_5fmap_2eproto}, {
      &scc_info_Point_agv_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Map_PointStopListEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Map_PointStopListEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Map_PointStopListEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_PointStopListEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Map_PointStopListEntry_DoNotUse_agv_5fmap_2eproto}, {
      &scc_info_Point_agv_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Map_SegmentEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Map_SegmentEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Map_SegmentEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Map_SegmentEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Map_SegmentEntry_DoNotUse_agv_5fmap_2eproto}, {
      &scc_info_Segment_agv_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Param_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Param_default_instance_;
    new (ptr) ::agv_map::Param();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Param_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Param_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Point_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Point_default_instance_;
    new (ptr) ::agv_map::Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Point_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Point_agv_5fmap_2eproto}, {
      &scc_info_Point_Basic_agv_5fmap_2eproto.base,
      &scc_info_Point_AgvParamEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Point_CtlParamEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Point_AvoParamEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Point_StaParamEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Point_Tparam_agv_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Point_AgvParamEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Point_AgvParamEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Point_AgvParamEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_AgvParamEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_AgvParamEntry_DoNotUse_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Point_AvoParamEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Point_AvoParamEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Point_AvoParamEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_AvoParamEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_AvoParamEntry_DoNotUse_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Point_Basic_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Point_Basic_default_instance_;
    new (ptr) ::agv_map::Point_Basic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_Basic_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_Basic_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Point_CtlParamEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Point_CtlParamEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Point_CtlParamEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_CtlParamEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_CtlParamEntry_DoNotUse_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Point_Sparam_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Point_Sparam_default_instance_;
    new (ptr) ::agv_map::Point_Sparam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_Sparam_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_Sparam_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Point_StaParamEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Point_StaParamEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Point_StaParamEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point_StaParamEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Point_StaParamEntry_DoNotUse_agv_5fmap_2eproto}, {
      &scc_info_Point_Sparam_agv_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Point_Tparam_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Point_Tparam_default_instance_;
    new (ptr) ::agv_map::Point_Tparam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_Tparam_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_Tparam_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Segment_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Segment_default_instance_;
    new (ptr) ::agv_map::Segment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Segment_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Segment_agv_5fmap_2eproto}, {
      &scc_info_Segment_Basic_agv_5fmap_2eproto.base,
      &scc_info_Segment_AgvParamEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Segment_CtlParamEntry_DoNotUse_agv_5fmap_2eproto.base,
      &scc_info_Segment_AvoParamEntry_DoNotUse_agv_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Segment_AgvParamEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Segment_AgvParamEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Segment_AgvParamEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Segment_AgvParamEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Segment_AgvParamEntry_DoNotUse_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Segment_AvoParamEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Segment_AvoParamEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Segment_AvoParamEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Segment_AvoParamEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Segment_AvoParamEntry_DoNotUse_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Segment_Basic_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Segment_Basic_default_instance_;
    new (ptr) ::agv_map::Segment_Basic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Segment_Basic_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Segment_Basic_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Segment_CtlParamEntry_DoNotUse_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Segment_CtlParamEntry_DoNotUse_default_instance_;
    new (ptr) ::agv_map::Segment_CtlParamEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Segment_CtlParamEntry_DoNotUse_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Segment_CtlParamEntry_DoNotUse_agv_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Store_offset_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_Store_offset_default_instance_;
    new (ptr) ::agv_map::Store_offset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Store_offset_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Store_offset_agv_5fmap_2eproto}, {
      &scc_info_store_offset_by_layer_agv_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_store_offset_by_layer_agv_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_map::_store_offset_by_layer_default_instance_;
    new (ptr) ::agv_map::store_offset_by_layer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_store_offset_by_layer_agv_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_store_offset_by_layer_agv_5fmap_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_agv_5fmap_2eproto[46];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_agv_5fmap_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_agv_5fmap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_agv_5fmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_StoreOffConfigEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_StoreOffConfigEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_StoreOffConfigEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR_StoreOffConfigEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR, map_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR, describe_),
  PROTOBUF_FIELD_OFFSET(::agv_map::MAP_ARR, store_off_config_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_PointEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_PointEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_PointEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_PointEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_SegmentEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_SegmentEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_SegmentEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_SegmentEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_FpointEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_FpointEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_FpointEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_FpointEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_AreaEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_AreaEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_AreaEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_AreaEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_PointStopListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_PointStopListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_PointStopListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_PointStopListEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_PointChargeListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_PointChargeListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_PointChargeListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map_PointChargeListEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Map, conf_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map, point_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map, segment_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map, fpoint_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map, area_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map, point_stop_list_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Map, point_charge_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, map_ts_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, map_pid_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, map_area_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, map_name_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, max_pid_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, max_sid_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, max_aid_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Conf, max_fid_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_AgvParamEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_AgvParamEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_AgvParamEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_AgvParamEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_CtlParamEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_CtlParamEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_CtlParamEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_CtlParamEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_AvoParamEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_AvoParamEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_AvoParamEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_AvoParamEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_StaParamEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_StaParamEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_StaParamEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_StaParamEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Basic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Basic, id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Basic, name_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Basic, type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Basic, x_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Basic, y_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Basic, get_height_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Basic, put_height_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Basic, run_height_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Basic, area_id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Basic, area_name_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Basic, qrcode_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Basic, stype_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Basic, atype_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Basic, disable_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Basic, lock_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Basic, floor_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Basic, agv_dir_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Basic, connect_arc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Sparam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Sparam, layers_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Sparam, horizon_offset_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Sparam, vertical_offset_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Sparam, get_height_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Sparam, put_height_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Sparam, run_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Tparam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Tparam, enable_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Tparam, type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Tparam, interval_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Tparam, offset_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Tparam, target_area_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point_Tparam, target_sta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Point, basic_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point, agv_param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point, ctl_param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point, avo_param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point, sta_param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point, seg_id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point, in_area_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point, test_param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point, get_add_seg_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Point, put_add_seg_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_AgvParamEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_AgvParamEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_AgvParamEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_AgvParamEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_CtlParamEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_CtlParamEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_CtlParamEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_CtlParamEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_AvoParamEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_AvoParamEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_AvoParamEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_AvoParamEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, start_id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, start_x_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, start_y_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, end_id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, end_x_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, end_y_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, cen_x_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, cen_y_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, radius_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, seglen_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, dir_mode_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, start_angle_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, end_angle_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, agv_type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, disable_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, lock_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment_Basic, floor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment, basic_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment, agv_param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment, ctl_param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Segment, avo_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Fpoint_Basic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Fpoint_Basic, id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Fpoint_Basic, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Fpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Fpoint, basic_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Fpoint, param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_ParamEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_ParamEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_ParamEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_ParamEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_AgvNumEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_AgvNumEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_AgvNumEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_AgvNumEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_TypeNumEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_TypeNumEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_TypeNumEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_TypeNumEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_Basic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_Basic, id_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_Basic, type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_Basic, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_Coord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_Coord, x_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area_Coord, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Area, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Area, basic_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area, param_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area, coord_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area, point_in_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area, agv_num_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area, relate_area_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Area, type_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Param, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Param, value_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_PointAgvDescEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_PointAgvDescEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_PointAgvDescEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_PointAgvDescEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_PointCtlDescEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_PointCtlDescEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_PointCtlDescEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_PointCtlDescEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_PointAvoDescEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_PointAvoDescEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_PointAvoDescEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_PointAvoDescEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_SegAgvDescEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_SegAgvDescEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_SegAgvDescEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_SegAgvDescEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_SegCtlDescEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_SegCtlDescEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_SegCtlDescEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_SegCtlDescEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_SegAvoDescEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_SegAvoDescEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_SegAvoDescEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_SegAvoDescEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_FpointDescEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_FpointDescEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_FpointDescEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_FpointDescEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_AreaDescEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_AreaDescEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_AreaDescEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_AreaDescEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_CargoAreaDescEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_CargoAreaDescEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_CargoAreaDescEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe_CargoAreaDescEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, point_agv_desc_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, point_ctl_desc_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, point_avo_desc_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, seg_agv_desc_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, seg_ctl_desc_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, seg_avo_desc_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, fpoint_desc_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, area_desc_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Describe, cargo_area_desc_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AreaDesc_DescEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AreaDesc_DescEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::AreaDesc_DescEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AreaDesc_DescEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::AreaDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::AreaDesc, type_),
  PROTOBUF_FIELD_OFFSET(::agv_map::AreaDesc, desc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::Store_offset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::Store_offset, layer1_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Store_offset, layer2_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Store_offset, layer3_),
  PROTOBUF_FIELD_OFFSET(::agv_map::Store_offset, layer4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_map::store_offset_by_layer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_map::store_offset_by_layer, high_),
  PROTOBUF_FIELD_OFFSET(::agv_map::store_offset_by_layer, horizontal_offset_),
  PROTOBUF_FIELD_OFFSET(::agv_map::store_offset_by_layer, vertical_offset_),
  PROTOBUF_FIELD_OFFSET(::agv_map::store_offset_by_layer, fork_high_offset_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::agv_map::MAP_ARR_StoreOffConfigEntry_DoNotUse)},
  { 9, -1, sizeof(::agv_map::MAP_ARR)},
  { 17, 24, sizeof(::agv_map::Map_PointEntry_DoNotUse)},
  { 26, 33, sizeof(::agv_map::Map_SegmentEntry_DoNotUse)},
  { 35, 42, sizeof(::agv_map::Map_FpointEntry_DoNotUse)},
  { 44, 51, sizeof(::agv_map::Map_AreaEntry_DoNotUse)},
  { 53, 60, sizeof(::agv_map::Map_PointStopListEntry_DoNotUse)},
  { 62, 69, sizeof(::agv_map::Map_PointChargeListEntry_DoNotUse)},
  { 71, -1, sizeof(::agv_map::Map)},
  { 83, -1, sizeof(::agv_map::Conf)},
  { 96, 103, sizeof(::agv_map::Point_AgvParamEntry_DoNotUse)},
  { 105, 112, sizeof(::agv_map::Point_CtlParamEntry_DoNotUse)},
  { 114, 121, sizeof(::agv_map::Point_AvoParamEntry_DoNotUse)},
  { 123, 130, sizeof(::agv_map::Point_StaParamEntry_DoNotUse)},
  { 132, -1, sizeof(::agv_map::Point_Basic)},
  { 155, -1, sizeof(::agv_map::Point_Sparam)},
  { 166, -1, sizeof(::agv_map::Point_Tparam)},
  { 177, -1, sizeof(::agv_map::Point)},
  { 192, 199, sizeof(::agv_map::Segment_AgvParamEntry_DoNotUse)},
  { 201, 208, sizeof(::agv_map::Segment_CtlParamEntry_DoNotUse)},
  { 210, 217, sizeof(::agv_map::Segment_AvoParamEntry_DoNotUse)},
  { 219, -1, sizeof(::agv_map::Segment_Basic)},
  { 243, -1, sizeof(::agv_map::Segment)},
  { 252, -1, sizeof(::agv_map::Fpoint_Basic)},
  { 259, -1, sizeof(::agv_map::Fpoint)},
  { 266, 273, sizeof(::agv_map::Area_ParamEntry_DoNotUse)},
  { 275, 282, sizeof(::agv_map::Area_AgvNumEntry_DoNotUse)},
  { 284, 291, sizeof(::agv_map::Area_TypeNumEntry_DoNotUse)},
  { 293, -1, sizeof(::agv_map::Area_Basic)},
  { 301, -1, sizeof(::agv_map::Area_Coord)},
  { 308, -1, sizeof(::agv_map::Area)},
  { 320, -1, sizeof(::agv_map::Param)},
  { 327, 334, sizeof(::agv_map::Describe_PointAgvDescEntry_DoNotUse)},
  { 336, 343, sizeof(::agv_map::Describe_PointCtlDescEntry_DoNotUse)},
  { 345, 352, sizeof(::agv_map::Describe_PointAvoDescEntry_DoNotUse)},
  { 354, 361, sizeof(::agv_map::Describe_SegAgvDescEntry_DoNotUse)},
  { 363, 370, sizeof(::agv_map::Describe_SegCtlDescEntry_DoNotUse)},
  { 372, 379, sizeof(::agv_map::Describe_SegAvoDescEntry_DoNotUse)},
  { 381, 388, sizeof(::agv_map::Describe_FpointDescEntry_DoNotUse)},
  { 390, 397, sizeof(::agv_map::Describe_AreaDescEntry_DoNotUse)},
  { 399, 406, sizeof(::agv_map::Describe_CargoAreaDescEntry_DoNotUse)},
  { 408, -1, sizeof(::agv_map::Describe)},
  { 422, 429, sizeof(::agv_map::AreaDesc_DescEntry_DoNotUse)},
  { 431, -1, sizeof(::agv_map::AreaDesc)},
  { 438, -1, sizeof(::agv_map::Store_offset)},
  { 447, -1, sizeof(::agv_map::store_offset_by_layer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_MAP_ARR_StoreOffConfigEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_MAP_ARR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Map_PointEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Map_SegmentEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Map_FpointEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Map_AreaEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Map_PointStopListEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Map_PointChargeListEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Map_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Conf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Point_AgvParamEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Point_CtlParamEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Point_AvoParamEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Point_StaParamEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Point_Basic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Point_Sparam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Point_Tparam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Segment_AgvParamEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Segment_CtlParamEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Segment_AvoParamEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Segment_Basic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Segment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Fpoint_Basic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Fpoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Area_ParamEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Area_AgvNumEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Area_TypeNumEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Area_Basic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Area_Coord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Area_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Param_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Describe_PointAgvDescEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Describe_PointCtlDescEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Describe_PointAvoDescEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Describe_SegAgvDescEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Describe_SegCtlDescEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Describe_SegAvoDescEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Describe_FpointDescEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Describe_AreaDescEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Describe_CargoAreaDescEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Describe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_AreaDesc_DescEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_AreaDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_Store_offset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_map::_store_offset_by_layer_default_instance_),
};

const char descriptor_table_protodef_agv_5fmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ragv_map.proto\022\007agv_map\"\327\001\n\007MAP_ARR\022\031\n\003"
  "map\030\001 \003(\0132\014.agv_map.Map\022#\n\010describe\030\002 \001("
  "\0132\021.agv_map.Describe\022>\n\020store_off_config"
  "\030\003 \003(\0132$.agv_map.MAP_ARR.StoreOffConfigE"
  "ntry\032L\n\023StoreOffConfigEntry\022\013\n\003key\030\001 \001(\005"
  "\022$\n\005value\030\002 \001(\0132\025.agv_map.Store_offset:\002"
  "8\001\"\310\005\n\003Map\022\033\n\004conf\030\001 \001(\0132\r.agv_map.Conf\022"
  "&\n\005point\030\002 \003(\0132\027.agv_map.Map.PointEntry\022"
  "*\n\007segment\030\003 \003(\0132\031.agv_map.Map.SegmentEn"
  "try\022(\n\006fpoint\030\004 \003(\0132\030.agv_map.Map.Fpoint"
  "Entry\022$\n\004area\030\005 \003(\0132\026.agv_map.Map.AreaEn"
  "try\0228\n\017point_stop_list\030\006 \003(\0132\037.agv_map.M"
  "ap.PointStopListEntry\022<\n\021point_charge_li"
  "st\030\007 \003(\0132!.agv_map.Map.PointChargeListEn"
  "try\032<\n\nPointEntry\022\013\n\003key\030\001 \001(\005\022\035\n\005value\030"
  "\002 \001(\0132\016.agv_map.Point:\0028\001\032@\n\014SegmentEntr"
  "y\022\013\n\003key\030\001 \001(\005\022\037\n\005value\030\002 \001(\0132\020.agv_map."
  "Segment:\0028\001\032>\n\013FpointEntry\022\013\n\003key\030\001 \001(\005\022"
  "\036\n\005value\030\002 \001(\0132\017.agv_map.Fpoint:\0028\001\032:\n\tA"
  "reaEntry\022\013\n\003key\030\001 \001(\005\022\034\n\005value\030\002 \001(\0132\r.a"
  "gv_map.Area:\0028\001\032D\n\022PointStopListEntry\022\013\n"
  "\003key\030\001 \001(\005\022\035\n\005value\030\002 \001(\0132\016.agv_map.Poin"
  "t:\0028\001\032F\n\024PointChargeListEntry\022\013\n\003key\030\001 \001"
  "(\005\022\035\n\005value\030\002 \001(\0132\016.agv_map.Point:\0028\001\"\217\001"
  "\n\004Conf\022\016\n\006map_ts\030\001 \001(\003\022\017\n\007map_pid\030\002 \001(\005\022"
  "\020\n\010map_area\030\003 \001(\005\022\020\n\010map_name\030\004 \001(\t\022\017\n\007m"
  "ax_pid\030\005 \001(\005\022\017\n\007max_sid\030\006 \001(\005\022\017\n\007max_aid"
  "\030\007 \001(\005\022\017\n\007max_fid\030\010 \001(\005\"\346\010\n\005Point\022#\n\005bas"
  "ic\030\001 \001(\0132\024.agv_map.Point.Basic\022/\n\tagv_pa"
  "ram\030\002 \003(\0132\034.agv_map.Point.AgvParamEntry\022"
  "/\n\tctl_param\030\003 \003(\0132\034.agv_map.Point.CtlPa"
  "ramEntry\022/\n\tavo_param\030\004 \003(\0132\034.agv_map.Po"
  "int.AvoParamEntry\022/\n\tsta_param\030\006 \003(\0132\034.a"
  "gv_map.Point.StaParamEntry\022\016\n\006seg_id\030\005 \003"
  "(\005\022\017\n\007in_area\030\010 \003(\005\022)\n\ntest_param\030\007 \001(\0132"
  "\025.agv_map.Point.Tparam\022\023\n\013get_add_seg\030\t "
  "\003(\005\022\023\n\013put_add_seg\030\n \003(\005\032/\n\rAgvParamEntr"
  "y\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\021:\0028\001\032/\n\rCtl"
  "ParamEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\021:\002"
  "8\001\032/\n\rAvoParamEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005valu"
  "e\030\002 \001(\021:\0028\001\032F\n\rStaParamEntry\022\013\n\003key\030\001 \001("
  "\005\022$\n\005value\030\002 \001(\0132\025.agv_map.Point.Sparam:"
  "\0028\001\032\247\002\n\005Basic\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022"
  "\014\n\004type\030\003 \001(\005\022\t\n\001x\030\004 \001(\021\022\t\n\001y\030\005 \001(\021\022\022\n\ng"
  "et_height\030\006 \001(\005\022\022\n\nput_height\030\007 \001(\005\022\022\n\nr"
  "un_height\030\010 \001(\005\022\017\n\007area_id\030\t \001(\021\022\021\n\tarea"
  "_name\030\n \001(\t\022\016\n\006QRcode\030\013 \001(\021\022\r\n\005stype\030\014 \001"
  "(\005\022\r\n\005atype\030\r \001(\005\022\017\n\007disable\030\016 \001(\005\022\014\n\004lo"
  "ck\030\017 \001(\005\022\r\n\005floor\030\020 \001(\021\022\017\n\007agv_dir\030\021 \001(\021"
  "\022\023\n\013connect_arc\030\022 \001(\005\032\205\001\n\006Sparam\022\016\n\006laye"
  "rs\030\001 \001(\005\022\026\n\016horizon_offset\030\002 \001(\021\022\027\n\017vert"
  "ical_offset\030\003 \001(\021\022\022\n\nget_height\030\004 \001(\005\022\022\n"
  "\nput_height\030\005 \001(\005\022\022\n\nrun_height\030\006 \001(\005\032q\n"
  "\006Tparam\022\016\n\006enable\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\020\n"
  "\010interval\030\003 \001(\005\022\016\n\006offset\030\004 \001(\021\022\023\n\013targe"
  "t_area\030\005 \001(\021\022\022\n\ntarget_sta\030\006 \001(\021\"\232\005\n\007Seg"
  "ment\022%\n\005basic\030\001 \001(\0132\026.agv_map.Segment.Ba"
  "sic\0221\n\tagv_param\030\002 \003(\0132\036.agv_map.Segment"
  ".AgvParamEntry\0221\n\tctl_param\030\003 \003(\0132\036.agv_"
  "map.Segment.CtlParamEntry\0221\n\tavo_param\030\004"
  " \003(\0132\036.agv_map.Segment.AvoParamEntry\032/\n\r"
  "AgvParamEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001("
  "\021:\0028\001\032/\n\rCtlParamEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005v"
  "alue\030\002 \001(\021:\0028\001\032/\n\rAvoParamEntry\022\013\n\003key\030\001"
  " \001(\005\022\r\n\005value\030\002 \001(\021:\0028\001\032\273\002\n\005Basic\022\n\n\002id\030"
  "\001 \001(\005\022\020\n\010start_id\030\002 \001(\005\022\017\n\007start_x\030\003 \001(\021"
  "\022\017\n\007start_y\030\004 \001(\021\022\016\n\006end_id\030\005 \001(\005\022\r\n\005end"
  "_x\030\006 \001(\021\022\r\n\005end_y\030\007 \001(\021\022\r\n\005cen_x\030\010 \001(\021\022\r"
  "\n\005cen_y\030\t \001(\021\022\016\n\006radius\030\n \001(\005\022\016\n\006seglen\030"
  "\013 \001(\005\022\014\n\004type\030\014 \001(\005\022\020\n\010dir_mode\030\r \001(\021\022\023\n"
  "\013start_angle\030\016 \001(\002\022\021\n\tend_angle\030\017 \001(\002\022\020\n"
  "\010agv_type\030\020 \001(\003\022\017\n\007disable\030\021 \001(\005\022\014\n\004lock"
  "\030\022 \001(\005\022\r\n\005floor\030\023 \001(\021\"p\n\006Fpoint\022$\n\005basic"
  "\030\001 \001(\0132\025.agv_map.Fpoint.Basic\022\035\n\005param\030\002"
  " \003(\0132\016.agv_map.Param\032!\n\005Basic\022\n\n\002id\030\001 \001("
  "\005\022\014\n\004type\030\002 \001(\005\"\325\003\n\004Area\022\"\n\005basic\030\001 \001(\0132"
  "\023.agv_map.Area.Basic\022\'\n\005param\030\002 \003(\0132\030.ag"
  "v_map.Area.ParamEntry\022\"\n\005coord\030\003 \003(\0132\023.a"
  "gv_map.Area.Coord\022\020\n\010point_in\030\004 \003(\005\022*\n\007a"
  "gv_num\030\005 \003(\0132\031.agv_map.Area.AgvNumEntry\022"
  "\023\n\013relate_area\030\006 \003(\005\022,\n\010type_num\030\007 \003(\0132\032"
  ".agv_map.Area.TypeNumEntry\032,\n\nParamEntry"
  "\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\021:\0028\001\032-\n\013AgvN"
  "umEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\032"
  ".\n\014TypeNumEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 "
  "\001(\005:\0028\001\032/\n\005Basic\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001"
  "(\005\022\014\n\004name\030\003 \001(\t\032\035\n\005Coord\022\t\n\001x\030\001 \001(\021\022\t\n\001"
  "y\030\002 \001(\021\"#\n\005Param\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002"
  " \001(\021\"\374\007\n\010Describe\022;\n\016point_agv_desc\030\001 \003("
  "\0132#.agv_map.Describe.PointAgvDescEntry\022;"
  "\n\016point_ctl_desc\030\002 \003(\0132#.agv_map.Describ"
  "e.PointCtlDescEntry\022;\n\016point_avo_desc\030\003 "
  "\003(\0132#.agv_map.Describe.PointAvoDescEntry"
  "\0227\n\014seg_agv_desc\030\004 \003(\0132!.agv_map.Describ"
  "e.SegAgvDescEntry\0227\n\014seg_ctl_desc\030\005 \003(\0132"
  "!.agv_map.Describe.SegCtlDescEntry\0227\n\014se"
  "g_avo_desc\030\006 \003(\0132!.agv_map.Describe.SegA"
  "voDescEntry\0226\n\013fpoint_desc\030\007 \003(\0132!.agv_m"
  "ap.Describe.FpointDescEntry\0222\n\tarea_desc"
  "\030\010 \003(\0132\037.agv_map.Describe.AreaDescEntry\022"
  "=\n\017cargo_area_desc\030\t \003(\0132$.agv_map.Descr"
  "ibe.CargoAreaDescEntry\0323\n\021PointAgvDescEn"
  "try\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\0028\001\0323\n\021P"
  "ointCtlDescEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002"
  " \001(\t:\0028\001\0323\n\021PointAvoDescEntry\022\013\n\003key\030\001 \001"
  "(\005\022\r\n\005value\030\002 \001(\t:\0028\001\0321\n\017SegAgvDescEntry"
  "\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\0028\001\0321\n\017SegC"
  "tlDescEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:"
  "\0028\001\0321\n\017SegAvoDescEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005v"
  "alue\030\002 \001(\t:\0028\001\0321\n\017FpointDescEntry\022\013\n\003key"
  "\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\0028\001\032B\n\rAreaDescEnt"
  "ry\022\013\n\003key\030\001 \001(\005\022 \n\005value\030\002 \001(\0132\021.agv_map"
  ".AreaDesc:\0028\001\0324\n\022CargoAreaDescEntry\022\013\n\003k"
  "ey\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\0028\001\"p\n\010AreaDesc\022"
  "\014\n\004type\030\001 \001(\t\022)\n\004desc\030\002 \003(\0132\033.agv_map.Ar"
  "eaDesc.DescEntry\032+\n\tDescEntry\022\013\n\003key\030\001 \001"
  "(\005\022\r\n\005value\030\002 \001(\t:\0028\001\"\316\001\n\014Store_offset\022."
  "\n\006layer1\030\001 \001(\0132\036.agv_map.store_offset_by"
  "_layer\022.\n\006layer2\030\002 \001(\0132\036.agv_map.store_o"
  "ffset_by_layer\022.\n\006layer3\030\003 \001(\0132\036.agv_map"
  ".store_offset_by_layer\022.\n\006layer4\030\004 \001(\0132\036"
  ".agv_map.store_offset_by_layer\"s\n\025store_"
  "offset_by_layer\022\014\n\004high\030\001 \001(\002\022\031\n\021horizon"
  "tal_offset\030\002 \001(\002\022\027\n\017vertical_offset\030\003 \001("
  "\002\022\030\n\020fork_high_offset\030\004 \001(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_agv_5fmap_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_agv_5fmap_2eproto_sccs[46] = {
  &scc_info_Area_agv_5fmap_2eproto.base,
  &scc_info_Area_AgvNumEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Area_Basic_agv_5fmap_2eproto.base,
  &scc_info_Area_Coord_agv_5fmap_2eproto.base,
  &scc_info_Area_ParamEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Area_TypeNumEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_AreaDesc_agv_5fmap_2eproto.base,
  &scc_info_AreaDesc_DescEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Conf_agv_5fmap_2eproto.base,
  &scc_info_Describe_agv_5fmap_2eproto.base,
  &scc_info_Describe_AreaDescEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Describe_CargoAreaDescEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Describe_FpointDescEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Describe_PointAgvDescEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Describe_PointAvoDescEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Describe_PointCtlDescEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Describe_SegAgvDescEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Describe_SegAvoDescEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Describe_SegCtlDescEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Fpoint_agv_5fmap_2eproto.base,
  &scc_info_Fpoint_Basic_agv_5fmap_2eproto.base,
  &scc_info_MAP_ARR_agv_5fmap_2eproto.base,
  &scc_info_MAP_ARR_StoreOffConfigEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Map_agv_5fmap_2eproto.base,
  &scc_info_Map_AreaEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Map_FpointEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Map_PointChargeListEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Map_PointEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Map_PointStopListEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Map_SegmentEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Param_agv_5fmap_2eproto.base,
  &scc_info_Point_agv_5fmap_2eproto.base,
  &scc_info_Point_AgvParamEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Point_AvoParamEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Point_Basic_agv_5fmap_2eproto.base,
  &scc_info_Point_CtlParamEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Point_Sparam_agv_5fmap_2eproto.base,
  &scc_info_Point_StaParamEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Point_Tparam_agv_5fmap_2eproto.base,
  &scc_info_Segment_agv_5fmap_2eproto.base,
  &scc_info_Segment_AgvParamEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Segment_AvoParamEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Segment_Basic_agv_5fmap_2eproto.base,
  &scc_info_Segment_CtlParamEntry_DoNotUse_agv_5fmap_2eproto.base,
  &scc_info_Store_offset_agv_5fmap_2eproto.base,
  &scc_info_store_offset_by_layer_agv_5fmap_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_agv_5fmap_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_agv_5fmap_2eproto = {
  false, false, descriptor_table_protodef_agv_5fmap_2eproto, "agv_map.proto", 4995,
  &descriptor_table_agv_5fmap_2eproto_once, descriptor_table_agv_5fmap_2eproto_sccs, descriptor_table_agv_5fmap_2eproto_deps, 46, 0,
  schemas, file_default_instances, TableStruct_agv_5fmap_2eproto::offsets,
  file_level_metadata_agv_5fmap_2eproto, 46, file_level_enum_descriptors_agv_5fmap_2eproto, file_level_service_descriptors_agv_5fmap_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_agv_5fmap_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_agv_5fmap_2eproto)), true);
namespace agv_map {

// ===================================================================

MAP_ARR_StoreOffConfigEntry_DoNotUse::MAP_ARR_StoreOffConfigEntry_DoNotUse() {}
MAP_ARR_StoreOffConfigEntry_DoNotUse::MAP_ARR_StoreOffConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MAP_ARR_StoreOffConfigEntry_DoNotUse::MergeFrom(const MAP_ARR_StoreOffConfigEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MAP_ARR_StoreOffConfigEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MAP_ARR_StoreOffConfigEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class MAP_ARR::_Internal {
 public:
  static const ::agv_map::Describe& describe(const MAP_ARR* msg);
};

const ::agv_map::Describe&
MAP_ARR::_Internal::describe(const MAP_ARR* msg) {
  return *msg->describe_;
}
MAP_ARR::MAP_ARR(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  map_(arena),
  store_off_config_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_map.MAP_ARR)
}
MAP_ARR::MAP_ARR(const MAP_ARR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      map_(from.map_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  store_off_config_.MergeFrom(from.store_off_config_);
  if (from._internal_has_describe()) {
    describe_ = new ::agv_map::Describe(*from.describe_);
  } else {
    describe_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.MAP_ARR)
}

void MAP_ARR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MAP_ARR_agv_5fmap_2eproto.base);
  describe_ = nullptr;
}

MAP_ARR::~MAP_ARR() {
  // @@protoc_insertion_point(destructor:agv_map.MAP_ARR)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MAP_ARR::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete describe_;
}

void MAP_ARR::ArenaDtor(void* object) {
  MAP_ARR* _this = reinterpret_cast< MAP_ARR* >(object);
  (void)_this;
}
void MAP_ARR::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MAP_ARR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MAP_ARR& MAP_ARR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MAP_ARR_agv_5fmap_2eproto.base);
  return *internal_default_instance();
}


void MAP_ARR::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.MAP_ARR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  store_off_config_.Clear();
  if (GetArena() == nullptr && describe_ != nullptr) {
    delete describe_;
  }
  describe_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MAP_ARR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .agv_map.Map map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .agv_map.Describe describe = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_describe(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .agv_map.Store_offset> store_off_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&store_off_config_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MAP_ARR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.MAP_ARR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .agv_map.Map map = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_map_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_map(i), target, stream);
  }

  // .agv_map.Describe describe = 2;
  if (this->has_describe()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::describe(this), target, stream);
  }

  // map<int32, .agv_map.Store_offset> store_off_config = 3;
  if (!this->_internal_store_off_config().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Store_offset >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_store_off_config().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_store_off_config().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Store_offset >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Store_offset >::const_iterator
          it = this->_internal_store_off_config().begin();
          it != this->_internal_store_off_config().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MAP_ARR_StoreOffConfigEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Store_offset >::const_iterator
          it = this->_internal_store_off_config().begin();
          it != this->_internal_store_off_config().end(); ++it) {
        target = MAP_ARR_StoreOffConfigEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.MAP_ARR)
  return target;
}

size_t MAP_ARR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.MAP_ARR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agv_map.Map map = 1;
  total_size += 1UL * this->_internal_map_size();
  for (const auto& msg : this->map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int32, .agv_map.Store_offset> store_off_config = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_store_off_config_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Store_offset >::const_iterator
      it = this->_internal_store_off_config().begin();
      it != this->_internal_store_off_config().end(); ++it) {
    total_size += MAP_ARR_StoreOffConfigEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .agv_map.Describe describe = 2;
  if (this->has_describe()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *describe_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MAP_ARR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_map.MAP_ARR)
  GOOGLE_DCHECK_NE(&from, this);
  const MAP_ARR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MAP_ARR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_map.MAP_ARR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_map.MAP_ARR)
    MergeFrom(*source);
  }
}

void MAP_ARR::MergeFrom(const MAP_ARR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_map.MAP_ARR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
  store_off_config_.MergeFrom(from.store_off_config_);
  if (from.has_describe()) {
    _internal_mutable_describe()->::agv_map::Describe::MergeFrom(from._internal_describe());
  }
}

void MAP_ARR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_map.MAP_ARR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MAP_ARR::CopyFrom(const MAP_ARR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.MAP_ARR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MAP_ARR::IsInitialized() const {
  return true;
}

void MAP_ARR::InternalSwap(MAP_ARR* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  map_.InternalSwap(&other->map_);
  store_off_config_.Swap(&other->store_off_config_);
  swap(describe_, other->describe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MAP_ARR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Map_PointEntry_DoNotUse::Map_PointEntry_DoNotUse() {}
Map_PointEntry_DoNotUse::Map_PointEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Map_PointEntry_DoNotUse::MergeFrom(const Map_PointEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Map_PointEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Map_PointEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Map_SegmentEntry_DoNotUse::Map_SegmentEntry_DoNotUse() {}
Map_SegmentEntry_DoNotUse::Map_SegmentEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Map_SegmentEntry_DoNotUse::MergeFrom(const Map_SegmentEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Map_SegmentEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Map_SegmentEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Map_FpointEntry_DoNotUse::Map_FpointEntry_DoNotUse() {}
Map_FpointEntry_DoNotUse::Map_FpointEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Map_FpointEntry_DoNotUse::MergeFrom(const Map_FpointEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Map_FpointEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Map_FpointEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Map_AreaEntry_DoNotUse::Map_AreaEntry_DoNotUse() {}
Map_AreaEntry_DoNotUse::Map_AreaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Map_AreaEntry_DoNotUse::MergeFrom(const Map_AreaEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Map_AreaEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Map_AreaEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Map_PointStopListEntry_DoNotUse::Map_PointStopListEntry_DoNotUse() {}
Map_PointStopListEntry_DoNotUse::Map_PointStopListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Map_PointStopListEntry_DoNotUse::MergeFrom(const Map_PointStopListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Map_PointStopListEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Map_PointStopListEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Map_PointChargeListEntry_DoNotUse::Map_PointChargeListEntry_DoNotUse() {}
Map_PointChargeListEntry_DoNotUse::Map_PointChargeListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Map_PointChargeListEntry_DoNotUse::MergeFrom(const Map_PointChargeListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Map_PointChargeListEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Map_PointChargeListEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Map::_Internal {
 public:
  static const ::agv_map::Conf& conf(const Map* msg);
};

const ::agv_map::Conf&
Map::_Internal::conf(const Map* msg) {
  return *msg->conf_;
}
Map::Map(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  point_(arena),
  segment_(arena),
  fpoint_(arena),
  area_(arena),
  point_stop_list_(arena),
  point_charge_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_map.Map)
}
Map::Map(const Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  point_.MergeFrom(from.point_);
  segment_.MergeFrom(from.segment_);
  fpoint_.MergeFrom(from.fpoint_);
  area_.MergeFrom(from.area_);
  point_stop_list_.MergeFrom(from.point_stop_list_);
  point_charge_list_.MergeFrom(from.point_charge_list_);
  if (from._internal_has_conf()) {
    conf_ = new ::agv_map::Conf(*from.conf_);
  } else {
    conf_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.Map)
}

void Map::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Map_agv_5fmap_2eproto.base);
  conf_ = nullptr;
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:agv_map.Map)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Map::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete conf_;
}

void Map::ArenaDtor(void* object) {
  Map* _this = reinterpret_cast< Map* >(object);
  (void)_this;
}
void Map::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Map& Map::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Map_agv_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  segment_.Clear();
  fpoint_.Clear();
  area_.Clear();
  point_stop_list_.Clear();
  point_charge_list_.Clear();
  if (GetArena() == nullptr && conf_ != nullptr) {
    delete conf_;
  }
  conf_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Map::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agv_map.Conf conf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .agv_map.Point> point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&point_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .agv_map.Segment> segment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&segment_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .agv_map.Fpoint> fpoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&fpoint_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .agv_map.Area> area = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&area_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .agv_map.Point> point_stop_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&point_stop_list_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .agv_map.Point> point_charge_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&point_charge_list_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Map::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agv_map.Conf conf = 1;
  if (this->has_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::conf(this), target, stream);
  }

  // map<int32, .agv_map.Point> point = 2;
  if (!this->_internal_point().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_point().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_point().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point >::const_iterator
          it = this->_internal_point().begin();
          it != this->_internal_point().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Map_PointEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point >::const_iterator
          it = this->_internal_point().begin();
          it != this->_internal_point().end(); ++it) {
        target = Map_PointEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .agv_map.Segment> segment = 3;
  if (!this->_internal_segment().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Segment >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_segment().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_segment().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Segment >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Segment >::const_iterator
          it = this->_internal_segment().begin();
          it != this->_internal_segment().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Map_SegmentEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Segment >::const_iterator
          it = this->_internal_segment().begin();
          it != this->_internal_segment().end(); ++it) {
        target = Map_SegmentEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .agv_map.Fpoint> fpoint = 4;
  if (!this->_internal_fpoint().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Fpoint >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_fpoint().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_fpoint().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Fpoint >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Fpoint >::const_iterator
          it = this->_internal_fpoint().begin();
          it != this->_internal_fpoint().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Map_FpointEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Fpoint >::const_iterator
          it = this->_internal_fpoint().begin();
          it != this->_internal_fpoint().end(); ++it) {
        target = Map_FpointEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .agv_map.Area> area = 5;
  if (!this->_internal_area().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Area >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_area().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_area().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Area >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Area >::const_iterator
          it = this->_internal_area().begin();
          it != this->_internal_area().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Map_AreaEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Area >::const_iterator
          it = this->_internal_area().begin();
          it != this->_internal_area().end(); ++it) {
        target = Map_AreaEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .agv_map.Point> point_stop_list = 6;
  if (!this->_internal_point_stop_list().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_point_stop_list().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_point_stop_list().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point >::const_iterator
          it = this->_internal_point_stop_list().begin();
          it != this->_internal_point_stop_list().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Map_PointStopListEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point >::const_iterator
          it = this->_internal_point_stop_list().begin();
          it != this->_internal_point_stop_list().end(); ++it) {
        target = Map_PointStopListEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .agv_map.Point> point_charge_list = 7;
  if (!this->_internal_point_charge_list().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_point_charge_list().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_point_charge_list().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point >::const_iterator
          it = this->_internal_point_charge_list().begin();
          it != this->_internal_point_charge_list().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Map_PointChargeListEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point >::const_iterator
          it = this->_internal_point_charge_list().begin();
          it != this->_internal_point_charge_list().end(); ++it) {
        target = Map_PointChargeListEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Map)
  return target;
}

size_t Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Map)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .agv_map.Point> point = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_point_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point >::const_iterator
      it = this->_internal_point().begin();
      it != this->_internal_point().end(); ++it) {
    total_size += Map_PointEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .agv_map.Segment> segment = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_segment_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Segment >::const_iterator
      it = this->_internal_segment().begin();
      it != this->_internal_segment().end(); ++it) {
    total_size += Map_SegmentEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .agv_map.Fpoint> fpoint = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fpoint_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Fpoint >::const_iterator
      it = this->_internal_fpoint().begin();
      it != this->_internal_fpoint().end(); ++it) {
    total_size += Map_FpointEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .agv_map.Area> area = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_area_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Area >::const_iterator
      it = this->_internal_area().begin();
      it != this->_internal_area().end(); ++it) {
    total_size += Map_AreaEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .agv_map.Point> point_stop_list = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_point_stop_list_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point >::const_iterator
      it = this->_internal_point_stop_list().begin();
      it != this->_internal_point_stop_list().end(); ++it) {
    total_size += Map_PointStopListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .agv_map.Point> point_charge_list = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_point_charge_list_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point >::const_iterator
      it = this->_internal_point_charge_list().begin();
      it != this->_internal_point_charge_list().end(); ++it) {
    total_size += Map_PointChargeListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .agv_map.Conf conf = 1;
  if (this->has_conf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conf_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_map.Map)
  GOOGLE_DCHECK_NE(&from, this);
  const Map* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Map>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_map.Map)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_map.Map)
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  segment_.MergeFrom(from.segment_);
  fpoint_.MergeFrom(from.fpoint_);
  area_.MergeFrom(from.area_);
  point_stop_list_.MergeFrom(from.point_stop_list_);
  point_charge_list_.MergeFrom(from.point_charge_list_);
  if (from.has_conf()) {
    _internal_mutable_conf()->::agv_map::Conf::MergeFrom(from._internal_conf());
  }
}

void Map::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_map.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  return true;
}

void Map::InternalSwap(Map* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  point_.Swap(&other->point_);
  segment_.Swap(&other->segment_);
  fpoint_.Swap(&other->fpoint_);
  area_.Swap(&other->area_);
  point_stop_list_.Swap(&other->point_stop_list_);
  point_charge_list_.Swap(&other->point_charge_list_);
  swap(conf_, other->conf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Map::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Conf::_Internal {
 public:
};

Conf::Conf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_map.Conf)
}
Conf::Conf(const Conf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_name().empty()) {
    map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_name(), 
      GetArena());
  }
  ::memcpy(&map_ts_, &from.map_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_fid_) -
    reinterpret_cast<char*>(&map_ts_)) + sizeof(max_fid_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Conf)
}

void Conf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Conf_agv_5fmap_2eproto.base);
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&map_ts_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_fid_) -
      reinterpret_cast<char*>(&map_ts_)) + sizeof(max_fid_));
}

Conf::~Conf() {
  // @@protoc_insertion_point(destructor:agv_map.Conf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Conf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Conf::ArenaDtor(void* object) {
  Conf* _this = reinterpret_cast< Conf* >(object);
  (void)_this;
}
void Conf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Conf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Conf& Conf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Conf_agv_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Conf::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Conf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_name_.ClearToEmpty();
  ::memset(&map_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_fid_) -
      reinterpret_cast<char*>(&map_ts_)) + sizeof(max_fid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Conf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 map_ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          map_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 map_pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          map_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 map_area = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          map_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string map_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agv_map.Conf.map_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_pid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          max_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_sid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_sid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_aid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_aid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_fid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          max_fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Conf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Conf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 map_ts = 1;
  if (this->map_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_map_ts(), target);
  }

  // int32 map_pid = 2;
  if (this->map_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_pid(), target);
  }

  // int32 map_area = 3;
  if (this->map_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_map_area(), target);
  }

  // string map_name = 4;
  if (this->map_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Conf.map_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_map_name(), target);
  }

  // int32 max_pid = 5;
  if (this->max_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_max_pid(), target);
  }

  // int32 max_sid = 6;
  if (this->max_sid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_max_sid(), target);
  }

  // int32 max_aid = 7;
  if (this->max_aid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_aid(), target);
  }

  // int32 max_fid = 8;
  if (this->max_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_max_fid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Conf)
  return target;
}

size_t Conf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Conf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_name = 4;
  if (this->map_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_name());
  }

  // int64 map_ts = 1;
  if (this->map_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_map_ts());
  }

  // int32 map_pid = 2;
  if (this->map_pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_pid());
  }

  // int32 map_area = 3;
  if (this->map_area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_area());
  }

  // int32 max_pid = 5;
  if (this->max_pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_pid());
  }

  // int32 max_sid = 6;
  if (this->max_sid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_sid());
  }

  // int32 max_aid = 7;
  if (this->max_aid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_aid());
  }

  // int32 max_fid = 8;
  if (this->max_fid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_fid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Conf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_map.Conf)
  GOOGLE_DCHECK_NE(&from, this);
  const Conf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Conf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_map.Conf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_map.Conf)
    MergeFrom(*source);
  }
}

void Conf::MergeFrom(const Conf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Conf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_name().size() > 0) {
    _internal_set_map_name(from._internal_map_name());
  }
  if (from.map_ts() != 0) {
    _internal_set_map_ts(from._internal_map_ts());
  }
  if (from.map_pid() != 0) {
    _internal_set_map_pid(from._internal_map_pid());
  }
  if (from.map_area() != 0) {
    _internal_set_map_area(from._internal_map_area());
  }
  if (from.max_pid() != 0) {
    _internal_set_max_pid(from._internal_max_pid());
  }
  if (from.max_sid() != 0) {
    _internal_set_max_sid(from._internal_max_sid());
  }
  if (from.max_aid() != 0) {
    _internal_set_max_aid(from._internal_max_aid());
  }
  if (from.max_fid() != 0) {
    _internal_set_max_fid(from._internal_max_fid());
  }
}

void Conf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_map.Conf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conf::CopyFrom(const Conf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Conf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conf::IsInitialized() const {
  return true;
}

void Conf::InternalSwap(Conf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  map_name_.Swap(&other->map_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Conf, max_fid_)
      + sizeof(Conf::max_fid_)
      - PROTOBUF_FIELD_OFFSET(Conf, map_ts_)>(
          reinterpret_cast<char*>(&map_ts_),
          reinterpret_cast<char*>(&other->map_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Conf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Point_AgvParamEntry_DoNotUse::Point_AgvParamEntry_DoNotUse() {}
Point_AgvParamEntry_DoNotUse::Point_AgvParamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Point_AgvParamEntry_DoNotUse::MergeFrom(const Point_AgvParamEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Point_AgvParamEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Point_AgvParamEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Point_CtlParamEntry_DoNotUse::Point_CtlParamEntry_DoNotUse() {}
Point_CtlParamEntry_DoNotUse::Point_CtlParamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Point_CtlParamEntry_DoNotUse::MergeFrom(const Point_CtlParamEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Point_CtlParamEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Point_CtlParamEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Point_AvoParamEntry_DoNotUse::Point_AvoParamEntry_DoNotUse() {}
Point_AvoParamEntry_DoNotUse::Point_AvoParamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Point_AvoParamEntry_DoNotUse::MergeFrom(const Point_AvoParamEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Point_AvoParamEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Point_AvoParamEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Point_StaParamEntry_DoNotUse::Point_StaParamEntry_DoNotUse() {}
Point_StaParamEntry_DoNotUse::Point_StaParamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Point_StaParamEntry_DoNotUse::MergeFrom(const Point_StaParamEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Point_StaParamEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Point_StaParamEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Point_Basic::_Internal {
 public:
};

Point_Basic::Point_Basic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_map.Point.Basic)
}
Point_Basic::Point_Basic(const Point_Basic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  area_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_area_name().empty()) {
    area_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_area_name(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&connect_arc_) -
    reinterpret_cast<char*>(&id_)) + sizeof(connect_arc_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Point.Basic)
}

void Point_Basic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Point_Basic_agv_5fmap_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  area_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&connect_arc_) -
      reinterpret_cast<char*>(&id_)) + sizeof(connect_arc_));
}

Point_Basic::~Point_Basic() {
  // @@protoc_insertion_point(destructor:agv_map.Point.Basic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point_Basic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  area_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Point_Basic::ArenaDtor(void* object) {
  Point_Basic* _this = reinterpret_cast< Point_Basic* >(object);
  (void)_this;
}
void Point_Basic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point_Basic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point_Basic& Point_Basic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_Basic_agv_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Point_Basic::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Point.Basic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  area_name_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connect_arc_) -
      reinterpret_cast<char*>(&id_)) + sizeof(connect_arc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point_Basic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agv_map.Point.Basic.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 get_height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          get_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 put_height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          put_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 run_height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          run_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 area_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          area_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string area_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_area_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agv_map.Point.Basic.area_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 QRcode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          qrcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stype = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          stype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 atype = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          atype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 disable = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          disable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lock = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 floor = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 agv_dir = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          agv_dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 connect_arc = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          connect_arc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point_Basic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Point.Basic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Point.Basic.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // sint32 x = 4;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_x(), target);
  }

  // sint32 y = 5;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_y(), target);
  }

  // int32 get_height = 6;
  if (this->get_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_get_height(), target);
  }

  // int32 put_height = 7;
  if (this->put_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_put_height(), target);
  }

  // int32 run_height = 8;
  if (this->run_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_run_height(), target);
  }

  // sint32 area_id = 9;
  if (this->area_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(9, this->_internal_area_id(), target);
  }

  // string area_name = 10;
  if (this->area_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_area_name().data(), static_cast<int>(this->_internal_area_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Point.Basic.area_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_area_name(), target);
  }

  // sint32 QRcode = 11;
  if (this->qrcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(11, this->_internal_qrcode(), target);
  }

  // int32 stype = 12;
  if (this->stype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_stype(), target);
  }

  // int32 atype = 13;
  if (this->atype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_atype(), target);
  }

  // int32 disable = 14;
  if (this->disable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_disable(), target);
  }

  // int32 lock = 15;
  if (this->lock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_lock(), target);
  }

  // sint32 floor = 16;
  if (this->floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(16, this->_internal_floor(), target);
  }

  // sint32 agv_dir = 17;
  if (this->agv_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(17, this->_internal_agv_dir(), target);
  }

  // int32 connect_arc = 18;
  if (this->connect_arc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_connect_arc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Point.Basic)
  return target;
}

size_t Point_Basic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Point.Basic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string area_name = 10;
  if (this->area_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_area_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // sint32 x = 4;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_x());
  }

  // sint32 y = 5;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_y());
  }

  // int32 get_height = 6;
  if (this->get_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_get_height());
  }

  // int32 put_height = 7;
  if (this->put_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_put_height());
  }

  // int32 run_height = 8;
  if (this->run_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_run_height());
  }

  // sint32 area_id = 9;
  if (this->area_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_area_id());
  }

  // sint32 QRcode = 11;
  if (this->qrcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_qrcode());
  }

  // int32 stype = 12;
  if (this->stype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stype());
  }

  // int32 atype = 13;
  if (this->atype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_atype());
  }

  // int32 disable = 14;
  if (this->disable() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_disable());
  }

  // int32 lock = 15;
  if (this->lock() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lock());
  }

  // sint32 floor = 16;
  if (this->floor() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_floor());
  }

  // sint32 agv_dir = 17;
  if (this->agv_dir() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_agv_dir());
  }

  // int32 connect_arc = 18;
  if (this->connect_arc() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_connect_arc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point_Basic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_map.Point.Basic)
  GOOGLE_DCHECK_NE(&from, this);
  const Point_Basic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point_Basic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_map.Point.Basic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_map.Point.Basic)
    MergeFrom(*source);
  }
}

void Point_Basic::MergeFrom(const Point_Basic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Point.Basic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.area_name().size() > 0) {
    _internal_set_area_name(from._internal_area_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.get_height() != 0) {
    _internal_set_get_height(from._internal_get_height());
  }
  if (from.put_height() != 0) {
    _internal_set_put_height(from._internal_put_height());
  }
  if (from.run_height() != 0) {
    _internal_set_run_height(from._internal_run_height());
  }
  if (from.area_id() != 0) {
    _internal_set_area_id(from._internal_area_id());
  }
  if (from.qrcode() != 0) {
    _internal_set_qrcode(from._internal_qrcode());
  }
  if (from.stype() != 0) {
    _internal_set_stype(from._internal_stype());
  }
  if (from.atype() != 0) {
    _internal_set_atype(from._internal_atype());
  }
  if (from.disable() != 0) {
    _internal_set_disable(from._internal_disable());
  }
  if (from.lock() != 0) {
    _internal_set_lock(from._internal_lock());
  }
  if (from.floor() != 0) {
    _internal_set_floor(from._internal_floor());
  }
  if (from.agv_dir() != 0) {
    _internal_set_agv_dir(from._internal_agv_dir());
  }
  if (from.connect_arc() != 0) {
    _internal_set_connect_arc(from._internal_connect_arc());
  }
}

void Point_Basic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_map.Point.Basic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point_Basic::CopyFrom(const Point_Basic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Point.Basic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point_Basic::IsInitialized() const {
  return true;
}

void Point_Basic::InternalSwap(Point_Basic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  area_name_.Swap(&other->area_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point_Basic, connect_arc_)
      + sizeof(Point_Basic::connect_arc_)
      - PROTOBUF_FIELD_OFFSET(Point_Basic, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point_Basic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Point_Sparam::_Internal {
 public:
};

Point_Sparam::Point_Sparam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_map.Point.Sparam)
}
Point_Sparam::Point_Sparam(const Point_Sparam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&layers_, &from.layers_,
    static_cast<size_t>(reinterpret_cast<char*>(&run_height_) -
    reinterpret_cast<char*>(&layers_)) + sizeof(run_height_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Point.Sparam)
}

void Point_Sparam::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&layers_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&run_height_) -
      reinterpret_cast<char*>(&layers_)) + sizeof(run_height_));
}

Point_Sparam::~Point_Sparam() {
  // @@protoc_insertion_point(destructor:agv_map.Point.Sparam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point_Sparam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point_Sparam::ArenaDtor(void* object) {
  Point_Sparam* _this = reinterpret_cast< Point_Sparam* >(object);
  (void)_this;
}
void Point_Sparam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point_Sparam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point_Sparam& Point_Sparam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_Sparam_agv_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Point_Sparam::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Point.Sparam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&layers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&run_height_) -
      reinterpret_cast<char*>(&layers_)) + sizeof(run_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point_Sparam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 layers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          layers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 horizon_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          horizon_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 vertical_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          vertical_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 get_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          get_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 put_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          put_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 run_height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          run_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point_Sparam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Point.Sparam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 layers = 1;
  if (this->layers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_layers(), target);
  }

  // sint32 horizon_offset = 2;
  if (this->horizon_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_horizon_offset(), target);
  }

  // sint32 vertical_offset = 3;
  if (this->vertical_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_vertical_offset(), target);
  }

  // int32 get_height = 4;
  if (this->get_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_get_height(), target);
  }

  // int32 put_height = 5;
  if (this->put_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_put_height(), target);
  }

  // int32 run_height = 6;
  if (this->run_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_run_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Point.Sparam)
  return target;
}

size_t Point_Sparam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Point.Sparam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 layers = 1;
  if (this->layers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_layers());
  }

  // sint32 horizon_offset = 2;
  if (this->horizon_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_horizon_offset());
  }

  // sint32 vertical_offset = 3;
  if (this->vertical_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_vertical_offset());
  }

  // int32 get_height = 4;
  if (this->get_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_get_height());
  }

  // int32 put_height = 5;
  if (this->put_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_put_height());
  }

  // int32 run_height = 6;
  if (this->run_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_run_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point_Sparam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_map.Point.Sparam)
  GOOGLE_DCHECK_NE(&from, this);
  const Point_Sparam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point_Sparam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_map.Point.Sparam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_map.Point.Sparam)
    MergeFrom(*source);
  }
}

void Point_Sparam::MergeFrom(const Point_Sparam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Point.Sparam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.layers() != 0) {
    _internal_set_layers(from._internal_layers());
  }
  if (from.horizon_offset() != 0) {
    _internal_set_horizon_offset(from._internal_horizon_offset());
  }
  if (from.vertical_offset() != 0) {
    _internal_set_vertical_offset(from._internal_vertical_offset());
  }
  if (from.get_height() != 0) {
    _internal_set_get_height(from._internal_get_height());
  }
  if (from.put_height() != 0) {
    _internal_set_put_height(from._internal_put_height());
  }
  if (from.run_height() != 0) {
    _internal_set_run_height(from._internal_run_height());
  }
}

void Point_Sparam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_map.Point.Sparam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point_Sparam::CopyFrom(const Point_Sparam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Point.Sparam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point_Sparam::IsInitialized() const {
  return true;
}

void Point_Sparam::InternalSwap(Point_Sparam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point_Sparam, run_height_)
      + sizeof(Point_Sparam::run_height_)
      - PROTOBUF_FIELD_OFFSET(Point_Sparam, layers_)>(
          reinterpret_cast<char*>(&layers_),
          reinterpret_cast<char*>(&other->layers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point_Sparam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Point_Tparam::_Internal {
 public:
};

Point_Tparam::Point_Tparam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_map.Point.Tparam)
}
Point_Tparam::Point_Tparam(const Point_Tparam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_sta_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(target_sta_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Point.Tparam)
}

void Point_Tparam::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&target_sta_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(target_sta_));
}

Point_Tparam::~Point_Tparam() {
  // @@protoc_insertion_point(destructor:agv_map.Point.Tparam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point_Tparam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point_Tparam::ArenaDtor(void* object) {
  Point_Tparam* _this = reinterpret_cast< Point_Tparam* >(object);
  (void)_this;
}
void Point_Tparam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point_Tparam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point_Tparam& Point_Tparam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_Tparam_agv_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Point_Tparam::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Point.Tparam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_sta_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(target_sta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point_Tparam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 target_area = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          target_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 target_sta = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          target_sta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point_Tparam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Point.Tparam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_enable(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 interval = 3;
  if (this->interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_interval(), target);
  }

  // sint32 offset = 4;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_offset(), target);
  }

  // sint32 target_area = 5;
  if (this->target_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_target_area(), target);
  }

  // sint32 target_sta = 6;
  if (this->target_sta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_target_sta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Point.Tparam)
  return target;
}

size_t Point_Tparam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Point.Tparam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 enable = 1;
  if (this->enable() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enable());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 interval = 3;
  if (this->interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_interval());
  }

  // sint32 offset = 4;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_offset());
  }

  // sint32 target_area = 5;
  if (this->target_area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_target_area());
  }

  // sint32 target_sta = 6;
  if (this->target_sta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_target_sta());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point_Tparam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_map.Point.Tparam)
  GOOGLE_DCHECK_NE(&from, this);
  const Point_Tparam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point_Tparam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_map.Point.Tparam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_map.Point.Tparam)
    MergeFrom(*source);
  }
}

void Point_Tparam::MergeFrom(const Point_Tparam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Point.Tparam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.target_area() != 0) {
    _internal_set_target_area(from._internal_target_area());
  }
  if (from.target_sta() != 0) {
    _internal_set_target_sta(from._internal_target_sta());
  }
}

void Point_Tparam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_map.Point.Tparam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point_Tparam::CopyFrom(const Point_Tparam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Point.Tparam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point_Tparam::IsInitialized() const {
  return true;
}

void Point_Tparam::InternalSwap(Point_Tparam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point_Tparam, target_sta_)
      + sizeof(Point_Tparam::target_sta_)
      - PROTOBUF_FIELD_OFFSET(Point_Tparam, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point_Tparam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Point::_Internal {
 public:
  static const ::agv_map::Point_Basic& basic(const Point* msg);
  static const ::agv_map::Point_Tparam& test_param(const Point* msg);
};

const ::agv_map::Point_Basic&
Point::_Internal::basic(const Point* msg) {
  return *msg->basic_;
}
const ::agv_map::Point_Tparam&
Point::_Internal::test_param(const Point* msg) {
  return *msg->test_param_;
}
Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agv_param_(arena),
  ctl_param_(arena),
  avo_param_(arena),
  seg_id_(arena),
  sta_param_(arena),
  in_area_(arena),
  get_add_seg_(arena),
  put_add_seg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_map.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      seg_id_(from.seg_id_),
      in_area_(from.in_area_),
      get_add_seg_(from.get_add_seg_),
      put_add_seg_(from.put_add_seg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agv_param_.MergeFrom(from.agv_param_);
  ctl_param_.MergeFrom(from.ctl_param_);
  avo_param_.MergeFrom(from.avo_param_);
  sta_param_.MergeFrom(from.sta_param_);
  if (from._internal_has_basic()) {
    basic_ = new ::agv_map::Point_Basic(*from.basic_);
  } else {
    basic_ = nullptr;
  }
  if (from._internal_has_test_param()) {
    test_param_ = new ::agv_map::Point_Tparam(*from.test_param_);
  } else {
    test_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.Point)
}

void Point::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Point_agv_5fmap_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&basic_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&test_param_) -
      reinterpret_cast<char*>(&basic_)) + sizeof(test_param_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:agv_map.Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete basic_;
  if (this != internal_default_instance()) delete test_param_;
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_agv_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agv_param_.Clear();
  ctl_param_.Clear();
  avo_param_.Clear();
  seg_id_.Clear();
  sta_param_.Clear();
  in_area_.Clear();
  get_add_seg_.Clear();
  put_add_seg_.Clear();
  if (GetArena() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
  if (GetArena() == nullptr && test_param_ != nullptr) {
    delete test_param_;
  }
  test_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agv_map.Point.Basic basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, sint32> agv_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&agv_param_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, sint32> ctl_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&ctl_param_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, sint32> avo_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&avo_param_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 seg_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_seg_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_seg_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .agv_map.Point.Sparam> sta_param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&sta_param_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .agv_map.Point.Tparam test_param = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 in_area = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_in_area(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_in_area(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 get_add_seg = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_get_add_seg(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_get_add_seg(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 put_add_seg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_put_add_seg(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_put_add_seg(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agv_map.Point.Basic basic = 1;
  if (this->has_basic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basic(this), target, stream);
  }

  // map<int32, sint32> agv_param = 2;
  if (!this->_internal_agv_param().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_agv_param().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_agv_param().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_agv_param().begin();
          it != this->_internal_agv_param().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Point_AgvParamEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_agv_param().begin();
          it != this->_internal_agv_param().end(); ++it) {
        target = Point_AgvParamEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, sint32> ctl_param = 3;
  if (!this->_internal_ctl_param().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_ctl_param().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_ctl_param().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_ctl_param().begin();
          it != this->_internal_ctl_param().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Point_CtlParamEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_ctl_param().begin();
          it != this->_internal_ctl_param().end(); ++it) {
        target = Point_CtlParamEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, sint32> avo_param = 4;
  if (!this->_internal_avo_param().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_avo_param().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_avo_param().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_avo_param().begin();
          it != this->_internal_avo_param().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Point_AvoParamEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_avo_param().begin();
          it != this->_internal_avo_param().end(); ++it) {
        target = Point_AvoParamEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  // repeated int32 seg_id = 5;
  {
    int byte_size = _seg_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_seg_id(), byte_size, target);
    }
  }

  // map<int32, .agv_map.Point.Sparam> sta_param = 6;
  if (!this->_internal_sta_param().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point_Sparam >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_sta_param().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_sta_param().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point_Sparam >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point_Sparam >::const_iterator
          it = this->_internal_sta_param().begin();
          it != this->_internal_sta_param().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Point_StaParamEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point_Sparam >::const_iterator
          it = this->_internal_sta_param().begin();
          it != this->_internal_sta_param().end(); ++it) {
        target = Point_StaParamEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
      }
    }
  }

  // .agv_map.Point.Tparam test_param = 7;
  if (this->has_test_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::test_param(this), target, stream);
  }

  // repeated int32 in_area = 8;
  {
    int byte_size = _in_area_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_in_area(), byte_size, target);
    }
  }

  // repeated int32 get_add_seg = 9;
  {
    int byte_size = _get_add_seg_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_get_add_seg(), byte_size, target);
    }
  }

  // repeated int32 put_add_seg = 10;
  {
    int byte_size = _put_add_seg_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_put_add_seg(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, sint32> agv_param = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_agv_param_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_agv_param().begin();
      it != this->_internal_agv_param().end(); ++it) {
    total_size += Point_AgvParamEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, sint32> ctl_param = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ctl_param_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_ctl_param().begin();
      it != this->_internal_ctl_param().end(); ++it) {
    total_size += Point_CtlParamEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, sint32> avo_param = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_avo_param_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_avo_param().begin();
      it != this->_internal_avo_param().end(); ++it) {
    total_size += Point_AvoParamEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated int32 seg_id = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->seg_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _seg_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<int32, .agv_map.Point.Sparam> sta_param = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sta_param_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::Point_Sparam >::const_iterator
      it = this->_internal_sta_param().begin();
      it != this->_internal_sta_param().end(); ++it) {
    total_size += Point_StaParamEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated int32 in_area = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->in_area_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _in_area_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 get_add_seg = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->get_add_seg_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _get_add_seg_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 put_add_seg = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->put_add_seg_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _put_add_seg_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .agv_map.Point.Basic basic = 1;
  if (this->has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basic_);
  }

  // .agv_map.Point.Tparam test_param = 7;
  if (this->has_test_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_map.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_map.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_map.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agv_param_.MergeFrom(from.agv_param_);
  ctl_param_.MergeFrom(from.ctl_param_);
  avo_param_.MergeFrom(from.avo_param_);
  seg_id_.MergeFrom(from.seg_id_);
  sta_param_.MergeFrom(from.sta_param_);
  in_area_.MergeFrom(from.in_area_);
  get_add_seg_.MergeFrom(from.get_add_seg_);
  put_add_seg_.MergeFrom(from.put_add_seg_);
  if (from.has_basic()) {
    _internal_mutable_basic()->::agv_map::Point_Basic::MergeFrom(from._internal_basic());
  }
  if (from.has_test_param()) {
    _internal_mutable_test_param()->::agv_map::Point_Tparam::MergeFrom(from._internal_test_param());
  }
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_map.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agv_param_.Swap(&other->agv_param_);
  ctl_param_.Swap(&other->ctl_param_);
  avo_param_.Swap(&other->avo_param_);
  seg_id_.InternalSwap(&other->seg_id_);
  sta_param_.Swap(&other->sta_param_);
  in_area_.InternalSwap(&other->in_area_);
  get_add_seg_.InternalSwap(&other->get_add_seg_);
  put_add_seg_.InternalSwap(&other->put_add_seg_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, test_param_)
      + sizeof(Point::test_param_)
      - PROTOBUF_FIELD_OFFSET(Point, basic_)>(
          reinterpret_cast<char*>(&basic_),
          reinterpret_cast<char*>(&other->basic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Segment_AgvParamEntry_DoNotUse::Segment_AgvParamEntry_DoNotUse() {}
Segment_AgvParamEntry_DoNotUse::Segment_AgvParamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Segment_AgvParamEntry_DoNotUse::MergeFrom(const Segment_AgvParamEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Segment_AgvParamEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Segment_AgvParamEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Segment_CtlParamEntry_DoNotUse::Segment_CtlParamEntry_DoNotUse() {}
Segment_CtlParamEntry_DoNotUse::Segment_CtlParamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Segment_CtlParamEntry_DoNotUse::MergeFrom(const Segment_CtlParamEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Segment_CtlParamEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Segment_CtlParamEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Segment_AvoParamEntry_DoNotUse::Segment_AvoParamEntry_DoNotUse() {}
Segment_AvoParamEntry_DoNotUse::Segment_AvoParamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Segment_AvoParamEntry_DoNotUse::MergeFrom(const Segment_AvoParamEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Segment_AvoParamEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Segment_AvoParamEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Segment_Basic::_Internal {
 public:
};

Segment_Basic::Segment_Basic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_map.Segment.Basic)
}
Segment_Basic::Segment_Basic(const Segment_Basic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&floor_) -
    reinterpret_cast<char*>(&id_)) + sizeof(floor_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Segment.Basic)
}

void Segment_Basic::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&floor_) -
      reinterpret_cast<char*>(&id_)) + sizeof(floor_));
}

Segment_Basic::~Segment_Basic() {
  // @@protoc_insertion_point(destructor:agv_map.Segment.Basic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Segment_Basic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Segment_Basic::ArenaDtor(void* object) {
  Segment_Basic* _this = reinterpret_cast< Segment_Basic* >(object);
  (void)_this;
}
void Segment_Basic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Segment_Basic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Segment_Basic& Segment_Basic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Segment_Basic_agv_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Segment_Basic::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Segment.Basic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&floor_) -
      reinterpret_cast<char*>(&id_)) + sizeof(floor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Segment_Basic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 start_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 start_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          start_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          end_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 end_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          end_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 end_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          end_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 cen_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          cen_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 cen_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          cen_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 radius = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 seglen = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          seglen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 dir_mode = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          dir_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float start_angle = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          start_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end_angle = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          end_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 agv_type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          agv_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 disable = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          disable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lock = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 floor = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Segment_Basic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Segment.Basic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 start_id = 2;
  if (this->start_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_start_id(), target);
  }

  // sint32 start_x = 3;
  if (this->start_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_start_x(), target);
  }

  // sint32 start_y = 4;
  if (this->start_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_start_y(), target);
  }

  // int32 end_id = 5;
  if (this->end_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_end_id(), target);
  }

  // sint32 end_x = 6;
  if (this->end_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_end_x(), target);
  }

  // sint32 end_y = 7;
  if (this->end_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_end_y(), target);
  }

  // sint32 cen_x = 8;
  if (this->cen_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_cen_x(), target);
  }

  // sint32 cen_y = 9;
  if (this->cen_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(9, this->_internal_cen_y(), target);
  }

  // int32 radius = 10;
  if (this->radius() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_radius(), target);
  }

  // int32 seglen = 11;
  if (this->seglen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_seglen(), target);
  }

  // int32 type = 12;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_type(), target);
  }

  // sint32 dir_mode = 13;
  if (this->dir_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(13, this->_internal_dir_mode(), target);
  }

  // float start_angle = 14;
  if (!(this->start_angle() <= 0 && this->start_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_start_angle(), target);
  }

  // float end_angle = 15;
  if (!(this->end_angle() <= 0 && this->end_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_end_angle(), target);
  }

  // int64 agv_type = 16;
  if (this->agv_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_agv_type(), target);
  }

  // int32 disable = 17;
  if (this->disable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_disable(), target);
  }

  // int32 lock = 18;
  if (this->lock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_lock(), target);
  }

  // sint32 floor = 19;
  if (this->floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(19, this->_internal_floor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Segment.Basic)
  return target;
}

size_t Segment_Basic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Segment.Basic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 start_id = 2;
  if (this->start_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_id());
  }

  // sint32 start_x = 3;
  if (this->start_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_start_x());
  }

  // sint32 start_y = 4;
  if (this->start_y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_start_y());
  }

  // int32 end_id = 5;
  if (this->end_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_id());
  }

  // sint32 end_x = 6;
  if (this->end_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_end_x());
  }

  // sint32 end_y = 7;
  if (this->end_y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_end_y());
  }

  // sint32 cen_x = 8;
  if (this->cen_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_cen_x());
  }

  // sint32 cen_y = 9;
  if (this->cen_y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_cen_y());
  }

  // int32 radius = 10;
  if (this->radius() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_radius());
  }

  // int32 seglen = 11;
  if (this->seglen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seglen());
  }

  // int32 type = 12;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // sint32 dir_mode = 13;
  if (this->dir_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_dir_mode());
  }

  // float start_angle = 14;
  if (!(this->start_angle() <= 0 && this->start_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // int64 agv_type = 16;
  if (this->agv_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_agv_type());
  }

  // float end_angle = 15;
  if (!(this->end_angle() <= 0 && this->end_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 disable = 17;
  if (this->disable() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_disable());
  }

  // int32 lock = 18;
  if (this->lock() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lock());
  }

  // sint32 floor = 19;
  if (this->floor() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_floor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Segment_Basic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_map.Segment.Basic)
  GOOGLE_DCHECK_NE(&from, this);
  const Segment_Basic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Segment_Basic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_map.Segment.Basic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_map.Segment.Basic)
    MergeFrom(*source);
  }
}

void Segment_Basic::MergeFrom(const Segment_Basic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Segment.Basic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.start_id() != 0) {
    _internal_set_start_id(from._internal_start_id());
  }
  if (from.start_x() != 0) {
    _internal_set_start_x(from._internal_start_x());
  }
  if (from.start_y() != 0) {
    _internal_set_start_y(from._internal_start_y());
  }
  if (from.end_id() != 0) {
    _internal_set_end_id(from._internal_end_id());
  }
  if (from.end_x() != 0) {
    _internal_set_end_x(from._internal_end_x());
  }
  if (from.end_y() != 0) {
    _internal_set_end_y(from._internal_end_y());
  }
  if (from.cen_x() != 0) {
    _internal_set_cen_x(from._internal_cen_x());
  }
  if (from.cen_y() != 0) {
    _internal_set_cen_y(from._internal_cen_y());
  }
  if (from.radius() != 0) {
    _internal_set_radius(from._internal_radius());
  }
  if (from.seglen() != 0) {
    _internal_set_seglen(from._internal_seglen());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.dir_mode() != 0) {
    _internal_set_dir_mode(from._internal_dir_mode());
  }
  if (!(from.start_angle() <= 0 && from.start_angle() >= 0)) {
    _internal_set_start_angle(from._internal_start_angle());
  }
  if (from.agv_type() != 0) {
    _internal_set_agv_type(from._internal_agv_type());
  }
  if (!(from.end_angle() <= 0 && from.end_angle() >= 0)) {
    _internal_set_end_angle(from._internal_end_angle());
  }
  if (from.disable() != 0) {
    _internal_set_disable(from._internal_disable());
  }
  if (from.lock() != 0) {
    _internal_set_lock(from._internal_lock());
  }
  if (from.floor() != 0) {
    _internal_set_floor(from._internal_floor());
  }
}

void Segment_Basic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_map.Segment.Basic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment_Basic::CopyFrom(const Segment_Basic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Segment.Basic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment_Basic::IsInitialized() const {
  return true;
}

void Segment_Basic::InternalSwap(Segment_Basic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Segment_Basic, floor_)
      + sizeof(Segment_Basic::floor_)
      - PROTOBUF_FIELD_OFFSET(Segment_Basic, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Segment_Basic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Segment::_Internal {
 public:
  static const ::agv_map::Segment_Basic& basic(const Segment* msg);
};

const ::agv_map::Segment_Basic&
Segment::_Internal::basic(const Segment* msg) {
  return *msg->basic_;
}
Segment::Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agv_param_(arena),
  ctl_param_(arena),
  avo_param_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_map.Segment)
}
Segment::Segment(const Segment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agv_param_.MergeFrom(from.agv_param_);
  ctl_param_.MergeFrom(from.ctl_param_);
  avo_param_.MergeFrom(from.avo_param_);
  if (from._internal_has_basic()) {
    basic_ = new ::agv_map::Segment_Basic(*from.basic_);
  } else {
    basic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.Segment)
}

void Segment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Segment_agv_5fmap_2eproto.base);
  basic_ = nullptr;
}

Segment::~Segment() {
  // @@protoc_insertion_point(destructor:agv_map.Segment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Segment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete basic_;
}

void Segment::ArenaDtor(void* object) {
  Segment* _this = reinterpret_cast< Segment* >(object);
  (void)_this;
}
void Segment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Segment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Segment& Segment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Segment_agv_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Segment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agv_param_.Clear();
  ctl_param_.Clear();
  avo_param_.Clear();
  if (GetArena() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Segment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agv_map.Segment.Basic basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, sint32> agv_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&agv_param_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, sint32> ctl_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&ctl_param_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, sint32> avo_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&avo_param_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Segment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Segment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agv_map.Segment.Basic basic = 1;
  if (this->has_basic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basic(this), target, stream);
  }

  // map<int32, sint32> agv_param = 2;
  if (!this->_internal_agv_param().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_agv_param().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_agv_param().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_agv_param().begin();
          it != this->_internal_agv_param().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Segment_AgvParamEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_agv_param().begin();
          it != this->_internal_agv_param().end(); ++it) {
        target = Segment_AgvParamEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, sint32> ctl_param = 3;
  if (!this->_internal_ctl_param().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_ctl_param().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_ctl_param().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_ctl_param().begin();
          it != this->_internal_ctl_param().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Segment_CtlParamEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_ctl_param().begin();
          it != this->_internal_ctl_param().end(); ++it) {
        target = Segment_CtlParamEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, sint32> avo_param = 4;
  if (!this->_internal_avo_param().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_avo_param().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_avo_param().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_avo_param().begin();
          it != this->_internal_avo_param().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Segment_AvoParamEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_avo_param().begin();
          it != this->_internal_avo_param().end(); ++it) {
        target = Segment_AvoParamEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Segment)
  return target;
}

size_t Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Segment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, sint32> agv_param = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_agv_param_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_agv_param().begin();
      it != this->_internal_agv_param().end(); ++it) {
    total_size += Segment_AgvParamEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, sint32> ctl_param = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ctl_param_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_ctl_param().begin();
      it != this->_internal_ctl_param().end(); ++it) {
    total_size += Segment_CtlParamEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, sint32> avo_param = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_avo_param_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_avo_param().begin();
      it != this->_internal_avo_param().end(); ++it) {
    total_size += Segment_AvoParamEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .agv_map.Segment.Basic basic = 1;
  if (this->has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Segment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_map.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  const Segment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Segment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_map.Segment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_map.Segment)
    MergeFrom(*source);
  }
}

void Segment::MergeFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agv_param_.MergeFrom(from.agv_param_);
  ctl_param_.MergeFrom(from.ctl_param_);
  avo_param_.MergeFrom(from.avo_param_);
  if (from.has_basic()) {
    _internal_mutable_basic()->::agv_map::Segment_Basic::MergeFrom(from._internal_basic());
  }
}

void Segment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_map.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment::CopyFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment::IsInitialized() const {
  return true;
}

void Segment::InternalSwap(Segment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agv_param_.Swap(&other->agv_param_);
  ctl_param_.Swap(&other->ctl_param_);
  avo_param_.Swap(&other->avo_param_);
  swap(basic_, other->basic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Segment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Fpoint_Basic::_Internal {
 public:
};

Fpoint_Basic::Fpoint_Basic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_map.Fpoint.Basic)
}
Fpoint_Basic::Fpoint_Basic(const Fpoint_Basic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Fpoint.Basic)
}

void Fpoint_Basic::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

Fpoint_Basic::~Fpoint_Basic() {
  // @@protoc_insertion_point(destructor:agv_map.Fpoint.Basic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Fpoint_Basic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Fpoint_Basic::ArenaDtor(void* object) {
  Fpoint_Basic* _this = reinterpret_cast< Fpoint_Basic* >(object);
  (void)_this;
}
void Fpoint_Basic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Fpoint_Basic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fpoint_Basic& Fpoint_Basic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fpoint_Basic_agv_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Fpoint_Basic::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Fpoint.Basic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fpoint_Basic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fpoint_Basic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Fpoint.Basic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Fpoint.Basic)
  return target;
}

size_t Fpoint_Basic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Fpoint.Basic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fpoint_Basic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_map.Fpoint.Basic)
  GOOGLE_DCHECK_NE(&from, this);
  const Fpoint_Basic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fpoint_Basic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_map.Fpoint.Basic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_map.Fpoint.Basic)
    MergeFrom(*source);
  }
}

void Fpoint_Basic::MergeFrom(const Fpoint_Basic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Fpoint.Basic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Fpoint_Basic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_map.Fpoint.Basic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fpoint_Basic::CopyFrom(const Fpoint_Basic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Fpoint.Basic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fpoint_Basic::IsInitialized() const {
  return true;
}

void Fpoint_Basic::InternalSwap(Fpoint_Basic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fpoint_Basic, type_)
      + sizeof(Fpoint_Basic::type_)
      - PROTOBUF_FIELD_OFFSET(Fpoint_Basic, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fpoint_Basic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Fpoint::_Internal {
 public:
  static const ::agv_map::Fpoint_Basic& basic(const Fpoint* msg);
};

const ::agv_map::Fpoint_Basic&
Fpoint::_Internal::basic(const Fpoint* msg) {
  return *msg->basic_;
}
Fpoint::Fpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  param_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_map.Fpoint)
}
Fpoint::Fpoint(const Fpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      param_(from.param_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_basic()) {
    basic_ = new ::agv_map::Fpoint_Basic(*from.basic_);
  } else {
    basic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.Fpoint)
}

void Fpoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fpoint_agv_5fmap_2eproto.base);
  basic_ = nullptr;
}

Fpoint::~Fpoint() {
  // @@protoc_insertion_point(destructor:agv_map.Fpoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Fpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete basic_;
}

void Fpoint::ArenaDtor(void* object) {
  Fpoint* _this = reinterpret_cast< Fpoint* >(object);
  (void)_this;
}
void Fpoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Fpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fpoint& Fpoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fpoint_agv_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Fpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Fpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_.Clear();
  if (GetArena() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fpoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agv_map.Fpoint.Basic basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .agv_map.Param param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fpoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Fpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agv_map.Fpoint.Basic basic = 1;
  if (this->has_basic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basic(this), target, stream);
  }

  // repeated .agv_map.Param param = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_param_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_param(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Fpoint)
  return target;
}

size_t Fpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Fpoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agv_map.Param param = 2;
  total_size += 1UL * this->_internal_param_size();
  for (const auto& msg : this->param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .agv_map.Fpoint.Basic basic = 1;
  if (this->has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fpoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_map.Fpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Fpoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fpoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_map.Fpoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_map.Fpoint)
    MergeFrom(*source);
  }
}

void Fpoint::MergeFrom(const Fpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Fpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_.MergeFrom(from.param_);
  if (from.has_basic()) {
    _internal_mutable_basic()->::agv_map::Fpoint_Basic::MergeFrom(from._internal_basic());
  }
}

void Fpoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_map.Fpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fpoint::CopyFrom(const Fpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Fpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fpoint::IsInitialized() const {
  return true;
}

void Fpoint::InternalSwap(Fpoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  param_.InternalSwap(&other->param_);
  swap(basic_, other->basic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Fpoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Area_ParamEntry_DoNotUse::Area_ParamEntry_DoNotUse() {}
Area_ParamEntry_DoNotUse::Area_ParamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Area_ParamEntry_DoNotUse::MergeFrom(const Area_ParamEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Area_ParamEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Area_ParamEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Area_AgvNumEntry_DoNotUse::Area_AgvNumEntry_DoNotUse() {}
Area_AgvNumEntry_DoNotUse::Area_AgvNumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Area_AgvNumEntry_DoNotUse::MergeFrom(const Area_AgvNumEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Area_AgvNumEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Area_AgvNumEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Area_TypeNumEntry_DoNotUse::Area_TypeNumEntry_DoNotUse() {}
Area_TypeNumEntry_DoNotUse::Area_TypeNumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Area_TypeNumEntry_DoNotUse::MergeFrom(const Area_TypeNumEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Area_TypeNumEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Area_TypeNumEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Area_Basic::_Internal {
 public:
};

Area_Basic::Area_Basic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_map.Area.Basic)
}
Area_Basic::Area_Basic(const Area_Basic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Area.Basic)
}

void Area_Basic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Area_Basic_agv_5fmap_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

Area_Basic::~Area_Basic() {
  // @@protoc_insertion_point(destructor:agv_map.Area.Basic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Area_Basic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Area_Basic::ArenaDtor(void* object) {
  Area_Basic* _this = reinterpret_cast< Area_Basic* >(object);
  (void)_this;
}
void Area_Basic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Area_Basic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Area_Basic& Area_Basic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Area_Basic_agv_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Area_Basic::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Area.Basic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Area_Basic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agv_map.Area.Basic.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Area_Basic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Area.Basic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.Area.Basic.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Area.Basic)
  return target;
}

size_t Area_Basic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Area.Basic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Area_Basic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_map.Area.Basic)
  GOOGLE_DCHECK_NE(&from, this);
  const Area_Basic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Area_Basic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_map.Area.Basic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_map.Area.Basic)
    MergeFrom(*source);
  }
}

void Area_Basic::MergeFrom(const Area_Basic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Area.Basic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Area_Basic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_map.Area.Basic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Area_Basic::CopyFrom(const Area_Basic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Area.Basic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Area_Basic::IsInitialized() const {
  return true;
}

void Area_Basic::InternalSwap(Area_Basic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Area_Basic, type_)
      + sizeof(Area_Basic::type_)
      - PROTOBUF_FIELD_OFFSET(Area_Basic, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Area_Basic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Area_Coord::_Internal {
 public:
};

Area_Coord::Area_Coord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_map.Area.Coord)
}
Area_Coord::Area_Coord(const Area_Coord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Area.Coord)
}

void Area_Coord::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Area_Coord::~Area_Coord() {
  // @@protoc_insertion_point(destructor:agv_map.Area.Coord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Area_Coord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Area_Coord::ArenaDtor(void* object) {
  Area_Coord* _this = reinterpret_cast< Area_Coord* >(object);
  (void)_this;
}
void Area_Coord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Area_Coord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Area_Coord& Area_Coord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Area_Coord_agv_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Area_Coord::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Area.Coord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Area_Coord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Area_Coord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Area.Coord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_x(), target);
  }

  // sint32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Area.Coord)
  return target;
}

size_t Area_Coord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Area.Coord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_x());
  }

  // sint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Area_Coord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_map.Area.Coord)
  GOOGLE_DCHECK_NE(&from, this);
  const Area_Coord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Area_Coord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_map.Area.Coord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_map.Area.Coord)
    MergeFrom(*source);
  }
}

void Area_Coord::MergeFrom(const Area_Coord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Area.Coord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
}

void Area_Coord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_map.Area.Coord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Area_Coord::CopyFrom(const Area_Coord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Area.Coord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Area_Coord::IsInitialized() const {
  return true;
}

void Area_Coord::InternalSwap(Area_Coord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Area_Coord, y_)
      + sizeof(Area_Coord::y_)
      - PROTOBUF_FIELD_OFFSET(Area_Coord, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Area_Coord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Area::_Internal {
 public:
  static const ::agv_map::Area_Basic& basic(const Area* msg);
};

const ::agv_map::Area_Basic&
Area::_Internal::basic(const Area* msg) {
  return *msg->basic_;
}
Area::Area(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  param_(arena),
  coord_(arena),
  point_in_(arena),
  agv_num_(arena),
  relate_area_(arena),
  type_num_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_map.Area)
}
Area::Area(const Area& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      coord_(from.coord_),
      point_in_(from.point_in_),
      relate_area_(from.relate_area_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  param_.MergeFrom(from.param_);
  agv_num_.MergeFrom(from.agv_num_);
  type_num_.MergeFrom(from.type_num_);
  if (from._internal_has_basic()) {
    basic_ = new ::agv_map::Area_Basic(*from.basic_);
  } else {
    basic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.Area)
}

void Area::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Area_agv_5fmap_2eproto.base);
  basic_ = nullptr;
}

Area::~Area() {
  // @@protoc_insertion_point(destructor:agv_map.Area)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Area::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete basic_;
}

void Area::ArenaDtor(void* object) {
  Area* _this = reinterpret_cast< Area* >(object);
  (void)_this;
}
void Area::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Area::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Area& Area::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Area_agv_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Area::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Area)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_.Clear();
  coord_.Clear();
  point_in_.Clear();
  agv_num_.Clear();
  relate_area_.Clear();
  type_num_.Clear();
  if (GetArena() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Area::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agv_map.Area.Basic basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, sint32> param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&param_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .agv_map.Area.Coord coord = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coord(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 point_in = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_point_in(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_point_in(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, int32> agv_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&agv_num_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 relate_area = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_relate_area(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_relate_area(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, int32> type_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&type_num_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Area::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Area)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agv_map.Area.Basic basic = 1;
  if (this->has_basic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basic(this), target, stream);
  }

  // map<int32, sint32> param = 2;
  if (!this->_internal_param().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_param().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_param().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_param().begin();
          it != this->_internal_param().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Area_ParamEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_param().begin();
          it != this->_internal_param().end(); ++it) {
        target = Area_ParamEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // repeated .agv_map.Area.Coord coord = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_coord_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_coord(i), target, stream);
  }

  // repeated int32 point_in = 4;
  {
    int byte_size = _point_in_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_point_in(), byte_size, target);
    }
  }

  // map<int32, int32> agv_num = 5;
  if (!this->_internal_agv_num().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_agv_num().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_agv_num().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_agv_num().begin();
          it != this->_internal_agv_num().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Area_AgvNumEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_agv_num().begin();
          it != this->_internal_agv_num().end(); ++it) {
        target = Area_AgvNumEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
      }
    }
  }

  // repeated int32 relate_area = 6;
  {
    int byte_size = _relate_area_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_relate_area(), byte_size, target);
    }
  }

  // map<int32, int32> type_num = 7;
  if (!this->_internal_type_num().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_type_num().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_type_num().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_type_num().begin();
          it != this->_internal_type_num().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Area_TypeNumEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_type_num().begin();
          it != this->_internal_type_num().end(); ++it) {
        target = Area_TypeNumEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Area)
  return target;
}

size_t Area::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Area)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, sint32> param = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_param_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_param().begin();
      it != this->_internal_param().end(); ++it) {
    total_size += Area_ParamEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .agv_map.Area.Coord coord = 3;
  total_size += 1UL * this->_internal_coord_size();
  for (const auto& msg : this->coord_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 point_in = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->point_in_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _point_in_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<int32, int32> agv_num = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_agv_num_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_agv_num().begin();
      it != this->_internal_agv_num().end(); ++it) {
    total_size += Area_AgvNumEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated int32 relate_area = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->relate_area_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _relate_area_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<int32, int32> type_num = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_type_num_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_type_num().begin();
      it != this->_internal_type_num().end(); ++it) {
    total_size += Area_TypeNumEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .agv_map.Area.Basic basic = 1;
  if (this->has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Area::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_map.Area)
  GOOGLE_DCHECK_NE(&from, this);
  const Area* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Area>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_map.Area)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_map.Area)
    MergeFrom(*source);
  }
}

void Area::MergeFrom(const Area& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Area)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_.MergeFrom(from.param_);
  coord_.MergeFrom(from.coord_);
  point_in_.MergeFrom(from.point_in_);
  agv_num_.MergeFrom(from.agv_num_);
  relate_area_.MergeFrom(from.relate_area_);
  type_num_.MergeFrom(from.type_num_);
  if (from.has_basic()) {
    _internal_mutable_basic()->::agv_map::Area_Basic::MergeFrom(from._internal_basic());
  }
}

void Area::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_map.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Area::CopyFrom(const Area& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Area::IsInitialized() const {
  return true;
}

void Area::InternalSwap(Area* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  param_.Swap(&other->param_);
  coord_.InternalSwap(&other->coord_);
  point_in_.InternalSwap(&other->point_in_);
  agv_num_.Swap(&other->agv_num_);
  relate_area_.InternalSwap(&other->relate_area_);
  type_num_.Swap(&other->type_num_);
  swap(basic_, other->basic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Area::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Param::_Internal {
 public:
};

Param::Param(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_map.Param)
}
Param::Param(const Param& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:agv_map.Param)
}

void Param::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

Param::~Param() {
  // @@protoc_insertion_point(destructor:agv_map.Param)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Param::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Param::ArenaDtor(void* object) {
  Param* _this = reinterpret_cast< Param* >(object);
  (void)_this;
}
void Param::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Param::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Param& Param::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Param_agv_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Param::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Param::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Param::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_key(), target);
  }

  // sint32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Param)
  return target;
}

size_t Param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Param)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_key());
  }

  // sint32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Param::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_map.Param)
  GOOGLE_DCHECK_NE(&from, this);
  const Param* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Param>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_map.Param)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_map.Param)
    MergeFrom(*source);
  }
}

void Param::MergeFrom(const Param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Param)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Param::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_map.Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Param::CopyFrom(const Param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Param::IsInitialized() const {
  return true;
}

void Param::InternalSwap(Param* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Param, value_)
      + sizeof(Param::value_)
      - PROTOBUF_FIELD_OFFSET(Param, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Param::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Describe_PointAgvDescEntry_DoNotUse::Describe_PointAgvDescEntry_DoNotUse() {}
Describe_PointAgvDescEntry_DoNotUse::Describe_PointAgvDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_PointAgvDescEntry_DoNotUse::MergeFrom(const Describe_PointAgvDescEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_PointAgvDescEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Describe_PointAgvDescEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Describe_PointCtlDescEntry_DoNotUse::Describe_PointCtlDescEntry_DoNotUse() {}
Describe_PointCtlDescEntry_DoNotUse::Describe_PointCtlDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_PointCtlDescEntry_DoNotUse::MergeFrom(const Describe_PointCtlDescEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_PointCtlDescEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Describe_PointCtlDescEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Describe_PointAvoDescEntry_DoNotUse::Describe_PointAvoDescEntry_DoNotUse() {}
Describe_PointAvoDescEntry_DoNotUse::Describe_PointAvoDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_PointAvoDescEntry_DoNotUse::MergeFrom(const Describe_PointAvoDescEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_PointAvoDescEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Describe_PointAvoDescEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Describe_SegAgvDescEntry_DoNotUse::Describe_SegAgvDescEntry_DoNotUse() {}
Describe_SegAgvDescEntry_DoNotUse::Describe_SegAgvDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_SegAgvDescEntry_DoNotUse::MergeFrom(const Describe_SegAgvDescEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_SegAgvDescEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Describe_SegAgvDescEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Describe_SegCtlDescEntry_DoNotUse::Describe_SegCtlDescEntry_DoNotUse() {}
Describe_SegCtlDescEntry_DoNotUse::Describe_SegCtlDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_SegCtlDescEntry_DoNotUse::MergeFrom(const Describe_SegCtlDescEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_SegCtlDescEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Describe_SegCtlDescEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Describe_SegAvoDescEntry_DoNotUse::Describe_SegAvoDescEntry_DoNotUse() {}
Describe_SegAvoDescEntry_DoNotUse::Describe_SegAvoDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_SegAvoDescEntry_DoNotUse::MergeFrom(const Describe_SegAvoDescEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_SegAvoDescEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Describe_SegAvoDescEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Describe_FpointDescEntry_DoNotUse::Describe_FpointDescEntry_DoNotUse() {}
Describe_FpointDescEntry_DoNotUse::Describe_FpointDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_FpointDescEntry_DoNotUse::MergeFrom(const Describe_FpointDescEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_FpointDescEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Describe_FpointDescEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Describe_AreaDescEntry_DoNotUse::Describe_AreaDescEntry_DoNotUse() {}
Describe_AreaDescEntry_DoNotUse::Describe_AreaDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_AreaDescEntry_DoNotUse::MergeFrom(const Describe_AreaDescEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_AreaDescEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Describe_AreaDescEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Describe_CargoAreaDescEntry_DoNotUse::Describe_CargoAreaDescEntry_DoNotUse() {}
Describe_CargoAreaDescEntry_DoNotUse::Describe_CargoAreaDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Describe_CargoAreaDescEntry_DoNotUse::MergeFrom(const Describe_CargoAreaDescEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Describe_CargoAreaDescEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Describe_CargoAreaDescEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Describe::_Internal {
 public:
};

Describe::Describe(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  point_agv_desc_(arena),
  point_ctl_desc_(arena),
  point_avo_desc_(arena),
  seg_agv_desc_(arena),
  seg_ctl_desc_(arena),
  seg_avo_desc_(arena),
  fpoint_desc_(arena),
  area_desc_(arena),
  cargo_area_desc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_map.Describe)
}
Describe::Describe(const Describe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  point_agv_desc_.MergeFrom(from.point_agv_desc_);
  point_ctl_desc_.MergeFrom(from.point_ctl_desc_);
  point_avo_desc_.MergeFrom(from.point_avo_desc_);
  seg_agv_desc_.MergeFrom(from.seg_agv_desc_);
  seg_ctl_desc_.MergeFrom(from.seg_ctl_desc_);
  seg_avo_desc_.MergeFrom(from.seg_avo_desc_);
  fpoint_desc_.MergeFrom(from.fpoint_desc_);
  area_desc_.MergeFrom(from.area_desc_);
  cargo_area_desc_.MergeFrom(from.cargo_area_desc_);
  // @@protoc_insertion_point(copy_constructor:agv_map.Describe)
}

void Describe::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Describe_agv_5fmap_2eproto.base);
}

Describe::~Describe() {
  // @@protoc_insertion_point(destructor:agv_map.Describe)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Describe::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Describe::ArenaDtor(void* object) {
  Describe* _this = reinterpret_cast< Describe* >(object);
  (void)_this;
}
void Describe::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Describe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Describe& Describe::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Describe_agv_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Describe::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Describe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_agv_desc_.Clear();
  point_ctl_desc_.Clear();
  point_avo_desc_.Clear();
  seg_agv_desc_.Clear();
  seg_ctl_desc_.Clear();
  seg_avo_desc_.Clear();
  fpoint_desc_.Clear();
  area_desc_.Clear();
  cargo_area_desc_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Describe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, string> point_agv_desc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&point_agv_desc_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, string> point_ctl_desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&point_ctl_desc_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, string> point_avo_desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&point_avo_desc_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, string> seg_agv_desc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&seg_agv_desc_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, string> seg_ctl_desc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&seg_ctl_desc_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, string> seg_avo_desc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&seg_avo_desc_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, string> fpoint_desc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&fpoint_desc_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .agv_map.AreaDesc> area_desc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&area_desc_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, string> cargo_area_desc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&cargo_area_desc_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Describe::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Describe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, string> point_agv_desc = 1;
  if (!this->_internal_point_agv_desc().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "agv_map.Describe.PointAgvDescEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_point_agv_desc().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_point_agv_desc().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_point_agv_desc().begin();
          it != this->_internal_point_agv_desc().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Describe_PointAgvDescEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_point_agv_desc().begin();
          it != this->_internal_point_agv_desc().end(); ++it) {
        target = Describe_PointAgvDescEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<int32, string> point_ctl_desc = 2;
  if (!this->_internal_point_ctl_desc().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "agv_map.Describe.PointCtlDescEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_point_ctl_desc().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_point_ctl_desc().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_point_ctl_desc().begin();
          it != this->_internal_point_ctl_desc().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Describe_PointCtlDescEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_point_ctl_desc().begin();
          it != this->_internal_point_ctl_desc().end(); ++it) {
        target = Describe_PointCtlDescEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<int32, string> point_avo_desc = 3;
  if (!this->_internal_point_avo_desc().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "agv_map.Describe.PointAvoDescEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_point_avo_desc().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_point_avo_desc().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_point_avo_desc().begin();
          it != this->_internal_point_avo_desc().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Describe_PointAvoDescEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_point_avo_desc().begin();
          it != this->_internal_point_avo_desc().end(); ++it) {
        target = Describe_PointAvoDescEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<int32, string> seg_agv_desc = 4;
  if (!this->_internal_seg_agv_desc().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "agv_map.Describe.SegAgvDescEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_seg_agv_desc().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_seg_agv_desc().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_seg_agv_desc().begin();
          it != this->_internal_seg_agv_desc().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Describe_SegAgvDescEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_seg_agv_desc().begin();
          it != this->_internal_seg_agv_desc().end(); ++it) {
        target = Describe_SegAgvDescEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<int32, string> seg_ctl_desc = 5;
  if (!this->_internal_seg_ctl_desc().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "agv_map.Describe.SegCtlDescEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_seg_ctl_desc().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_seg_ctl_desc().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_seg_ctl_desc().begin();
          it != this->_internal_seg_ctl_desc().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Describe_SegCtlDescEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_seg_ctl_desc().begin();
          it != this->_internal_seg_ctl_desc().end(); ++it) {
        target = Describe_SegCtlDescEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<int32, string> seg_avo_desc = 6;
  if (!this->_internal_seg_avo_desc().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "agv_map.Describe.SegAvoDescEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_seg_avo_desc().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_seg_avo_desc().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_seg_avo_desc().begin();
          it != this->_internal_seg_avo_desc().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Describe_SegAvoDescEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_seg_avo_desc().begin();
          it != this->_internal_seg_avo_desc().end(); ++it) {
        target = Describe_SegAvoDescEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<int32, string> fpoint_desc = 7;
  if (!this->_internal_fpoint_desc().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "agv_map.Describe.FpointDescEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_fpoint_desc().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_fpoint_desc().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_fpoint_desc().begin();
          it != this->_internal_fpoint_desc().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Describe_FpointDescEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_fpoint_desc().begin();
          it != this->_internal_fpoint_desc().end(); ++it) {
        target = Describe_FpointDescEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<int32, .agv_map.AreaDesc> area_desc = 8;
  if (!this->_internal_area_desc().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::AreaDesc >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_area_desc().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_area_desc().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::AreaDesc >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::AreaDesc >::const_iterator
          it = this->_internal_area_desc().begin();
          it != this->_internal_area_desc().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Describe_AreaDescEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::AreaDesc >::const_iterator
          it = this->_internal_area_desc().begin();
          it != this->_internal_area_desc().end(); ++it) {
        target = Describe_AreaDescEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, string> cargo_area_desc = 9;
  if (!this->_internal_cargo_area_desc().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "agv_map.Describe.CargoAreaDescEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_cargo_area_desc().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_cargo_area_desc().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_cargo_area_desc().begin();
          it != this->_internal_cargo_area_desc().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Describe_CargoAreaDescEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_cargo_area_desc().begin();
          it != this->_internal_cargo_area_desc().end(); ++it) {
        target = Describe_CargoAreaDescEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Describe)
  return target;
}

size_t Describe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Describe)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, string> point_agv_desc = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_point_agv_desc_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->_internal_point_agv_desc().begin();
      it != this->_internal_point_agv_desc().end(); ++it) {
    total_size += Describe_PointAgvDescEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, string> point_ctl_desc = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_point_ctl_desc_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->_internal_point_ctl_desc().begin();
      it != this->_internal_point_ctl_desc().end(); ++it) {
    total_size += Describe_PointCtlDescEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, string> point_avo_desc = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_point_avo_desc_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->_internal_point_avo_desc().begin();
      it != this->_internal_point_avo_desc().end(); ++it) {
    total_size += Describe_PointAvoDescEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, string> seg_agv_desc = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_seg_agv_desc_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->_internal_seg_agv_desc().begin();
      it != this->_internal_seg_agv_desc().end(); ++it) {
    total_size += Describe_SegAgvDescEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, string> seg_ctl_desc = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_seg_ctl_desc_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->_internal_seg_ctl_desc().begin();
      it != this->_internal_seg_ctl_desc().end(); ++it) {
    total_size += Describe_SegCtlDescEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, string> seg_avo_desc = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_seg_avo_desc_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->_internal_seg_avo_desc().begin();
      it != this->_internal_seg_avo_desc().end(); ++it) {
    total_size += Describe_SegAvoDescEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, string> fpoint_desc = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fpoint_desc_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->_internal_fpoint_desc().begin();
      it != this->_internal_fpoint_desc().end(); ++it) {
    total_size += Describe_FpointDescEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .agv_map.AreaDesc> area_desc = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_area_desc_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::agv_map::AreaDesc >::const_iterator
      it = this->_internal_area_desc().begin();
      it != this->_internal_area_desc().end(); ++it) {
    total_size += Describe_AreaDescEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, string> cargo_area_desc = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cargo_area_desc_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->_internal_cargo_area_desc().begin();
      it != this->_internal_cargo_area_desc().end(); ++it) {
    total_size += Describe_CargoAreaDescEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Describe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_map.Describe)
  GOOGLE_DCHECK_NE(&from, this);
  const Describe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Describe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_map.Describe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_map.Describe)
    MergeFrom(*source);
  }
}

void Describe::MergeFrom(const Describe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Describe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_agv_desc_.MergeFrom(from.point_agv_desc_);
  point_ctl_desc_.MergeFrom(from.point_ctl_desc_);
  point_avo_desc_.MergeFrom(from.point_avo_desc_);
  seg_agv_desc_.MergeFrom(from.seg_agv_desc_);
  seg_ctl_desc_.MergeFrom(from.seg_ctl_desc_);
  seg_avo_desc_.MergeFrom(from.seg_avo_desc_);
  fpoint_desc_.MergeFrom(from.fpoint_desc_);
  area_desc_.MergeFrom(from.area_desc_);
  cargo_area_desc_.MergeFrom(from.cargo_area_desc_);
}

void Describe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_map.Describe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Describe::CopyFrom(const Describe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Describe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Describe::IsInitialized() const {
  return true;
}

void Describe::InternalSwap(Describe* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  point_agv_desc_.Swap(&other->point_agv_desc_);
  point_ctl_desc_.Swap(&other->point_ctl_desc_);
  point_avo_desc_.Swap(&other->point_avo_desc_);
  seg_agv_desc_.Swap(&other->seg_agv_desc_);
  seg_ctl_desc_.Swap(&other->seg_ctl_desc_);
  seg_avo_desc_.Swap(&other->seg_avo_desc_);
  fpoint_desc_.Swap(&other->fpoint_desc_);
  area_desc_.Swap(&other->area_desc_);
  cargo_area_desc_.Swap(&other->cargo_area_desc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Describe::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AreaDesc_DescEntry_DoNotUse::AreaDesc_DescEntry_DoNotUse() {}
AreaDesc_DescEntry_DoNotUse::AreaDesc_DescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AreaDesc_DescEntry_DoNotUse::MergeFrom(const AreaDesc_DescEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AreaDesc_DescEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AreaDesc_DescEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class AreaDesc::_Internal {
 public:
};

AreaDesc::AreaDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  desc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_map.AreaDesc)
}
AreaDesc::AreaDesc(const AreaDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  desc_.MergeFrom(from.desc_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.AreaDesc)
}

void AreaDesc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AreaDesc_agv_5fmap_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AreaDesc::~AreaDesc() {
  // @@protoc_insertion_point(destructor:agv_map.AreaDesc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AreaDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AreaDesc::ArenaDtor(void* object) {
  AreaDesc* _this = reinterpret_cast< AreaDesc* >(object);
  (void)_this;
}
void AreaDesc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AreaDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AreaDesc& AreaDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AreaDesc_agv_5fmap_2eproto.base);
  return *internal_default_instance();
}


void AreaDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.AreaDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  desc_.Clear();
  type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AreaDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agv_map.AreaDesc.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, string> desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&desc_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AreaDesc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.AreaDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_map.AreaDesc.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // map<int32, string> desc = 2;
  if (!this->_internal_desc().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "agv_map.AreaDesc.DescEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_desc().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_desc().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_desc().begin();
          it != this->_internal_desc().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AreaDesc_DescEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_desc().begin();
          it != this->_internal_desc().end(); ++it) {
        target = AreaDesc_DescEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.AreaDesc)
  return target;
}

size_t AreaDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.AreaDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, string> desc = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_desc_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->_internal_desc().begin();
      it != this->_internal_desc().end(); ++it) {
    total_size += AreaDesc_DescEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AreaDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_map.AreaDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const AreaDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AreaDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_map.AreaDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_map.AreaDesc)
    MergeFrom(*source);
  }
}

void AreaDesc::MergeFrom(const AreaDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_map.AreaDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  desc_.MergeFrom(from.desc_);
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
}

void AreaDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_map.AreaDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AreaDesc::CopyFrom(const AreaDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.AreaDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreaDesc::IsInitialized() const {
  return true;
}

void AreaDesc::InternalSwap(AreaDesc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  desc_.Swap(&other->desc_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AreaDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Store_offset::_Internal {
 public:
  static const ::agv_map::store_offset_by_layer& layer1(const Store_offset* msg);
  static const ::agv_map::store_offset_by_layer& layer2(const Store_offset* msg);
  static const ::agv_map::store_offset_by_layer& layer3(const Store_offset* msg);
  static const ::agv_map::store_offset_by_layer& layer4(const Store_offset* msg);
};

const ::agv_map::store_offset_by_layer&
Store_offset::_Internal::layer1(const Store_offset* msg) {
  return *msg->layer1_;
}
const ::agv_map::store_offset_by_layer&
Store_offset::_Internal::layer2(const Store_offset* msg) {
  return *msg->layer2_;
}
const ::agv_map::store_offset_by_layer&
Store_offset::_Internal::layer3(const Store_offset* msg) {
  return *msg->layer3_;
}
const ::agv_map::store_offset_by_layer&
Store_offset::_Internal::layer4(const Store_offset* msg) {
  return *msg->layer4_;
}
Store_offset::Store_offset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_map.Store_offset)
}
Store_offset::Store_offset(const Store_offset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_layer1()) {
    layer1_ = new ::agv_map::store_offset_by_layer(*from.layer1_);
  } else {
    layer1_ = nullptr;
  }
  if (from._internal_has_layer2()) {
    layer2_ = new ::agv_map::store_offset_by_layer(*from.layer2_);
  } else {
    layer2_ = nullptr;
  }
  if (from._internal_has_layer3()) {
    layer3_ = new ::agv_map::store_offset_by_layer(*from.layer3_);
  } else {
    layer3_ = nullptr;
  }
  if (from._internal_has_layer4()) {
    layer4_ = new ::agv_map::store_offset_by_layer(*from.layer4_);
  } else {
    layer4_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agv_map.Store_offset)
}

void Store_offset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Store_offset_agv_5fmap_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&layer1_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&layer4_) -
      reinterpret_cast<char*>(&layer1_)) + sizeof(layer4_));
}

Store_offset::~Store_offset() {
  // @@protoc_insertion_point(destructor:agv_map.Store_offset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Store_offset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete layer1_;
  if (this != internal_default_instance()) delete layer2_;
  if (this != internal_default_instance()) delete layer3_;
  if (this != internal_default_instance()) delete layer4_;
}

void Store_offset::ArenaDtor(void* object) {
  Store_offset* _this = reinterpret_cast< Store_offset* >(object);
  (void)_this;
}
void Store_offset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Store_offset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Store_offset& Store_offset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Store_offset_agv_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Store_offset::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.Store_offset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && layer1_ != nullptr) {
    delete layer1_;
  }
  layer1_ = nullptr;
  if (GetArena() == nullptr && layer2_ != nullptr) {
    delete layer2_;
  }
  layer2_ = nullptr;
  if (GetArena() == nullptr && layer3_ != nullptr) {
    delete layer3_;
  }
  layer3_ = nullptr;
  if (GetArena() == nullptr && layer4_ != nullptr) {
    delete layer4_;
  }
  layer4_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Store_offset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agv_map.store_offset_by_layer layer1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agv_map.store_offset_by_layer layer2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agv_map.store_offset_by_layer layer3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agv_map.store_offset_by_layer layer4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Store_offset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.Store_offset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agv_map.store_offset_by_layer layer1 = 1;
  if (this->has_layer1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::layer1(this), target, stream);
  }

  // .agv_map.store_offset_by_layer layer2 = 2;
  if (this->has_layer2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::layer2(this), target, stream);
  }

  // .agv_map.store_offset_by_layer layer3 = 3;
  if (this->has_layer3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::layer3(this), target, stream);
  }

  // .agv_map.store_offset_by_layer layer4 = 4;
  if (this->has_layer4()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::layer4(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.Store_offset)
  return target;
}

size_t Store_offset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.Store_offset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .agv_map.store_offset_by_layer layer1 = 1;
  if (this->has_layer1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *layer1_);
  }

  // .agv_map.store_offset_by_layer layer2 = 2;
  if (this->has_layer2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *layer2_);
  }

  // .agv_map.store_offset_by_layer layer3 = 3;
  if (this->has_layer3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *layer3_);
  }

  // .agv_map.store_offset_by_layer layer4 = 4;
  if (this->has_layer4()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *layer4_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Store_offset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_map.Store_offset)
  GOOGLE_DCHECK_NE(&from, this);
  const Store_offset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Store_offset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_map.Store_offset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_map.Store_offset)
    MergeFrom(*source);
  }
}

void Store_offset::MergeFrom(const Store_offset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_map.Store_offset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_layer1()) {
    _internal_mutable_layer1()->::agv_map::store_offset_by_layer::MergeFrom(from._internal_layer1());
  }
  if (from.has_layer2()) {
    _internal_mutable_layer2()->::agv_map::store_offset_by_layer::MergeFrom(from._internal_layer2());
  }
  if (from.has_layer3()) {
    _internal_mutable_layer3()->::agv_map::store_offset_by_layer::MergeFrom(from._internal_layer3());
  }
  if (from.has_layer4()) {
    _internal_mutable_layer4()->::agv_map::store_offset_by_layer::MergeFrom(from._internal_layer4());
  }
}

void Store_offset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_map.Store_offset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Store_offset::CopyFrom(const Store_offset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.Store_offset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Store_offset::IsInitialized() const {
  return true;
}

void Store_offset::InternalSwap(Store_offset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Store_offset, layer4_)
      + sizeof(Store_offset::layer4_)
      - PROTOBUF_FIELD_OFFSET(Store_offset, layer1_)>(
          reinterpret_cast<char*>(&layer1_),
          reinterpret_cast<char*>(&other->layer1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Store_offset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class store_offset_by_layer::_Internal {
 public:
};

store_offset_by_layer::store_offset_by_layer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_map.store_offset_by_layer)
}
store_offset_by_layer::store_offset_by_layer(const store_offset_by_layer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&high_, &from.high_,
    static_cast<size_t>(reinterpret_cast<char*>(&fork_high_offset_) -
    reinterpret_cast<char*>(&high_)) + sizeof(fork_high_offset_));
  // @@protoc_insertion_point(copy_constructor:agv_map.store_offset_by_layer)
}

void store_offset_by_layer::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&high_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fork_high_offset_) -
      reinterpret_cast<char*>(&high_)) + sizeof(fork_high_offset_));
}

store_offset_by_layer::~store_offset_by_layer() {
  // @@protoc_insertion_point(destructor:agv_map.store_offset_by_layer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void store_offset_by_layer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void store_offset_by_layer::ArenaDtor(void* object) {
  store_offset_by_layer* _this = reinterpret_cast< store_offset_by_layer* >(object);
  (void)_this;
}
void store_offset_by_layer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void store_offset_by_layer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const store_offset_by_layer& store_offset_by_layer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_store_offset_by_layer_agv_5fmap_2eproto.base);
  return *internal_default_instance();
}


void store_offset_by_layer::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_map.store_offset_by_layer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&high_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fork_high_offset_) -
      reinterpret_cast<char*>(&high_)) + sizeof(fork_high_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* store_offset_by_layer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float high = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float horizontal_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          horizontal_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vertical_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          vertical_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fork_high_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          fork_high_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* store_offset_by_layer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_map.store_offset_by_layer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float high = 1;
  if (!(this->high() <= 0 && this->high() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_high(), target);
  }

  // float horizontal_offset = 2;
  if (!(this->horizontal_offset() <= 0 && this->horizontal_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_horizontal_offset(), target);
  }

  // float vertical_offset = 3;
  if (!(this->vertical_offset() <= 0 && this->vertical_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_vertical_offset(), target);
  }

  // float fork_high_offset = 4;
  if (!(this->fork_high_offset() <= 0 && this->fork_high_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_fork_high_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_map.store_offset_by_layer)
  return target;
}

size_t store_offset_by_layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_map.store_offset_by_layer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float high = 1;
  if (!(this->high() <= 0 && this->high() >= 0)) {
    total_size += 1 + 4;
  }

  // float horizontal_offset = 2;
  if (!(this->horizontal_offset() <= 0 && this->horizontal_offset() >= 0)) {
    total_size += 1 + 4;
  }

  // float vertical_offset = 3;
  if (!(this->vertical_offset() <= 0 && this->vertical_offset() >= 0)) {
    total_size += 1 + 4;
  }

  // float fork_high_offset = 4;
  if (!(this->fork_high_offset() <= 0 && this->fork_high_offset() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void store_offset_by_layer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_map.store_offset_by_layer)
  GOOGLE_DCHECK_NE(&from, this);
  const store_offset_by_layer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<store_offset_by_layer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_map.store_offset_by_layer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_map.store_offset_by_layer)
    MergeFrom(*source);
  }
}

void store_offset_by_layer::MergeFrom(const store_offset_by_layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_map.store_offset_by_layer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.high() <= 0 && from.high() >= 0)) {
    _internal_set_high(from._internal_high());
  }
  if (!(from.horizontal_offset() <= 0 && from.horizontal_offset() >= 0)) {
    _internal_set_horizontal_offset(from._internal_horizontal_offset());
  }
  if (!(from.vertical_offset() <= 0 && from.vertical_offset() >= 0)) {
    _internal_set_vertical_offset(from._internal_vertical_offset());
  }
  if (!(from.fork_high_offset() <= 0 && from.fork_high_offset() >= 0)) {
    _internal_set_fork_high_offset(from._internal_fork_high_offset());
  }
}

void store_offset_by_layer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_map.store_offset_by_layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void store_offset_by_layer::CopyFrom(const store_offset_by_layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_map.store_offset_by_layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool store_offset_by_layer::IsInitialized() const {
  return true;
}

void store_offset_by_layer::InternalSwap(store_offset_by_layer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(store_offset_by_layer, fork_high_offset_)
      + sizeof(store_offset_by_layer::fork_high_offset_)
      - PROTOBUF_FIELD_OFFSET(store_offset_by_layer, high_)>(
          reinterpret_cast<char*>(&high_),
          reinterpret_cast<char*>(&other->high_));
}

::PROTOBUF_NAMESPACE_ID::Metadata store_offset_by_layer::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace agv_map
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::agv_map::MAP_ARR_StoreOffConfigEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::MAP_ARR_StoreOffConfigEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::MAP_ARR_StoreOffConfigEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::MAP_ARR* Arena::CreateMaybeMessage< ::agv_map::MAP_ARR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::MAP_ARR >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Map_PointEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Map_PointEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Map_PointEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Map_SegmentEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Map_SegmentEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Map_SegmentEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Map_FpointEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Map_FpointEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Map_FpointEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Map_AreaEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Map_AreaEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Map_AreaEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Map_PointStopListEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Map_PointStopListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Map_PointStopListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Map_PointChargeListEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Map_PointChargeListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Map_PointChargeListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Map* Arena::CreateMaybeMessage< ::agv_map::Map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Map >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Conf* Arena::CreateMaybeMessage< ::agv_map::Conf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Conf >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Point_AgvParamEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Point_AgvParamEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Point_AgvParamEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Point_CtlParamEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Point_CtlParamEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Point_CtlParamEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Point_AvoParamEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Point_AvoParamEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Point_AvoParamEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Point_StaParamEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Point_StaParamEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Point_StaParamEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Point_Basic* Arena::CreateMaybeMessage< ::agv_map::Point_Basic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Point_Basic >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Point_Sparam* Arena::CreateMaybeMessage< ::agv_map::Point_Sparam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Point_Sparam >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Point_Tparam* Arena::CreateMaybeMessage< ::agv_map::Point_Tparam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Point_Tparam >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Point* Arena::CreateMaybeMessage< ::agv_map::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Segment_AgvParamEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Segment_AgvParamEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Segment_AgvParamEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Segment_CtlParamEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Segment_CtlParamEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Segment_CtlParamEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Segment_AvoParamEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Segment_AvoParamEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Segment_AvoParamEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Segment_Basic* Arena::CreateMaybeMessage< ::agv_map::Segment_Basic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Segment_Basic >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Segment* Arena::CreateMaybeMessage< ::agv_map::Segment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Segment >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Fpoint_Basic* Arena::CreateMaybeMessage< ::agv_map::Fpoint_Basic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Fpoint_Basic >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Fpoint* Arena::CreateMaybeMessage< ::agv_map::Fpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Fpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Area_ParamEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Area_ParamEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Area_ParamEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Area_AgvNumEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Area_AgvNumEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Area_AgvNumEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Area_TypeNumEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Area_TypeNumEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Area_TypeNumEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Area_Basic* Arena::CreateMaybeMessage< ::agv_map::Area_Basic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Area_Basic >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Area_Coord* Arena::CreateMaybeMessage< ::agv_map::Area_Coord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Area_Coord >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Area* Arena::CreateMaybeMessage< ::agv_map::Area >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Area >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Param* Arena::CreateMaybeMessage< ::agv_map::Param >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Param >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_PointAgvDescEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Describe_PointAgvDescEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_PointAgvDescEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_PointCtlDescEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Describe_PointCtlDescEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_PointCtlDescEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_PointAvoDescEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Describe_PointAvoDescEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_PointAvoDescEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_SegAgvDescEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Describe_SegAgvDescEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_SegAgvDescEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_SegCtlDescEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Describe_SegCtlDescEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_SegCtlDescEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_SegAvoDescEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Describe_SegAvoDescEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_SegAvoDescEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_FpointDescEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Describe_FpointDescEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_FpointDescEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_AreaDescEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Describe_AreaDescEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_AreaDescEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe_CargoAreaDescEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::Describe_CargoAreaDescEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe_CargoAreaDescEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Describe* Arena::CreateMaybeMessage< ::agv_map::Describe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Describe >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::AreaDesc_DescEntry_DoNotUse* Arena::CreateMaybeMessage< ::agv_map::AreaDesc_DescEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::AreaDesc_DescEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::AreaDesc* Arena::CreateMaybeMessage< ::agv_map::AreaDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::AreaDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::Store_offset* Arena::CreateMaybeMessage< ::agv_map::Store_offset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::Store_offset >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_map::store_offset_by_layer* Arena::CreateMaybeMessage< ::agv_map::store_offset_by_layer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_map::store_offset_by_layer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
