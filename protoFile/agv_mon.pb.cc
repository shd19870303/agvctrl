// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agv_mon.proto

#include "agv_mon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AgvInfor_agv_5fmon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgvInfor_AgvBat_agv_5fmon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgvInfor_AgvLoad_agv_5fmon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AgvInfor_AgvLoc_agv_5fmon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_AgvInfor_AgvReport_agv_5fmon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgvInfor_AgvSt_agv_5fmon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgvInfor_AgvTask_agv_5fmon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AgvInfor_AvoidInfo_agv_5fmon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgvInfor_Basic_agv_5fmon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgvInfor_COORD_agv_5fmon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgvInfor_TimeInfo_agv_5fmon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CxjBack_agv_5fmon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CxjData_agv_5fmon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiftInfor_agv_5fmon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Mon_Route_AgvRoute_agv_5fmon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Param_agv_5fmon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutePoint_agv_5fmon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskInfo_agv_5fmon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskLoc_agv_5fmon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WmsData_agv_5fmon_2eproto;
namespace agv_mon {
class Mon_AskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mon_Ask> _instance;
} _Mon_Ask_default_instance_;
class Mon_DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mon_Data> _instance;
} _Mon_Data_default_instance_;
class AgvInfor_AgvReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgvInfor_AgvReport> _instance;
} _AgvInfor_AgvReport_default_instance_;
class AgvInfor_BasicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgvInfor_Basic> _instance;
} _AgvInfor_Basic_default_instance_;
class AgvInfor_AgvTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgvInfor_AgvTask> _instance;
} _AgvInfor_AgvTask_default_instance_;
class AgvInfor_AgvLocDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgvInfor_AgvLoc> _instance;
} _AgvInfor_AgvLoc_default_instance_;
class AgvInfor_AgvStDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgvInfor_AgvSt> _instance;
} _AgvInfor_AgvSt_default_instance_;
class AgvInfor_AgvBatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgvInfor_AgvBat> _instance;
} _AgvInfor_AgvBat_default_instance_;
class AgvInfor_AgvLoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgvInfor_AgvLoad> _instance;
} _AgvInfor_AgvLoad_default_instance_;
class AgvInfor_AvoidInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgvInfor_AvoidInfo> _instance;
} _AgvInfor_AvoidInfo_default_instance_;
class AgvInfor_TimeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgvInfor_TimeInfo> _instance;
} _AgvInfor_TimeInfo_default_instance_;
class AgvInfor_COORDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgvInfor_COORD> _instance;
} _AgvInfor_COORD_default_instance_;
class AgvInforDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgvInfor> _instance;
} _AgvInfor_default_instance_;
class LiftInforDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiftInfor> _instance;
} _LiftInfor_default_instance_;
class Mon_Route_AgvRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mon_Route_AgvRoute> _instance;
} _Mon_Route_AgvRoute_default_instance_;
class Mon_RouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mon_Route> _instance;
} _Mon_Route_default_instance_;
class RoutePointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutePoint> _instance;
} _RoutePoint_default_instance_;
class Task_DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Task_Data> _instance;
} _Task_Data_default_instance_;
class TaskInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskInfo> _instance;
} _TaskInfo_default_instance_;
class Dev_DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dev_Data> _instance;
} _Dev_Data_default_instance_;
class CxjDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CxjData> _instance;
} _CxjData_default_instance_;
class CxjBackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CxjBack> _instance;
} _CxjBack_default_instance_;
class WmsDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WmsData> _instance;
} _WmsData_default_instance_;
class ParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Param> _instance;
} _Param_default_instance_;
class TaskLocDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskLoc> _instance;
} _TaskLoc_default_instance_;
class COMDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<COMD> _instance;
} _COMD_default_instance_;
class COMDRETDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<COMDRET> _instance;
} _COMDRET_default_instance_;
}  // namespace agv_mon
static void InitDefaultsscc_info_AgvInfor_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_AgvInfor_default_instance_;
    new (ptr) ::agv_mon::AgvInfor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AgvInfor_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_AgvInfor_agv_5fmon_2eproto}, {
      &scc_info_AgvInfor_AgvReport_agv_5fmon_2eproto.base,
      &scc_info_AgvInfor_AvoidInfo_agv_5fmon_2eproto.base,
      &scc_info_AgvInfor_TimeInfo_agv_5fmon_2eproto.base,
      &scc_info_RoutePoint_agv_5fmon_2eproto.base,}};

static void InitDefaultsscc_info_AgvInfor_AgvBat_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_AgvInfor_AgvBat_default_instance_;
    new (ptr) ::agv_mon::AgvInfor_AgvBat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgvInfor_AgvBat_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AgvInfor_AgvBat_agv_5fmon_2eproto}, {}};

static void InitDefaultsscc_info_AgvInfor_AgvLoad_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_AgvInfor_AgvLoad_default_instance_;
    new (ptr) ::agv_mon::AgvInfor_AgvLoad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgvInfor_AgvLoad_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AgvInfor_AgvLoad_agv_5fmon_2eproto}, {}};

static void InitDefaultsscc_info_AgvInfor_AgvLoc_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_AgvInfor_AgvLoc_default_instance_;
    new (ptr) ::agv_mon::AgvInfor_AgvLoc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AgvInfor_AgvLoc_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AgvInfor_AgvLoc_agv_5fmon_2eproto}, {
      &scc_info_AgvInfor_COORD_agv_5fmon_2eproto.base,}};

static void InitDefaultsscc_info_AgvInfor_AgvReport_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_AgvInfor_AgvReport_default_instance_;
    new (ptr) ::agv_mon::AgvInfor_AgvReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_AgvInfor_AgvReport_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_AgvInfor_AgvReport_agv_5fmon_2eproto}, {
      &scc_info_AgvInfor_Basic_agv_5fmon_2eproto.base,
      &scc_info_AgvInfor_AgvTask_agv_5fmon_2eproto.base,
      &scc_info_AgvInfor_AgvLoc_agv_5fmon_2eproto.base,
      &scc_info_AgvInfor_AgvSt_agv_5fmon_2eproto.base,
      &scc_info_AgvInfor_AgvBat_agv_5fmon_2eproto.base,
      &scc_info_AgvInfor_AgvLoad_agv_5fmon_2eproto.base,
      &scc_info_Param_agv_5fmon_2eproto.base,}};

static void InitDefaultsscc_info_AgvInfor_AgvSt_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_AgvInfor_AgvSt_default_instance_;
    new (ptr) ::agv_mon::AgvInfor_AgvSt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgvInfor_AgvSt_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AgvInfor_AgvSt_agv_5fmon_2eproto}, {}};

static void InitDefaultsscc_info_AgvInfor_AgvTask_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_AgvInfor_AgvTask_default_instance_;
    new (ptr) ::agv_mon::AgvInfor_AgvTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgvInfor_AgvTask_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AgvInfor_AgvTask_agv_5fmon_2eproto}, {}};

static void InitDefaultsscc_info_AgvInfor_AvoidInfo_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_AgvInfor_AvoidInfo_default_instance_;
    new (ptr) ::agv_mon::AgvInfor_AvoidInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AgvInfor_AvoidInfo_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AgvInfor_AvoidInfo_agv_5fmon_2eproto}, {
      &scc_info_AgvInfor_COORD_agv_5fmon_2eproto.base,}};

static void InitDefaultsscc_info_AgvInfor_Basic_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_AgvInfor_Basic_default_instance_;
    new (ptr) ::agv_mon::AgvInfor_Basic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgvInfor_Basic_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AgvInfor_Basic_agv_5fmon_2eproto}, {}};

static void InitDefaultsscc_info_AgvInfor_COORD_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_AgvInfor_COORD_default_instance_;
    new (ptr) ::agv_mon::AgvInfor_COORD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgvInfor_COORD_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AgvInfor_COORD_agv_5fmon_2eproto}, {}};

static void InitDefaultsscc_info_AgvInfor_TimeInfo_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_AgvInfor_TimeInfo_default_instance_;
    new (ptr) ::agv_mon::AgvInfor_TimeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgvInfor_TimeInfo_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AgvInfor_TimeInfo_agv_5fmon_2eproto}, {}};

static void InitDefaultsscc_info_COMD_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_COMD_default_instance_;
    new (ptr) ::agv_mon::COMD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_COMD_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_COMD_agv_5fmon_2eproto}, {}};

static void InitDefaultsscc_info_COMDRET_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_COMDRET_default_instance_;
    new (ptr) ::agv_mon::COMDRET();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_COMDRET_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_COMDRET_agv_5fmon_2eproto}, {}};

static void InitDefaultsscc_info_CxjBack_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_CxjBack_default_instance_;
    new (ptr) ::agv_mon::CxjBack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CxjBack_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CxjBack_agv_5fmon_2eproto}, {}};

static void InitDefaultsscc_info_CxjData_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_CxjData_default_instance_;
    new (ptr) ::agv_mon::CxjData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CxjData_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CxjData_agv_5fmon_2eproto}, {}};

static void InitDefaultsscc_info_Dev_Data_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_Dev_Data_default_instance_;
    new (ptr) ::agv_mon::Dev_Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Dev_Data_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Dev_Data_agv_5fmon_2eproto}, {
      &scc_info_CxjData_agv_5fmon_2eproto.base,
      &scc_info_CxjBack_agv_5fmon_2eproto.base,
      &scc_info_WmsData_agv_5fmon_2eproto.base,}};

static void InitDefaultsscc_info_LiftInfor_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_LiftInfor_default_instance_;
    new (ptr) ::agv_mon::LiftInfor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiftInfor_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LiftInfor_agv_5fmon_2eproto}, {}};

static void InitDefaultsscc_info_Mon_Ask_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_Mon_Ask_default_instance_;
    new (ptr) ::agv_mon::Mon_Ask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mon_Ask_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Mon_Ask_agv_5fmon_2eproto}, {}};

static void InitDefaultsscc_info_Mon_Data_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_Mon_Data_default_instance_;
    new (ptr) ::agv_mon::Mon_Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Mon_Data_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Mon_Data_agv_5fmon_2eproto}, {
      &scc_info_AgvInfor_agv_5fmon_2eproto.base,
      &scc_info_LiftInfor_agv_5fmon_2eproto.base,}};

static void InitDefaultsscc_info_Mon_Route_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_Mon_Route_default_instance_;
    new (ptr) ::agv_mon::Mon_Route();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Mon_Route_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Mon_Route_agv_5fmon_2eproto}, {
      &scc_info_Mon_Route_AgvRoute_agv_5fmon_2eproto.base,}};

static void InitDefaultsscc_info_Mon_Route_AgvRoute_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_Mon_Route_AgvRoute_default_instance_;
    new (ptr) ::agv_mon::Mon_Route_AgvRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Mon_Route_AgvRoute_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Mon_Route_AgvRoute_agv_5fmon_2eproto}, {
      &scc_info_RoutePoint_agv_5fmon_2eproto.base,}};

static void InitDefaultsscc_info_Param_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_Param_default_instance_;
    new (ptr) ::agv_mon::Param();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Param_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Param_agv_5fmon_2eproto}, {}};

static void InitDefaultsscc_info_RoutePoint_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_RoutePoint_default_instance_;
    new (ptr) ::agv_mon::RoutePoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutePoint_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoutePoint_agv_5fmon_2eproto}, {}};

static void InitDefaultsscc_info_TaskInfo_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_TaskInfo_default_instance_;
    new (ptr) ::agv_mon::TaskInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskInfo_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TaskInfo_agv_5fmon_2eproto}, {
      &scc_info_TaskLoc_agv_5fmon_2eproto.base,}};

static void InitDefaultsscc_info_TaskLoc_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_TaskLoc_default_instance_;
    new (ptr) ::agv_mon::TaskLoc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskLoc_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TaskLoc_agv_5fmon_2eproto}, {}};

static void InitDefaultsscc_info_Task_Data_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_Task_Data_default_instance_;
    new (ptr) ::agv_mon::Task_Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Task_Data_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Task_Data_agv_5fmon_2eproto}, {
      &scc_info_TaskInfo_agv_5fmon_2eproto.base,}};

static void InitDefaultsscc_info_WmsData_agv_5fmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agv_mon::_WmsData_default_instance_;
    new (ptr) ::agv_mon::WmsData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WmsData_agv_5fmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WmsData_agv_5fmon_2eproto}, {
      &scc_info_Param_agv_5fmon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_agv_5fmon_2eproto[27];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_agv_5fmon_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_agv_5fmon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_agv_5fmon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::Mon_Ask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::Mon_Ask, data_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::Mon_Ask, area_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::Mon_Ask, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::Mon_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::Mon_Data, agvinfor_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::Mon_Data, liftinfor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvReport, basic_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvReport, agvtask_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvReport, agvloc_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvReport, agvst_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvReport, agvbat_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvReport, agvload_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvReport, protection_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvReport, dev_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_Basic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_Basic, ts_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_Basic, pid_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_Basic, area_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_Basic, id_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_Basic, type_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_Basic, version_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_Basic, version_ts_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_Basic, beta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvTask, task_id_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvTask, task_type_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvTask, start_id_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvTask, end_id_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvTask, detour_id_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvTask, nxt_sta_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvTask, cur_seg_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvTask, nxt_seg_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvTask, start_layer_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvTask, end_layer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvLoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvLoc, pos_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvLoc, nav_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvLoc, pos_ang_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvLoc, cur_sta_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvLoc, see_reflect_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvLoc, use_reflect_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvLoc, reflect_id_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvLoc, in_lift_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvLoc, floor_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvLoc, bind_area_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvLoc, sta_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvSt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvSt, dir_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvSt, speed_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvSt, state_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvSt, status_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvSt, softstop_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvSt, error_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvSt, speedlimit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvBat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvBat, battery_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvBat, chargingtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvLoad, load_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AgvLoad, hyd_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AvoidInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AvoidInfo, agvoutline_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AvoidInfo, goodsoutline_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AvoidInfo, occupypoint_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AvoidInfo, scanpoint_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AvoidInfo, stopstatus_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AvoidInfo, stoplevel_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AvoidInfo, stopbyagvid_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AvoidInfo, stopreason_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AvoidInfo, speedlevel_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AvoidInfo, speedbyagvid_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AvoidInfo, speedreason_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AvoidInfo, outlinetype_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_AvoidInfo, confpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_TimeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_TimeInfo, idle_wait_ts_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_TimeInfo, avoid_set_ts_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_TimeInfo, manual_on_ts_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_TimeInfo, softstop_on_ts_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_TimeInfo, warning_on_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_COORD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_COORD, x_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor_COORD, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor, ip_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor, ts_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor, ol_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor, agvreport_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor, avoidinfo_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor, timeinfo_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor, route_id_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::AgvInfor, routepoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::LiftInfor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::LiftInfor, ip_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::LiftInfor, ts_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::LiftInfor, lift_group_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::LiftInfor, lift_idx_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::LiftInfor, lift_agv_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::LiftInfor, startfloor_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::LiftInfor, endfloor_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::LiftInfor, curfloor_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::LiftInfor, openinplace_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::LiftInfor, closeinplace_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::LiftInfor, idlewait_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::LiftInfor, runsignal_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::LiftInfor, incall_floor_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::LiftInfor, outcall_floor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::Mon_Route_AgvRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::Mon_Route_AgvRoute, id_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::Mon_Route_AgvRoute, route_id_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::Mon_Route_AgvRoute, routepoint_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::Mon_Route_AgvRoute, cur_seg_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::Mon_Route_AgvRoute, nxt_seg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::Mon_Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::Mon_Route, agvroute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::RoutePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::RoutePoint, point_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::RoutePoint, fpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::Task_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::Task_Data, taskinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskInfo, wms_id_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskInfo, mes_id_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskInfo, agv_id_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskInfo, area_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskInfo, status_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskInfo, start_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskInfo, end_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskInfo, pallet_no_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskInfo, create_time_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskInfo, excute_time_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskInfo, get_time_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskInfo, finish_time_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskInfo, priority_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskInfo, agv_expect_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskInfo, delay_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::Dev_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::Dev_Data, cxjdata_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::Dev_Data, cxjback_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::Dev_Data, wmsdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::CxjData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::CxjData, cxjid_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::CxjData, cxjtype_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::CxjData, storeid_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::CxjData, goods_sig_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::CxjData, inright_sig_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::CxjData, all_sig_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::CxjData, agv_in_flag_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::CxjData, cxj_heart_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::CxjData, agv_id_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::CxjData, wms_task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::CxjBack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::CxjBack, storeid_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::CxjBack, area_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::CxjBack, type_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::CxjBack, task_no_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::CxjBack, rfid_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::CxjBack, plcip_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::CxjBack, ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::WmsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::WmsData, storeid_pick_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::WmsData, storeid_put_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::WmsData, area_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::WmsData, type_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::WmsData, pick_enable_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::WmsData, put_enable_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::WmsData, pick_task_no_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::WmsData, put_task_no_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::WmsData, infr_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::WmsData, ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::Param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::Param, key_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::Param, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskLoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskLoc, name_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskLoc, layers_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskLoc, id_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskLoc, area_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::TaskLoc, area_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::COMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::COMD, flag_),
  PROTOBUF_FIELD_OFFSET(::agv_mon::COMD, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agv_mon::COMDRET, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agv_mon::COMDRET, comdret_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::agv_mon::Mon_Ask)},
  { 8, -1, sizeof(::agv_mon::Mon_Data)},
  { 15, -1, sizeof(::agv_mon::AgvInfor_AgvReport)},
  { 28, -1, sizeof(::agv_mon::AgvInfor_Basic)},
  { 41, -1, sizeof(::agv_mon::AgvInfor_AgvTask)},
  { 56, -1, sizeof(::agv_mon::AgvInfor_AgvLoc)},
  { 72, -1, sizeof(::agv_mon::AgvInfor_AgvSt)},
  { 84, -1, sizeof(::agv_mon::AgvInfor_AgvBat)},
  { 91, -1, sizeof(::agv_mon::AgvInfor_AgvLoad)},
  { 98, -1, sizeof(::agv_mon::AgvInfor_AvoidInfo)},
  { 116, -1, sizeof(::agv_mon::AgvInfor_TimeInfo)},
  { 126, -1, sizeof(::agv_mon::AgvInfor_COORD)},
  { 133, -1, sizeof(::agv_mon::AgvInfor)},
  { 146, -1, sizeof(::agv_mon::LiftInfor)},
  { 165, -1, sizeof(::agv_mon::Mon_Route_AgvRoute)},
  { 175, -1, sizeof(::agv_mon::Mon_Route)},
  { 181, -1, sizeof(::agv_mon::RoutePoint)},
  { 188, -1, sizeof(::agv_mon::Task_Data)},
  { 194, -1, sizeof(::agv_mon::TaskInfo)},
  { 214, -1, sizeof(::agv_mon::Dev_Data)},
  { 222, -1, sizeof(::agv_mon::CxjData)},
  { 237, -1, sizeof(::agv_mon::CxjBack)},
  { 249, -1, sizeof(::agv_mon::WmsData)},
  { 264, -1, sizeof(::agv_mon::Param)},
  { 271, -1, sizeof(::agv_mon::TaskLoc)},
  { 281, -1, sizeof(::agv_mon::COMD)},
  { 288, -1, sizeof(::agv_mon::COMDRET)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_Mon_Ask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_Mon_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_AgvInfor_AgvReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_AgvInfor_Basic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_AgvInfor_AgvTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_AgvInfor_AgvLoc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_AgvInfor_AgvSt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_AgvInfor_AgvBat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_AgvInfor_AgvLoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_AgvInfor_AvoidInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_AgvInfor_TimeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_AgvInfor_COORD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_AgvInfor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_LiftInfor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_Mon_Route_AgvRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_Mon_Route_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_RoutePoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_Task_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_TaskInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_Dev_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_CxjData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_CxjBack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_WmsData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_Param_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_TaskLoc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_COMD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agv_mon::_COMDRET_default_instance_),
};

const char descriptor_table_protodef_agv_5fmon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ragv_mon.proto\022\007agv_mon\"3\n\007Mon_Ask\022\014\n\004d"
  "ata\030\001 \001(\005\022\014\n\004area\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\"V\n"
  "\010Mon_Data\022#\n\010agvinfor\030\001 \003(\0132\021.agv_mon.Ag"
  "vInfor\022%\n\tliftinfor\030\002 \003(\0132\022.agv_mon.Lift"
  "Infor\"\233\017\n\010AgvInfor\022\n\n\002ip\030\001 \001(\r\022\n\n\002ts\030\002 \001"
  "(\003\022\n\n\002ol\030\003 \001(\005\022.\n\tagvreport\030\004 \001(\0132\033.agv_"
  "mon.AgvInfor.AgvReport\022.\n\tavoidinfo\030\005 \001("
  "\0132\033.agv_mon.AgvInfor.AvoidInfo\022,\n\010timein"
  "fo\030\006 \001(\0132\032.agv_mon.AgvInfor.TimeInfo\022\020\n\010"
  "route_id\030\007 \003(\005\022\'\n\nroutepoint\030\010 \003(\0132\023.agv"
  "_mon.RoutePoint\032\253\003\n\tAgvReport\022&\n\005basic\030\001"
  " \001(\0132\027.agv_mon.AgvInfor.Basic\022*\n\007agvtask"
  "\030\002 \001(\0132\031.agv_mon.AgvInfor.AgvTask\022(\n\006agv"
  "loc\030\003 \001(\0132\030.agv_mon.AgvInfor.AgvLoc\022&\n\005a"
  "gvst\030\004 \001(\0132\027.agv_mon.AgvInfor.AgvSt\022(\n\006a"
  "gvbat\030\005 \001(\0132\030.agv_mon.AgvInfor.AgvBat\022*\n"
  "\007agvload\030\006 \001(\0132\031.agv_mon.AgvInfor.AgvLoa"
  "d\022\"\n\nprotection\030\007 \003(\0132\016.agv_mon.Param\022\"\n"
  "\ndev_status\030\010 \003(\0132\016.agv_mon.Param\">\n\016Pro"
  "tectionType\022\016\n\nSAFE_FRONT\020\000\022\r\n\tSAFE_BACK"
  "\020\001\022\r\n\tINFR_BACK\020\002\"\032\n\nDeviceType\022\014\n\010BAT_L"
  "OCK\020\000\032{\n\005Basic\022\n\n\002ts\030\001 \001(\003\022\013\n\003pid\030\002 \001(\005\022"
  "\014\n\004area\030\003 \001(\005\022\n\n\002id\030\004 \001(\005\022\014\n\004type\030\005 \001(\005\022"
  "\017\n\007version\030\006 \001(\t\022\022\n\nversion_ts\030\007 \001(\005\022\014\n\004"
  "beta\030\010 \001(\005\032\275\001\n\007AgvTask\022\017\n\007task_id\030\001 \001(\005\022"
  "\021\n\ttask_type\030\002 \001(\005\022\020\n\010start_id\030\003 \001(\021\022\016\n\006"
  "end_id\030\004 \001(\021\022\021\n\tdetour_id\030\005 \001(\021\022\017\n\007nxt_s"
  "ta\030\006 \001(\021\022\017\n\007cur_seg\030\007 \001(\021\022\017\n\007nxt_seg\030\010 \001"
  "(\021\022\023\n\013start_layer\030\t \001(\021\022\021\n\tend_layer\030\n \001"
  "(\021\032\372\001\n\006AgvLoc\022$\n\003pos\030\001 \001(\0132\027.agv_mon.Agv"
  "Infor.COORD\022$\n\003nav\030\002 \001(\0132\027.agv_mon.AgvIn"
  "for.COORD\022\017\n\007pos_ang\030\003 \001(\002\022\017\n\007cur_sta\030\004 "
  "\001(\021\022\023\n\013see_reflect\030\005 \001(\021\022\023\n\013use_reflect\030"
  "\006 \001(\021\022\022\n\nreflect_id\030\007 \003(\005\022\017\n\007in_lift\030\010 \001"
  "(\005\022\r\n\005floor\030\t \001(\005\022\021\n\tbind_area\030\n \001(\021\022\021\n\t"
  "sta_limit\030\013 \001(\021\032w\n\005AgvSt\022\013\n\003dir\030\001 \001(\021\022\r\n"
  "\005speed\030\002 \001(\005\022\r\n\005state\030\003 \001(\005\022\016\n\006status\030\004 "
  "\001(\005\022\020\n\010softstop\030\005 \001(\021\022\r\n\005error\030\006 \001(\021\022\022\n\n"
  "speedlimit\030\007 \001(\021\032/\n\006AgvBat\022\017\n\007battery\030\001 "
  "\001(\002\022\024\n\014chargingtime\030\002 \001(\021\032+\n\007AgvLoad\022\014\n\004"
  "load\030\001 \001(\021\022\022\n\nhyd_height\030\002 \001(\005\032\306\002\n\tAvoid"
  "Info\022+\n\nagvoutline\030\001 \003(\0132\027.agv_mon.AgvIn"
  "for.COORD\022-\n\014goodsoutline\030\002 \003(\0132\027.agv_mo"
  "n.AgvInfor.COORD\022\023\n\013occupypoint\030\003 \003(\005\022\021\n"
  "\tscanpoint\030\004 \003(\005\022\022\n\nstopStatus\030\005 \001(\021\022\021\n\t"
  "stopLevel\030\006 \001(\021\022\023\n\013stopByAGVId\030\007 \001(\021\022\022\n\n"
  "stopReason\030\010 \001(\021\022\022\n\nspeedLevel\030\t \001(\021\022\024\n\014"
  "speedByAGVId\030\n \001(\021\022\023\n\013speedReason\030\013 \001(\021\022"
  "\023\n\013outLineType\030\014 \001(\021\022\021\n\tconfPoint\030\r \001(\021\032"
  "{\n\010TimeInfo\022\024\n\014idle_wait_ts\030\001 \001(\005\022\024\n\014avo"
  "id_set_ts\030\002 \001(\005\022\024\n\014manual_on_ts\030\003 \001(\005\022\026\n"
  "\016softstop_on_ts\030\004 \001(\005\022\025\n\rwarning_on_ts\030\005"
  " \001(\005\032\035\n\005COORD\022\t\n\001x\030\001 \001(\021\022\t\n\001y\030\002 \001(\021\"\220\002\n\t"
  "LiftInfor\022\n\n\002ip\030\001 \001(\t\022\n\n\002ts\030\002 \001(\003\022\022\n\nlif"
  "t_group\030\003 \001(\021\022\020\n\010lift_idx\030\004 \001(\021\022\020\n\010lift_"
  "agv\030\005 \001(\021\022\022\n\nstartFloor\030\006 \001(\021\022\020\n\010endFloo"
  "r\030\007 \001(\021\022\020\n\010curFloor\030\010 \001(\021\022\023\n\013openInPlace"
  "\030\t \001(\005\022\024\n\014closeInPlace\030\n \001(\005\022\020\n\010idleWait"
  "\030\013 \001(\005\022\021\n\trunSignal\030\014 \001(\005\022\024\n\014incall_floo"
  "r\030\r \001(\022\022\025\n\routcall_floor\030\016 \001(\022\"\257\001\n\tMon_R"
  "oute\022-\n\010agvroute\030\001 \003(\0132\033.agv_mon.Mon_Rou"
  "te.AgvRoute\032s\n\010AgvRoute\022\n\n\002id\030\001 \001(\005\022\020\n\010r"
  "oute_id\030\002 \003(\005\022\'\n\nroutepoint\030\003 \003(\0132\023.agv_"
  "mon.RoutePoint\022\017\n\007cur_seg\030\004 \001(\021\022\017\n\007nxt_s"
  "eg\030\005 \001(\021\"+\n\nRoutePoint\022\r\n\005point\030\001 \001(\005\022\016\n"
  "\006fpoint\030\002 \001(\005\"0\n\tTask_Data\022#\n\010taskinfo\030\001"
  " \003(\0132\021.agv_mon.TaskInfo\"\266\002\n\010TaskInfo\022\016\n\006"
  "wms_id\030\001 \001(\005\022\016\n\006mes_id\030\002 \001(\005\022\016\n\006agv_id\030\003"
  " \001(\021\022\014\n\004area\030\004 \001(\005\022\016\n\006status\030\005 \001(\005\022\037\n\005st"
  "art\030\006 \001(\0132\020.agv_mon.TaskLoc\022\035\n\003end\030\007 \001(\013"
  "2\020.agv_mon.TaskLoc\022\021\n\tpallet_no\030\010 \001(\t\022\023\n"
  "\013create_time\030\t \001(\003\022\023\n\013excute_time\030\n \001(\003\022"
  "\020\n\010get_time\030\013 \001(\003\022\023\n\013finish_time\030\014 \001(\003\022\020"
  "\n\010priority\030\r \001(\005\022\022\n\nagv_expect\030\016 \001(\021\022\022\n\n"
  "delay_type\030\017 \001(\005\"s\n\010Dev_Data\022!\n\007cxjdata\030"
  "\001 \003(\0132\020.agv_mon.CxjData\022!\n\007cxjback\030\002 \003(\013"
  "2\020.agv_mon.CxjBack\022!\n\007wmsdata\030\003 \003(\0132\020.ag"
  "v_mon.WmsData\"\275\001\n\007CxjData\022\r\n\005cxjid\030\001 \001(\005"
  "\022\017\n\007cxjtype\030\002 \001(\005\022\017\n\007storeid\030\003 \001(\005\022\021\n\tgo"
  "ods_sig\030\004 \001(\005\022\023\n\013inright_sig\030\005 \001(\005\022\017\n\007al"
  "l_sig\030\006 \001(\005\022\023\n\013agv_in_flag\030\007 \001(\005\022\021\n\tcxj_"
  "heart\030\010 \001(\005\022\016\n\006agv_id\030\t \001(\021\022\020\n\010wms_task\030"
  "\n \001(\005\"p\n\007CxjBack\022\017\n\007storeid\030\001 \001(\005\022\014\n\004are"
  "a\030\002 \001(\021\022\014\n\004type\030\003 \001(\005\022\017\n\007task_no\030\004 \001(\005\022\014"
  "\n\004rfid\030\005 \001(\t\022\r\n\005plcip\030\006 \001(\r\022\n\n\002ts\030\007 \001(\003\""
  "\316\001\n\007WmsData\022\024\n\014storeid_pick\030\001 \001(\005\022\023\n\013sto"
  "reid_put\030\002 \001(\005\022\014\n\004area\030\003 \001(\021\022\014\n\004type\030\004 \001"
  "(\005\022\023\n\013pick_enable\030\005 \001(\021\022\022\n\nput_enable\030\006 "
  "\001(\021\022\024\n\014pick_task_no\030\007 \001(\021\022\023\n\013put_task_no"
  "\030\010 \001(\021\022\034\n\004infr\030\t \003(\0132\016.agv_mon.Param\022\n\n\002"
  "ts\030\n \001(\003\"#\n\005Param\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030"
  "\002 \001(\021\"T\n\007TaskLoc\022\014\n\004name\030\001 \001(\t\022\016\n\006layers"
  "\030\002 \001(\005\022\n\n\002id\030\003 \001(\005\022\014\n\004area\030\004 \001(\021\022\021\n\tarea"
  "_name\030\005 \001(\t\"#\n\004COMD\022\014\n\004flag\030\001 \001(\005\022\r\n\005val"
  "ue\030\002 \003(\005\"\032\n\007COMDRET\022\017\n\007comdret\030\001 \003(\tb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_agv_5fmon_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_agv_5fmon_2eproto_sccs[27] = {
  &scc_info_AgvInfor_agv_5fmon_2eproto.base,
  &scc_info_AgvInfor_AgvBat_agv_5fmon_2eproto.base,
  &scc_info_AgvInfor_AgvLoad_agv_5fmon_2eproto.base,
  &scc_info_AgvInfor_AgvLoc_agv_5fmon_2eproto.base,
  &scc_info_AgvInfor_AgvReport_agv_5fmon_2eproto.base,
  &scc_info_AgvInfor_AgvSt_agv_5fmon_2eproto.base,
  &scc_info_AgvInfor_AgvTask_agv_5fmon_2eproto.base,
  &scc_info_AgvInfor_AvoidInfo_agv_5fmon_2eproto.base,
  &scc_info_AgvInfor_Basic_agv_5fmon_2eproto.base,
  &scc_info_AgvInfor_COORD_agv_5fmon_2eproto.base,
  &scc_info_AgvInfor_TimeInfo_agv_5fmon_2eproto.base,
  &scc_info_COMD_agv_5fmon_2eproto.base,
  &scc_info_COMDRET_agv_5fmon_2eproto.base,
  &scc_info_CxjBack_agv_5fmon_2eproto.base,
  &scc_info_CxjData_agv_5fmon_2eproto.base,
  &scc_info_Dev_Data_agv_5fmon_2eproto.base,
  &scc_info_LiftInfor_agv_5fmon_2eproto.base,
  &scc_info_Mon_Ask_agv_5fmon_2eproto.base,
  &scc_info_Mon_Data_agv_5fmon_2eproto.base,
  &scc_info_Mon_Route_agv_5fmon_2eproto.base,
  &scc_info_Mon_Route_AgvRoute_agv_5fmon_2eproto.base,
  &scc_info_Param_agv_5fmon_2eproto.base,
  &scc_info_RoutePoint_agv_5fmon_2eproto.base,
  &scc_info_TaskInfo_agv_5fmon_2eproto.base,
  &scc_info_TaskLoc_agv_5fmon_2eproto.base,
  &scc_info_Task_Data_agv_5fmon_2eproto.base,
  &scc_info_WmsData_agv_5fmon_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_agv_5fmon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_agv_5fmon_2eproto = {
  false, false, descriptor_table_protodef_agv_5fmon_2eproto, "agv_mon.proto", 3804,
  &descriptor_table_agv_5fmon_2eproto_once, descriptor_table_agv_5fmon_2eproto_sccs, descriptor_table_agv_5fmon_2eproto_deps, 27, 0,
  schemas, file_default_instances, TableStruct_agv_5fmon_2eproto::offsets,
  file_level_metadata_agv_5fmon_2eproto, 27, file_level_enum_descriptors_agv_5fmon_2eproto, file_level_service_descriptors_agv_5fmon_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_agv_5fmon_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_agv_5fmon_2eproto)), true);
namespace agv_mon {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AgvInfor_AgvReport_ProtectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_agv_5fmon_2eproto);
  return file_level_enum_descriptors_agv_5fmon_2eproto[0];
}
bool AgvInfor_AgvReport_ProtectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AgvInfor_AgvReport_ProtectionType AgvInfor_AgvReport::SAFE_FRONT;
constexpr AgvInfor_AgvReport_ProtectionType AgvInfor_AgvReport::SAFE_BACK;
constexpr AgvInfor_AgvReport_ProtectionType AgvInfor_AgvReport::INFR_BACK;
constexpr AgvInfor_AgvReport_ProtectionType AgvInfor_AgvReport::ProtectionType_MIN;
constexpr AgvInfor_AgvReport_ProtectionType AgvInfor_AgvReport::ProtectionType_MAX;
constexpr int AgvInfor_AgvReport::ProtectionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AgvInfor_AgvReport_DeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_agv_5fmon_2eproto);
  return file_level_enum_descriptors_agv_5fmon_2eproto[1];
}
bool AgvInfor_AgvReport_DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AgvInfor_AgvReport_DeviceType AgvInfor_AgvReport::BAT_LOCK;
constexpr AgvInfor_AgvReport_DeviceType AgvInfor_AgvReport::DeviceType_MIN;
constexpr AgvInfor_AgvReport_DeviceType AgvInfor_AgvReport::DeviceType_MAX;
constexpr int AgvInfor_AgvReport::DeviceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Mon_Ask::_Internal {
 public:
};

Mon_Ask::Mon_Ask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.Mon_Ask)
}
Mon_Ask::Mon_Ask(const Mon_Ask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&data_, &from.data_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&data_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.Mon_Ask)
}

void Mon_Ask::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&data_)) + sizeof(type_));
}

Mon_Ask::~Mon_Ask() {
  // @@protoc_insertion_point(destructor:agv_mon.Mon_Ask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mon_Ask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Mon_Ask::ArenaDtor(void* object) {
  Mon_Ask* _this = reinterpret_cast< Mon_Ask* >(object);
  (void)_this;
}
void Mon_Ask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mon_Ask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mon_Ask& Mon_Ask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mon_Ask_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void Mon_Ask::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.Mon_Ask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&data_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mon_Ask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mon_Ask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.Mon_Ask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 data = 1;
  if (this->data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_data(), target);
  }

  // int32 area = 2;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_area(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.Mon_Ask)
  return target;
}

size_t Mon_Ask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.Mon_Ask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 data = 1;
  if (this->data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data());
  }

  // int32 area = 2;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mon_Ask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.Mon_Ask)
  GOOGLE_DCHECK_NE(&from, this);
  const Mon_Ask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mon_Ask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.Mon_Ask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.Mon_Ask)
    MergeFrom(*source);
  }
}

void Mon_Ask::MergeFrom(const Mon_Ask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.Mon_Ask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data() != 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Mon_Ask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.Mon_Ask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mon_Ask::CopyFrom(const Mon_Ask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.Mon_Ask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mon_Ask::IsInitialized() const {
  return true;
}

void Mon_Ask::InternalSwap(Mon_Ask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mon_Ask, type_)
      + sizeof(Mon_Ask::type_)
      - PROTOBUF_FIELD_OFFSET(Mon_Ask, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mon_Ask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Mon_Data::_Internal {
 public:
};

Mon_Data::Mon_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agvinfor_(arena),
  liftinfor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.Mon_Data)
}
Mon_Data::Mon_Data(const Mon_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agvinfor_(from.agvinfor_),
      liftinfor_(from.liftinfor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:agv_mon.Mon_Data)
}

void Mon_Data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mon_Data_agv_5fmon_2eproto.base);
}

Mon_Data::~Mon_Data() {
  // @@protoc_insertion_point(destructor:agv_mon.Mon_Data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mon_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Mon_Data::ArenaDtor(void* object) {
  Mon_Data* _this = reinterpret_cast< Mon_Data* >(object);
  (void)_this;
}
void Mon_Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mon_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mon_Data& Mon_Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mon_Data_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void Mon_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.Mon_Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agvinfor_.Clear();
  liftinfor_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mon_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .agv_mon.AgvInfor agvinfor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agvinfor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .agv_mon.LiftInfor liftinfor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_liftinfor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mon_Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.Mon_Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .agv_mon.AgvInfor agvinfor = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agvinfor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agvinfor(i), target, stream);
  }

  // repeated .agv_mon.LiftInfor liftinfor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_liftinfor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_liftinfor(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.Mon_Data)
  return target;
}

size_t Mon_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.Mon_Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agv_mon.AgvInfor agvinfor = 1;
  total_size += 1UL * this->_internal_agvinfor_size();
  for (const auto& msg : this->agvinfor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .agv_mon.LiftInfor liftinfor = 2;
  total_size += 1UL * this->_internal_liftinfor_size();
  for (const auto& msg : this->liftinfor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mon_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.Mon_Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Mon_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mon_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.Mon_Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.Mon_Data)
    MergeFrom(*source);
  }
}

void Mon_Data::MergeFrom(const Mon_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.Mon_Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agvinfor_.MergeFrom(from.agvinfor_);
  liftinfor_.MergeFrom(from.liftinfor_);
}

void Mon_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.Mon_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mon_Data::CopyFrom(const Mon_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.Mon_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mon_Data::IsInitialized() const {
  return true;
}

void Mon_Data::InternalSwap(Mon_Data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agvinfor_.InternalSwap(&other->agvinfor_);
  liftinfor_.InternalSwap(&other->liftinfor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mon_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AgvInfor_AgvReport::_Internal {
 public:
  static const ::agv_mon::AgvInfor_Basic& basic(const AgvInfor_AgvReport* msg);
  static const ::agv_mon::AgvInfor_AgvTask& agvtask(const AgvInfor_AgvReport* msg);
  static const ::agv_mon::AgvInfor_AgvLoc& agvloc(const AgvInfor_AgvReport* msg);
  static const ::agv_mon::AgvInfor_AgvSt& agvst(const AgvInfor_AgvReport* msg);
  static const ::agv_mon::AgvInfor_AgvBat& agvbat(const AgvInfor_AgvReport* msg);
  static const ::agv_mon::AgvInfor_AgvLoad& agvload(const AgvInfor_AgvReport* msg);
};

const ::agv_mon::AgvInfor_Basic&
AgvInfor_AgvReport::_Internal::basic(const AgvInfor_AgvReport* msg) {
  return *msg->basic_;
}
const ::agv_mon::AgvInfor_AgvTask&
AgvInfor_AgvReport::_Internal::agvtask(const AgvInfor_AgvReport* msg) {
  return *msg->agvtask_;
}
const ::agv_mon::AgvInfor_AgvLoc&
AgvInfor_AgvReport::_Internal::agvloc(const AgvInfor_AgvReport* msg) {
  return *msg->agvloc_;
}
const ::agv_mon::AgvInfor_AgvSt&
AgvInfor_AgvReport::_Internal::agvst(const AgvInfor_AgvReport* msg) {
  return *msg->agvst_;
}
const ::agv_mon::AgvInfor_AgvBat&
AgvInfor_AgvReport::_Internal::agvbat(const AgvInfor_AgvReport* msg) {
  return *msg->agvbat_;
}
const ::agv_mon::AgvInfor_AgvLoad&
AgvInfor_AgvReport::_Internal::agvload(const AgvInfor_AgvReport* msg) {
  return *msg->agvload_;
}
AgvInfor_AgvReport::AgvInfor_AgvReport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  protection_(arena),
  dev_status_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.AgvInfor.AgvReport)
}
AgvInfor_AgvReport::AgvInfor_AgvReport(const AgvInfor_AgvReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      protection_(from.protection_),
      dev_status_(from.dev_status_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_basic()) {
    basic_ = new ::agv_mon::AgvInfor_Basic(*from.basic_);
  } else {
    basic_ = nullptr;
  }
  if (from._internal_has_agvtask()) {
    agvtask_ = new ::agv_mon::AgvInfor_AgvTask(*from.agvtask_);
  } else {
    agvtask_ = nullptr;
  }
  if (from._internal_has_agvloc()) {
    agvloc_ = new ::agv_mon::AgvInfor_AgvLoc(*from.agvloc_);
  } else {
    agvloc_ = nullptr;
  }
  if (from._internal_has_agvst()) {
    agvst_ = new ::agv_mon::AgvInfor_AgvSt(*from.agvst_);
  } else {
    agvst_ = nullptr;
  }
  if (from._internal_has_agvbat()) {
    agvbat_ = new ::agv_mon::AgvInfor_AgvBat(*from.agvbat_);
  } else {
    agvbat_ = nullptr;
  }
  if (from._internal_has_agvload()) {
    agvload_ = new ::agv_mon::AgvInfor_AgvLoad(*from.agvload_);
  } else {
    agvload_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agv_mon.AgvInfor.AgvReport)
}

void AgvInfor_AgvReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgvInfor_AgvReport_agv_5fmon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&basic_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&agvload_) -
      reinterpret_cast<char*>(&basic_)) + sizeof(agvload_));
}

AgvInfor_AgvReport::~AgvInfor_AgvReport() {
  // @@protoc_insertion_point(destructor:agv_mon.AgvInfor.AgvReport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgvInfor_AgvReport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete basic_;
  if (this != internal_default_instance()) delete agvtask_;
  if (this != internal_default_instance()) delete agvloc_;
  if (this != internal_default_instance()) delete agvst_;
  if (this != internal_default_instance()) delete agvbat_;
  if (this != internal_default_instance()) delete agvload_;
}

void AgvInfor_AgvReport::ArenaDtor(void* object) {
  AgvInfor_AgvReport* _this = reinterpret_cast< AgvInfor_AgvReport* >(object);
  (void)_this;
}
void AgvInfor_AgvReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgvInfor_AgvReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgvInfor_AgvReport& AgvInfor_AgvReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgvInfor_AgvReport_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void AgvInfor_AgvReport::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.AgvInfor.AgvReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protection_.Clear();
  dev_status_.Clear();
  if (GetArena() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
  if (GetArena() == nullptr && agvtask_ != nullptr) {
    delete agvtask_;
  }
  agvtask_ = nullptr;
  if (GetArena() == nullptr && agvloc_ != nullptr) {
    delete agvloc_;
  }
  agvloc_ = nullptr;
  if (GetArena() == nullptr && agvst_ != nullptr) {
    delete agvst_;
  }
  agvst_ = nullptr;
  if (GetArena() == nullptr && agvbat_ != nullptr) {
    delete agvbat_;
  }
  agvbat_ = nullptr;
  if (GetArena() == nullptr && agvload_ != nullptr) {
    delete agvload_;
  }
  agvload_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgvInfor_AgvReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agv_mon.AgvInfor.Basic basic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agv_mon.AgvInfor.AgvTask agvtask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_agvtask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agv_mon.AgvInfor.AgvLoc agvloc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_agvloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agv_mon.AgvInfor.AgvSt agvst = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_agvst(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agv_mon.AgvInfor.AgvBat agvbat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_agvbat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agv_mon.AgvInfor.AgvLoad agvload = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_agvload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .agv_mon.Param protection = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_protection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .agv_mon.Param dev_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dev_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgvInfor_AgvReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.AgvInfor.AgvReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agv_mon.AgvInfor.Basic basic = 1;
  if (this->has_basic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basic(this), target, stream);
  }

  // .agv_mon.AgvInfor.AgvTask agvtask = 2;
  if (this->has_agvtask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::agvtask(this), target, stream);
  }

  // .agv_mon.AgvInfor.AgvLoc agvloc = 3;
  if (this->has_agvloc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::agvloc(this), target, stream);
  }

  // .agv_mon.AgvInfor.AgvSt agvst = 4;
  if (this->has_agvst()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::agvst(this), target, stream);
  }

  // .agv_mon.AgvInfor.AgvBat agvbat = 5;
  if (this->has_agvbat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::agvbat(this), target, stream);
  }

  // .agv_mon.AgvInfor.AgvLoad agvload = 6;
  if (this->has_agvload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::agvload(this), target, stream);
  }

  // repeated .agv_mon.Param protection = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_protection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_protection(i), target, stream);
  }

  // repeated .agv_mon.Param dev_status = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dev_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_dev_status(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.AgvInfor.AgvReport)
  return target;
}

size_t AgvInfor_AgvReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.AgvInfor.AgvReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agv_mon.Param protection = 7;
  total_size += 1UL * this->_internal_protection_size();
  for (const auto& msg : this->protection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .agv_mon.Param dev_status = 8;
  total_size += 1UL * this->_internal_dev_status_size();
  for (const auto& msg : this->dev_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .agv_mon.AgvInfor.Basic basic = 1;
  if (this->has_basic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basic_);
  }

  // .agv_mon.AgvInfor.AgvTask agvtask = 2;
  if (this->has_agvtask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agvtask_);
  }

  // .agv_mon.AgvInfor.AgvLoc agvloc = 3;
  if (this->has_agvloc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agvloc_);
  }

  // .agv_mon.AgvInfor.AgvSt agvst = 4;
  if (this->has_agvst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agvst_);
  }

  // .agv_mon.AgvInfor.AgvBat agvbat = 5;
  if (this->has_agvbat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agvbat_);
  }

  // .agv_mon.AgvInfor.AgvLoad agvload = 6;
  if (this->has_agvload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agvload_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgvInfor_AgvReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.AgvInfor.AgvReport)
  GOOGLE_DCHECK_NE(&from, this);
  const AgvInfor_AgvReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgvInfor_AgvReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.AgvInfor.AgvReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.AgvInfor.AgvReport)
    MergeFrom(*source);
  }
}

void AgvInfor_AgvReport::MergeFrom(const AgvInfor_AgvReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.AgvInfor.AgvReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  protection_.MergeFrom(from.protection_);
  dev_status_.MergeFrom(from.dev_status_);
  if (from.has_basic()) {
    _internal_mutable_basic()->::agv_mon::AgvInfor_Basic::MergeFrom(from._internal_basic());
  }
  if (from.has_agvtask()) {
    _internal_mutable_agvtask()->::agv_mon::AgvInfor_AgvTask::MergeFrom(from._internal_agvtask());
  }
  if (from.has_agvloc()) {
    _internal_mutable_agvloc()->::agv_mon::AgvInfor_AgvLoc::MergeFrom(from._internal_agvloc());
  }
  if (from.has_agvst()) {
    _internal_mutable_agvst()->::agv_mon::AgvInfor_AgvSt::MergeFrom(from._internal_agvst());
  }
  if (from.has_agvbat()) {
    _internal_mutable_agvbat()->::agv_mon::AgvInfor_AgvBat::MergeFrom(from._internal_agvbat());
  }
  if (from.has_agvload()) {
    _internal_mutable_agvload()->::agv_mon::AgvInfor_AgvLoad::MergeFrom(from._internal_agvload());
  }
}

void AgvInfor_AgvReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.AgvInfor.AgvReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgvInfor_AgvReport::CopyFrom(const AgvInfor_AgvReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.AgvInfor.AgvReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgvInfor_AgvReport::IsInitialized() const {
  return true;
}

void AgvInfor_AgvReport::InternalSwap(AgvInfor_AgvReport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  protection_.InternalSwap(&other->protection_);
  dev_status_.InternalSwap(&other->dev_status_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgvInfor_AgvReport, agvload_)
      + sizeof(AgvInfor_AgvReport::agvload_)
      - PROTOBUF_FIELD_OFFSET(AgvInfor_AgvReport, basic_)>(
          reinterpret_cast<char*>(&basic_),
          reinterpret_cast<char*>(&other->basic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgvInfor_AgvReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AgvInfor_Basic::_Internal {
 public:
};

AgvInfor_Basic::AgvInfor_Basic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.AgvInfor.Basic)
}
AgvInfor_Basic::AgvInfor_Basic(const AgvInfor_Basic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.AgvInfor.Basic)
}

void AgvInfor_Basic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgvInfor_Basic_agv_5fmon_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(beta_));
}

AgvInfor_Basic::~AgvInfor_Basic() {
  // @@protoc_insertion_point(destructor:agv_mon.AgvInfor.Basic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgvInfor_Basic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AgvInfor_Basic::ArenaDtor(void* object) {
  AgvInfor_Basic* _this = reinterpret_cast< AgvInfor_Basic* >(object);
  (void)_this;
}
void AgvInfor_Basic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgvInfor_Basic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgvInfor_Basic& AgvInfor_Basic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgvInfor_Basic_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void AgvInfor_Basic::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.AgvInfor.Basic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty();
  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beta_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(beta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgvInfor_Basic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 area = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agv_mon.AgvInfor.Basic.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version_ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          version_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgvInfor_Basic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.AgvInfor.Basic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ts = 1;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ts(), target);
  }

  // int32 pid = 2;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pid(), target);
  }

  // int32 area = 3;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_area(), target);
  }

  // int32 id = 4;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_id(), target);
  }

  // int32 type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_type(), target);
  }

  // string version = 6;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_mon.AgvInfor.Basic.version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version(), target);
  }

  // int32 version_ts = 7;
  if (this->version_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_version_ts(), target);
  }

  // int32 beta = 8;
  if (this->beta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_beta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.AgvInfor.Basic)
  return target;
}

size_t AgvInfor_Basic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.AgvInfor.Basic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 6;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // int64 ts = 1;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  // int32 pid = 2;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  // int32 area = 3;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  // int32 id = 4;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 version_ts = 7;
  if (this->version_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version_ts());
  }

  // int32 beta = 8;
  if (this->beta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beta());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgvInfor_Basic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.AgvInfor.Basic)
  GOOGLE_DCHECK_NE(&from, this);
  const AgvInfor_Basic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgvInfor_Basic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.AgvInfor.Basic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.AgvInfor.Basic)
    MergeFrom(*source);
  }
}

void AgvInfor_Basic::MergeFrom(const AgvInfor_Basic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.AgvInfor.Basic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.version_ts() != 0) {
    _internal_set_version_ts(from._internal_version_ts());
  }
  if (from.beta() != 0) {
    _internal_set_beta(from._internal_beta());
  }
}

void AgvInfor_Basic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.AgvInfor.Basic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgvInfor_Basic::CopyFrom(const AgvInfor_Basic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.AgvInfor.Basic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgvInfor_Basic::IsInitialized() const {
  return true;
}

void AgvInfor_Basic::InternalSwap(AgvInfor_Basic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgvInfor_Basic, beta_)
      + sizeof(AgvInfor_Basic::beta_)
      - PROTOBUF_FIELD_OFFSET(AgvInfor_Basic, ts_)>(
          reinterpret_cast<char*>(&ts_),
          reinterpret_cast<char*>(&other->ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgvInfor_Basic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AgvInfor_AgvTask::_Internal {
 public:
};

AgvInfor_AgvTask::AgvInfor_AgvTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.AgvInfor.AgvTask)
}
AgvInfor_AgvTask::AgvInfor_AgvTask(const AgvInfor_AgvTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_layer_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(end_layer_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.AgvInfor.AgvTask)
}

void AgvInfor_AgvTask::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&task_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&end_layer_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(end_layer_));
}

AgvInfor_AgvTask::~AgvInfor_AgvTask() {
  // @@protoc_insertion_point(destructor:agv_mon.AgvInfor.AgvTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgvInfor_AgvTask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AgvInfor_AgvTask::ArenaDtor(void* object) {
  AgvInfor_AgvTask* _this = reinterpret_cast< AgvInfor_AgvTask* >(object);
  (void)_this;
}
void AgvInfor_AgvTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgvInfor_AgvTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgvInfor_AgvTask& AgvInfor_AgvTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgvInfor_AgvTask_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void AgvInfor_AgvTask::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.AgvInfor.AgvTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_layer_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(end_layer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgvInfor_AgvTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 task_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          task_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 start_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 end_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 detour_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          detour_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 nxt_sta = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          nxt_sta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 cur_seg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cur_seg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 nxt_seg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          nxt_seg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 start_layer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          start_layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 end_layer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          end_layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgvInfor_AgvTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.AgvInfor.AgvTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 task_id = 1;
  if (this->task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_task_id(), target);
  }

  // int32 task_type = 2;
  if (this->task_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_task_type(), target);
  }

  // sint32 start_id = 3;
  if (this->start_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_start_id(), target);
  }

  // sint32 end_id = 4;
  if (this->end_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_end_id(), target);
  }

  // sint32 detour_id = 5;
  if (this->detour_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_detour_id(), target);
  }

  // sint32 nxt_sta = 6;
  if (this->nxt_sta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_nxt_sta(), target);
  }

  // sint32 cur_seg = 7;
  if (this->cur_seg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_cur_seg(), target);
  }

  // sint32 nxt_seg = 8;
  if (this->nxt_seg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_nxt_seg(), target);
  }

  // sint32 start_layer = 9;
  if (this->start_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(9, this->_internal_start_layer(), target);
  }

  // sint32 end_layer = 10;
  if (this->end_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(10, this->_internal_end_layer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.AgvInfor.AgvTask)
  return target;
}

size_t AgvInfor_AgvTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.AgvInfor.AgvTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_task_id());
  }

  // int32 task_type = 2;
  if (this->task_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_task_type());
  }

  // sint32 start_id = 3;
  if (this->start_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_start_id());
  }

  // sint32 end_id = 4;
  if (this->end_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_end_id());
  }

  // sint32 detour_id = 5;
  if (this->detour_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_detour_id());
  }

  // sint32 nxt_sta = 6;
  if (this->nxt_sta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_nxt_sta());
  }

  // sint32 cur_seg = 7;
  if (this->cur_seg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_cur_seg());
  }

  // sint32 nxt_seg = 8;
  if (this->nxt_seg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_nxt_seg());
  }

  // sint32 start_layer = 9;
  if (this->start_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_start_layer());
  }

  // sint32 end_layer = 10;
  if (this->end_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_end_layer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgvInfor_AgvTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.AgvInfor.AgvTask)
  GOOGLE_DCHECK_NE(&from, this);
  const AgvInfor_AgvTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgvInfor_AgvTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.AgvInfor.AgvTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.AgvInfor.AgvTask)
    MergeFrom(*source);
  }
}

void AgvInfor_AgvTask::MergeFrom(const AgvInfor_AgvTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.AgvInfor.AgvTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from.task_type() != 0) {
    _internal_set_task_type(from._internal_task_type());
  }
  if (from.start_id() != 0) {
    _internal_set_start_id(from._internal_start_id());
  }
  if (from.end_id() != 0) {
    _internal_set_end_id(from._internal_end_id());
  }
  if (from.detour_id() != 0) {
    _internal_set_detour_id(from._internal_detour_id());
  }
  if (from.nxt_sta() != 0) {
    _internal_set_nxt_sta(from._internal_nxt_sta());
  }
  if (from.cur_seg() != 0) {
    _internal_set_cur_seg(from._internal_cur_seg());
  }
  if (from.nxt_seg() != 0) {
    _internal_set_nxt_seg(from._internal_nxt_seg());
  }
  if (from.start_layer() != 0) {
    _internal_set_start_layer(from._internal_start_layer());
  }
  if (from.end_layer() != 0) {
    _internal_set_end_layer(from._internal_end_layer());
  }
}

void AgvInfor_AgvTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.AgvInfor.AgvTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgvInfor_AgvTask::CopyFrom(const AgvInfor_AgvTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.AgvInfor.AgvTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgvInfor_AgvTask::IsInitialized() const {
  return true;
}

void AgvInfor_AgvTask::InternalSwap(AgvInfor_AgvTask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgvInfor_AgvTask, end_layer_)
      + sizeof(AgvInfor_AgvTask::end_layer_)
      - PROTOBUF_FIELD_OFFSET(AgvInfor_AgvTask, task_id_)>(
          reinterpret_cast<char*>(&task_id_),
          reinterpret_cast<char*>(&other->task_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgvInfor_AgvTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AgvInfor_AgvLoc::_Internal {
 public:
  static const ::agv_mon::AgvInfor_COORD& pos(const AgvInfor_AgvLoc* msg);
  static const ::agv_mon::AgvInfor_COORD& nav(const AgvInfor_AgvLoc* msg);
};

const ::agv_mon::AgvInfor_COORD&
AgvInfor_AgvLoc::_Internal::pos(const AgvInfor_AgvLoc* msg) {
  return *msg->pos_;
}
const ::agv_mon::AgvInfor_COORD&
AgvInfor_AgvLoc::_Internal::nav(const AgvInfor_AgvLoc* msg) {
  return *msg->nav_;
}
AgvInfor_AgvLoc::AgvInfor_AgvLoc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reflect_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.AgvInfor.AgvLoc)
}
AgvInfor_AgvLoc::AgvInfor_AgvLoc(const AgvInfor_AgvLoc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reflect_id_(from.reflect_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::agv_mon::AgvInfor_COORD(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_nav()) {
    nav_ = new ::agv_mon::AgvInfor_COORD(*from.nav_);
  } else {
    nav_ = nullptr;
  }
  ::memcpy(&pos_ang_, &from.pos_ang_,
    static_cast<size_t>(reinterpret_cast<char*>(&sta_limit_) -
    reinterpret_cast<char*>(&pos_ang_)) + sizeof(sta_limit_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.AgvInfor.AgvLoc)
}

void AgvInfor_AgvLoc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgvInfor_AgvLoc_agv_5fmon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sta_limit_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(sta_limit_));
}

AgvInfor_AgvLoc::~AgvInfor_AgvLoc() {
  // @@protoc_insertion_point(destructor:agv_mon.AgvInfor.AgvLoc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgvInfor_AgvLoc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete nav_;
}

void AgvInfor_AgvLoc::ArenaDtor(void* object) {
  AgvInfor_AgvLoc* _this = reinterpret_cast< AgvInfor_AgvLoc* >(object);
  (void)_this;
}
void AgvInfor_AgvLoc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgvInfor_AgvLoc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgvInfor_AgvLoc& AgvInfor_AgvLoc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgvInfor_AgvLoc_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void AgvInfor_AgvLoc::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.AgvInfor.AgvLoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reflect_id_.Clear();
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArena() == nullptr && nav_ != nullptr) {
    delete nav_;
  }
  nav_ = nullptr;
  ::memset(&pos_ang_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sta_limit_) -
      reinterpret_cast<char*>(&pos_ang_)) + sizeof(sta_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgvInfor_AgvLoc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agv_mon.AgvInfor.COORD pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agv_mon.AgvInfor.COORD nav = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nav(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pos_ang = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          pos_ang_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // sint32 cur_sta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cur_sta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 see_reflect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          see_reflect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 use_reflect = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          use_reflect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 reflect_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_reflect_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_reflect_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 in_lift = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          in_lift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 floor = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 bind_area = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          bind_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sta_limit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          sta_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgvInfor_AgvLoc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.AgvInfor.AgvLoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agv_mon.AgvInfor.COORD pos = 1;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // .agv_mon.AgvInfor.COORD nav = 2;
  if (this->has_nav()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nav(this), target, stream);
  }

  // float pos_ang = 3;
  if (!(this->pos_ang() <= 0 && this->pos_ang() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pos_ang(), target);
  }

  // sint32 cur_sta = 4;
  if (this->cur_sta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_cur_sta(), target);
  }

  // sint32 see_reflect = 5;
  if (this->see_reflect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_see_reflect(), target);
  }

  // sint32 use_reflect = 6;
  if (this->use_reflect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_use_reflect(), target);
  }

  // repeated int32 reflect_id = 7;
  {
    int byte_size = _reflect_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_reflect_id(), byte_size, target);
    }
  }

  // int32 in_lift = 8;
  if (this->in_lift() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_in_lift(), target);
  }

  // int32 floor = 9;
  if (this->floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_floor(), target);
  }

  // sint32 bind_area = 10;
  if (this->bind_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(10, this->_internal_bind_area(), target);
  }

  // sint32 sta_limit = 11;
  if (this->sta_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(11, this->_internal_sta_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.AgvInfor.AgvLoc)
  return target;
}

size_t AgvInfor_AgvLoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.AgvInfor.AgvLoc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 reflect_id = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->reflect_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _reflect_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .agv_mon.AgvInfor.COORD pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .agv_mon.AgvInfor.COORD nav = 2;
  if (this->has_nav()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nav_);
  }

  // float pos_ang = 3;
  if (!(this->pos_ang() <= 0 && this->pos_ang() >= 0)) {
    total_size += 1 + 4;
  }

  // sint32 cur_sta = 4;
  if (this->cur_sta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_cur_sta());
  }

  // sint32 see_reflect = 5;
  if (this->see_reflect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_see_reflect());
  }

  // sint32 use_reflect = 6;
  if (this->use_reflect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_use_reflect());
  }

  // int32 in_lift = 8;
  if (this->in_lift() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_in_lift());
  }

  // int32 floor = 9;
  if (this->floor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_floor());
  }

  // sint32 bind_area = 10;
  if (this->bind_area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_bind_area());
  }

  // sint32 sta_limit = 11;
  if (this->sta_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sta_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgvInfor_AgvLoc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.AgvInfor.AgvLoc)
  GOOGLE_DCHECK_NE(&from, this);
  const AgvInfor_AgvLoc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgvInfor_AgvLoc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.AgvInfor.AgvLoc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.AgvInfor.AgvLoc)
    MergeFrom(*source);
  }
}

void AgvInfor_AgvLoc::MergeFrom(const AgvInfor_AgvLoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.AgvInfor.AgvLoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reflect_id_.MergeFrom(from.reflect_id_);
  if (from.has_pos()) {
    _internal_mutable_pos()->::agv_mon::AgvInfor_COORD::MergeFrom(from._internal_pos());
  }
  if (from.has_nav()) {
    _internal_mutable_nav()->::agv_mon::AgvInfor_COORD::MergeFrom(from._internal_nav());
  }
  if (!(from.pos_ang() <= 0 && from.pos_ang() >= 0)) {
    _internal_set_pos_ang(from._internal_pos_ang());
  }
  if (from.cur_sta() != 0) {
    _internal_set_cur_sta(from._internal_cur_sta());
  }
  if (from.see_reflect() != 0) {
    _internal_set_see_reflect(from._internal_see_reflect());
  }
  if (from.use_reflect() != 0) {
    _internal_set_use_reflect(from._internal_use_reflect());
  }
  if (from.in_lift() != 0) {
    _internal_set_in_lift(from._internal_in_lift());
  }
  if (from.floor() != 0) {
    _internal_set_floor(from._internal_floor());
  }
  if (from.bind_area() != 0) {
    _internal_set_bind_area(from._internal_bind_area());
  }
  if (from.sta_limit() != 0) {
    _internal_set_sta_limit(from._internal_sta_limit());
  }
}

void AgvInfor_AgvLoc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.AgvInfor.AgvLoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgvInfor_AgvLoc::CopyFrom(const AgvInfor_AgvLoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.AgvInfor.AgvLoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgvInfor_AgvLoc::IsInitialized() const {
  return true;
}

void AgvInfor_AgvLoc::InternalSwap(AgvInfor_AgvLoc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reflect_id_.InternalSwap(&other->reflect_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgvInfor_AgvLoc, sta_limit_)
      + sizeof(AgvInfor_AgvLoc::sta_limit_)
      - PROTOBUF_FIELD_OFFSET(AgvInfor_AgvLoc, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgvInfor_AgvLoc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AgvInfor_AgvSt::_Internal {
 public:
};

AgvInfor_AgvSt::AgvInfor_AgvSt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.AgvInfor.AgvSt)
}
AgvInfor_AgvSt::AgvInfor_AgvSt(const AgvInfor_AgvSt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dir_, &from.dir_,
    static_cast<size_t>(reinterpret_cast<char*>(&speedlimit_) -
    reinterpret_cast<char*>(&dir_)) + sizeof(speedlimit_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.AgvInfor.AgvSt)
}

void AgvInfor_AgvSt::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&dir_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&speedlimit_) -
      reinterpret_cast<char*>(&dir_)) + sizeof(speedlimit_));
}

AgvInfor_AgvSt::~AgvInfor_AgvSt() {
  // @@protoc_insertion_point(destructor:agv_mon.AgvInfor.AgvSt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgvInfor_AgvSt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AgvInfor_AgvSt::ArenaDtor(void* object) {
  AgvInfor_AgvSt* _this = reinterpret_cast< AgvInfor_AgvSt* >(object);
  (void)_this;
}
void AgvInfor_AgvSt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgvInfor_AgvSt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgvInfor_AgvSt& AgvInfor_AgvSt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgvInfor_AgvSt_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void AgvInfor_AgvSt::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.AgvInfor.AgvSt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dir_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speedlimit_) -
      reinterpret_cast<char*>(&dir_)) + sizeof(speedlimit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgvInfor_AgvSt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 dir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 softstop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          softstop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 speedlimit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          speedlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgvInfor_AgvSt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.AgvInfor.AgvSt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 dir = 1;
  if (this->dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_dir(), target);
  }

  // int32 speed = 2;
  if (this->speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_speed(), target);
  }

  // int32 state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_state(), target);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_status(), target);
  }

  // sint32 softstop = 5;
  if (this->softstop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_softstop(), target);
  }

  // sint32 error = 6;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_error(), target);
  }

  // sint32 speedlimit = 7;
  if (this->speedlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_speedlimit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.AgvInfor.AgvSt)
  return target;
}

size_t AgvInfor_AgvSt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.AgvInfor.AgvSt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 dir = 1;
  if (this->dir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_dir());
  }

  // int32 speed = 2;
  if (this->speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_speed());
  }

  // int32 state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // sint32 softstop = 5;
  if (this->softstop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_softstop());
  }

  // sint32 error = 6;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_error());
  }

  // sint32 speedlimit = 7;
  if (this->speedlimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_speedlimit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgvInfor_AgvSt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.AgvInfor.AgvSt)
  GOOGLE_DCHECK_NE(&from, this);
  const AgvInfor_AgvSt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgvInfor_AgvSt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.AgvInfor.AgvSt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.AgvInfor.AgvSt)
    MergeFrom(*source);
  }
}

void AgvInfor_AgvSt::MergeFrom(const AgvInfor_AgvSt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.AgvInfor.AgvSt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dir() != 0) {
    _internal_set_dir(from._internal_dir());
  }
  if (from.speed() != 0) {
    _internal_set_speed(from._internal_speed());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.softstop() != 0) {
    _internal_set_softstop(from._internal_softstop());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.speedlimit() != 0) {
    _internal_set_speedlimit(from._internal_speedlimit());
  }
}

void AgvInfor_AgvSt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.AgvInfor.AgvSt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgvInfor_AgvSt::CopyFrom(const AgvInfor_AgvSt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.AgvInfor.AgvSt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgvInfor_AgvSt::IsInitialized() const {
  return true;
}

void AgvInfor_AgvSt::InternalSwap(AgvInfor_AgvSt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgvInfor_AgvSt, speedlimit_)
      + sizeof(AgvInfor_AgvSt::speedlimit_)
      - PROTOBUF_FIELD_OFFSET(AgvInfor_AgvSt, dir_)>(
          reinterpret_cast<char*>(&dir_),
          reinterpret_cast<char*>(&other->dir_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgvInfor_AgvSt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AgvInfor_AgvBat::_Internal {
 public:
};

AgvInfor_AgvBat::AgvInfor_AgvBat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.AgvInfor.AgvBat)
}
AgvInfor_AgvBat::AgvInfor_AgvBat(const AgvInfor_AgvBat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&battery_, &from.battery_,
    static_cast<size_t>(reinterpret_cast<char*>(&chargingtime_) -
    reinterpret_cast<char*>(&battery_)) + sizeof(chargingtime_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.AgvInfor.AgvBat)
}

void AgvInfor_AgvBat::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&battery_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chargingtime_) -
      reinterpret_cast<char*>(&battery_)) + sizeof(chargingtime_));
}

AgvInfor_AgvBat::~AgvInfor_AgvBat() {
  // @@protoc_insertion_point(destructor:agv_mon.AgvInfor.AgvBat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgvInfor_AgvBat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AgvInfor_AgvBat::ArenaDtor(void* object) {
  AgvInfor_AgvBat* _this = reinterpret_cast< AgvInfor_AgvBat* >(object);
  (void)_this;
}
void AgvInfor_AgvBat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgvInfor_AgvBat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgvInfor_AgvBat& AgvInfor_AgvBat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgvInfor_AgvBat_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void AgvInfor_AgvBat::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.AgvInfor.AgvBat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&battery_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chargingtime_) -
      reinterpret_cast<char*>(&battery_)) + sizeof(chargingtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgvInfor_AgvBat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float battery = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          battery_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // sint32 chargingtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chargingtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgvInfor_AgvBat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.AgvInfor.AgvBat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float battery = 1;
  if (!(this->battery() <= 0 && this->battery() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_battery(), target);
  }

  // sint32 chargingtime = 2;
  if (this->chargingtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_chargingtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.AgvInfor.AgvBat)
  return target;
}

size_t AgvInfor_AgvBat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.AgvInfor.AgvBat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float battery = 1;
  if (!(this->battery() <= 0 && this->battery() >= 0)) {
    total_size += 1 + 4;
  }

  // sint32 chargingtime = 2;
  if (this->chargingtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_chargingtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgvInfor_AgvBat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.AgvInfor.AgvBat)
  GOOGLE_DCHECK_NE(&from, this);
  const AgvInfor_AgvBat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgvInfor_AgvBat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.AgvInfor.AgvBat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.AgvInfor.AgvBat)
    MergeFrom(*source);
  }
}

void AgvInfor_AgvBat::MergeFrom(const AgvInfor_AgvBat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.AgvInfor.AgvBat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.battery() <= 0 && from.battery() >= 0)) {
    _internal_set_battery(from._internal_battery());
  }
  if (from.chargingtime() != 0) {
    _internal_set_chargingtime(from._internal_chargingtime());
  }
}

void AgvInfor_AgvBat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.AgvInfor.AgvBat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgvInfor_AgvBat::CopyFrom(const AgvInfor_AgvBat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.AgvInfor.AgvBat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgvInfor_AgvBat::IsInitialized() const {
  return true;
}

void AgvInfor_AgvBat::InternalSwap(AgvInfor_AgvBat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgvInfor_AgvBat, chargingtime_)
      + sizeof(AgvInfor_AgvBat::chargingtime_)
      - PROTOBUF_FIELD_OFFSET(AgvInfor_AgvBat, battery_)>(
          reinterpret_cast<char*>(&battery_),
          reinterpret_cast<char*>(&other->battery_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgvInfor_AgvBat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AgvInfor_AgvLoad::_Internal {
 public:
};

AgvInfor_AgvLoad::AgvInfor_AgvLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.AgvInfor.AgvLoad)
}
AgvInfor_AgvLoad::AgvInfor_AgvLoad(const AgvInfor_AgvLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&load_, &from.load_,
    static_cast<size_t>(reinterpret_cast<char*>(&hyd_height_) -
    reinterpret_cast<char*>(&load_)) + sizeof(hyd_height_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.AgvInfor.AgvLoad)
}

void AgvInfor_AgvLoad::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&load_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&hyd_height_) -
      reinterpret_cast<char*>(&load_)) + sizeof(hyd_height_));
}

AgvInfor_AgvLoad::~AgvInfor_AgvLoad() {
  // @@protoc_insertion_point(destructor:agv_mon.AgvInfor.AgvLoad)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgvInfor_AgvLoad::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AgvInfor_AgvLoad::ArenaDtor(void* object) {
  AgvInfor_AgvLoad* _this = reinterpret_cast< AgvInfor_AgvLoad* >(object);
  (void)_this;
}
void AgvInfor_AgvLoad::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgvInfor_AgvLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgvInfor_AgvLoad& AgvInfor_AgvLoad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgvInfor_AgvLoad_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void AgvInfor_AgvLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.AgvInfor.AgvLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&load_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hyd_height_) -
      reinterpret_cast<char*>(&load_)) + sizeof(hyd_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgvInfor_AgvLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 load = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          load_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hyd_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hyd_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgvInfor_AgvLoad::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.AgvInfor.AgvLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 load = 1;
  if (this->load() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_load(), target);
  }

  // int32 hyd_height = 2;
  if (this->hyd_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hyd_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.AgvInfor.AgvLoad)
  return target;
}

size_t AgvInfor_AgvLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.AgvInfor.AgvLoad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 load = 1;
  if (this->load() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_load());
  }

  // int32 hyd_height = 2;
  if (this->hyd_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hyd_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgvInfor_AgvLoad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.AgvInfor.AgvLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const AgvInfor_AgvLoad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgvInfor_AgvLoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.AgvInfor.AgvLoad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.AgvInfor.AgvLoad)
    MergeFrom(*source);
  }
}

void AgvInfor_AgvLoad::MergeFrom(const AgvInfor_AgvLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.AgvInfor.AgvLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.load() != 0) {
    _internal_set_load(from._internal_load());
  }
  if (from.hyd_height() != 0) {
    _internal_set_hyd_height(from._internal_hyd_height());
  }
}

void AgvInfor_AgvLoad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.AgvInfor.AgvLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgvInfor_AgvLoad::CopyFrom(const AgvInfor_AgvLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.AgvInfor.AgvLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgvInfor_AgvLoad::IsInitialized() const {
  return true;
}

void AgvInfor_AgvLoad::InternalSwap(AgvInfor_AgvLoad* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgvInfor_AgvLoad, hyd_height_)
      + sizeof(AgvInfor_AgvLoad::hyd_height_)
      - PROTOBUF_FIELD_OFFSET(AgvInfor_AgvLoad, load_)>(
          reinterpret_cast<char*>(&load_),
          reinterpret_cast<char*>(&other->load_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgvInfor_AgvLoad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AgvInfor_AvoidInfo::_Internal {
 public:
};

AgvInfor_AvoidInfo::AgvInfor_AvoidInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agvoutline_(arena),
  goodsoutline_(arena),
  occupypoint_(arena),
  scanpoint_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.AgvInfor.AvoidInfo)
}
AgvInfor_AvoidInfo::AgvInfor_AvoidInfo(const AgvInfor_AvoidInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agvoutline_(from.agvoutline_),
      goodsoutline_(from.goodsoutline_),
      occupypoint_(from.occupypoint_),
      scanpoint_(from.scanpoint_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stopstatus_, &from.stopstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&confpoint_) -
    reinterpret_cast<char*>(&stopstatus_)) + sizeof(confpoint_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.AgvInfor.AvoidInfo)
}

void AgvInfor_AvoidInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgvInfor_AvoidInfo_agv_5fmon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&stopstatus_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&confpoint_) -
      reinterpret_cast<char*>(&stopstatus_)) + sizeof(confpoint_));
}

AgvInfor_AvoidInfo::~AgvInfor_AvoidInfo() {
  // @@protoc_insertion_point(destructor:agv_mon.AgvInfor.AvoidInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgvInfor_AvoidInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AgvInfor_AvoidInfo::ArenaDtor(void* object) {
  AgvInfor_AvoidInfo* _this = reinterpret_cast< AgvInfor_AvoidInfo* >(object);
  (void)_this;
}
void AgvInfor_AvoidInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgvInfor_AvoidInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgvInfor_AvoidInfo& AgvInfor_AvoidInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgvInfor_AvoidInfo_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void AgvInfor_AvoidInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.AgvInfor.AvoidInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agvoutline_.Clear();
  goodsoutline_.Clear();
  occupypoint_.Clear();
  scanpoint_.Clear();
  ::memset(&stopstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confpoint_) -
      reinterpret_cast<char*>(&stopstatus_)) + sizeof(confpoint_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgvInfor_AvoidInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .agv_mon.AgvInfor.COORD agvoutline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agvoutline(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .agv_mon.AgvInfor.COORD goodsoutline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_goodsoutline(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 occupypoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_occupypoint(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_occupypoint(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 scanpoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_scanpoint(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_scanpoint(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 stopStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          stopstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 stopLevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          stoplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 stopByAGVId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          stopbyagvid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 stopReason = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          stopreason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 speedLevel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          speedlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 speedByAGVId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          speedbyagvid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 speedReason = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          speedreason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 outLineType = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          outlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 confPoint = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          confpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgvInfor_AvoidInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.AgvInfor.AvoidInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .agv_mon.AgvInfor.COORD agvoutline = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agvoutline_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agvoutline(i), target, stream);
  }

  // repeated .agv_mon.AgvInfor.COORD goodsoutline = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_goodsoutline_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_goodsoutline(i), target, stream);
  }

  // repeated int32 occupypoint = 3;
  {
    int byte_size = _occupypoint_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_occupypoint(), byte_size, target);
    }
  }

  // repeated int32 scanpoint = 4;
  {
    int byte_size = _scanpoint_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_scanpoint(), byte_size, target);
    }
  }

  // sint32 stopStatus = 5;
  if (this->stopstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_stopstatus(), target);
  }

  // sint32 stopLevel = 6;
  if (this->stoplevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_stoplevel(), target);
  }

  // sint32 stopByAGVId = 7;
  if (this->stopbyagvid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_stopbyagvid(), target);
  }

  // sint32 stopReason = 8;
  if (this->stopreason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_stopreason(), target);
  }

  // sint32 speedLevel = 9;
  if (this->speedlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(9, this->_internal_speedlevel(), target);
  }

  // sint32 speedByAGVId = 10;
  if (this->speedbyagvid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(10, this->_internal_speedbyagvid(), target);
  }

  // sint32 speedReason = 11;
  if (this->speedreason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(11, this->_internal_speedreason(), target);
  }

  // sint32 outLineType = 12;
  if (this->outlinetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(12, this->_internal_outlinetype(), target);
  }

  // sint32 confPoint = 13;
  if (this->confpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(13, this->_internal_confpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.AgvInfor.AvoidInfo)
  return target;
}

size_t AgvInfor_AvoidInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.AgvInfor.AvoidInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agv_mon.AgvInfor.COORD agvoutline = 1;
  total_size += 1UL * this->_internal_agvoutline_size();
  for (const auto& msg : this->agvoutline_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .agv_mon.AgvInfor.COORD goodsoutline = 2;
  total_size += 1UL * this->_internal_goodsoutline_size();
  for (const auto& msg : this->goodsoutline_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 occupypoint = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->occupypoint_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _occupypoint_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 scanpoint = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->scanpoint_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _scanpoint_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // sint32 stopStatus = 5;
  if (this->stopstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_stopstatus());
  }

  // sint32 stopLevel = 6;
  if (this->stoplevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_stoplevel());
  }

  // sint32 stopByAGVId = 7;
  if (this->stopbyagvid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_stopbyagvid());
  }

  // sint32 stopReason = 8;
  if (this->stopreason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_stopreason());
  }

  // sint32 speedLevel = 9;
  if (this->speedlevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_speedlevel());
  }

  // sint32 speedByAGVId = 10;
  if (this->speedbyagvid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_speedbyagvid());
  }

  // sint32 speedReason = 11;
  if (this->speedreason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_speedreason());
  }

  // sint32 outLineType = 12;
  if (this->outlinetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_outlinetype());
  }

  // sint32 confPoint = 13;
  if (this->confpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_confpoint());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgvInfor_AvoidInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.AgvInfor.AvoidInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AgvInfor_AvoidInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgvInfor_AvoidInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.AgvInfor.AvoidInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.AgvInfor.AvoidInfo)
    MergeFrom(*source);
  }
}

void AgvInfor_AvoidInfo::MergeFrom(const AgvInfor_AvoidInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.AgvInfor.AvoidInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agvoutline_.MergeFrom(from.agvoutline_);
  goodsoutline_.MergeFrom(from.goodsoutline_);
  occupypoint_.MergeFrom(from.occupypoint_);
  scanpoint_.MergeFrom(from.scanpoint_);
  if (from.stopstatus() != 0) {
    _internal_set_stopstatus(from._internal_stopstatus());
  }
  if (from.stoplevel() != 0) {
    _internal_set_stoplevel(from._internal_stoplevel());
  }
  if (from.stopbyagvid() != 0) {
    _internal_set_stopbyagvid(from._internal_stopbyagvid());
  }
  if (from.stopreason() != 0) {
    _internal_set_stopreason(from._internal_stopreason());
  }
  if (from.speedlevel() != 0) {
    _internal_set_speedlevel(from._internal_speedlevel());
  }
  if (from.speedbyagvid() != 0) {
    _internal_set_speedbyagvid(from._internal_speedbyagvid());
  }
  if (from.speedreason() != 0) {
    _internal_set_speedreason(from._internal_speedreason());
  }
  if (from.outlinetype() != 0) {
    _internal_set_outlinetype(from._internal_outlinetype());
  }
  if (from.confpoint() != 0) {
    _internal_set_confpoint(from._internal_confpoint());
  }
}

void AgvInfor_AvoidInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.AgvInfor.AvoidInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgvInfor_AvoidInfo::CopyFrom(const AgvInfor_AvoidInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.AgvInfor.AvoidInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgvInfor_AvoidInfo::IsInitialized() const {
  return true;
}

void AgvInfor_AvoidInfo::InternalSwap(AgvInfor_AvoidInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agvoutline_.InternalSwap(&other->agvoutline_);
  goodsoutline_.InternalSwap(&other->goodsoutline_);
  occupypoint_.InternalSwap(&other->occupypoint_);
  scanpoint_.InternalSwap(&other->scanpoint_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgvInfor_AvoidInfo, confpoint_)
      + sizeof(AgvInfor_AvoidInfo::confpoint_)
      - PROTOBUF_FIELD_OFFSET(AgvInfor_AvoidInfo, stopstatus_)>(
          reinterpret_cast<char*>(&stopstatus_),
          reinterpret_cast<char*>(&other->stopstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgvInfor_AvoidInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AgvInfor_TimeInfo::_Internal {
 public:
};

AgvInfor_TimeInfo::AgvInfor_TimeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.AgvInfor.TimeInfo)
}
AgvInfor_TimeInfo::AgvInfor_TimeInfo(const AgvInfor_TimeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&idle_wait_ts_, &from.idle_wait_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&warning_on_ts_) -
    reinterpret_cast<char*>(&idle_wait_ts_)) + sizeof(warning_on_ts_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.AgvInfor.TimeInfo)
}

void AgvInfor_TimeInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&idle_wait_ts_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&warning_on_ts_) -
      reinterpret_cast<char*>(&idle_wait_ts_)) + sizeof(warning_on_ts_));
}

AgvInfor_TimeInfo::~AgvInfor_TimeInfo() {
  // @@protoc_insertion_point(destructor:agv_mon.AgvInfor.TimeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgvInfor_TimeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AgvInfor_TimeInfo::ArenaDtor(void* object) {
  AgvInfor_TimeInfo* _this = reinterpret_cast< AgvInfor_TimeInfo* >(object);
  (void)_this;
}
void AgvInfor_TimeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgvInfor_TimeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgvInfor_TimeInfo& AgvInfor_TimeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgvInfor_TimeInfo_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void AgvInfor_TimeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.AgvInfor.TimeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&idle_wait_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warning_on_ts_) -
      reinterpret_cast<char*>(&idle_wait_ts_)) + sizeof(warning_on_ts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgvInfor_TimeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idle_wait_ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idle_wait_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avoid_set_ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          avoid_set_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 manual_on_ts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          manual_on_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 softstop_on_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          softstop_on_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 warning_on_ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          warning_on_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgvInfor_TimeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.AgvInfor.TimeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idle_wait_ts = 1;
  if (this->idle_wait_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_idle_wait_ts(), target);
  }

  // int32 avoid_set_ts = 2;
  if (this->avoid_set_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_avoid_set_ts(), target);
  }

  // int32 manual_on_ts = 3;
  if (this->manual_on_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_manual_on_ts(), target);
  }

  // int32 softstop_on_ts = 4;
  if (this->softstop_on_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_softstop_on_ts(), target);
  }

  // int32 warning_on_ts = 5;
  if (this->warning_on_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_warning_on_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.AgvInfor.TimeInfo)
  return target;
}

size_t AgvInfor_TimeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.AgvInfor.TimeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 idle_wait_ts = 1;
  if (this->idle_wait_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idle_wait_ts());
  }

  // int32 avoid_set_ts = 2;
  if (this->avoid_set_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avoid_set_ts());
  }

  // int32 manual_on_ts = 3;
  if (this->manual_on_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_manual_on_ts());
  }

  // int32 softstop_on_ts = 4;
  if (this->softstop_on_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_softstop_on_ts());
  }

  // int32 warning_on_ts = 5;
  if (this->warning_on_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_warning_on_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgvInfor_TimeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.AgvInfor.TimeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AgvInfor_TimeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgvInfor_TimeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.AgvInfor.TimeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.AgvInfor.TimeInfo)
    MergeFrom(*source);
  }
}

void AgvInfor_TimeInfo::MergeFrom(const AgvInfor_TimeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.AgvInfor.TimeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.idle_wait_ts() != 0) {
    _internal_set_idle_wait_ts(from._internal_idle_wait_ts());
  }
  if (from.avoid_set_ts() != 0) {
    _internal_set_avoid_set_ts(from._internal_avoid_set_ts());
  }
  if (from.manual_on_ts() != 0) {
    _internal_set_manual_on_ts(from._internal_manual_on_ts());
  }
  if (from.softstop_on_ts() != 0) {
    _internal_set_softstop_on_ts(from._internal_softstop_on_ts());
  }
  if (from.warning_on_ts() != 0) {
    _internal_set_warning_on_ts(from._internal_warning_on_ts());
  }
}

void AgvInfor_TimeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.AgvInfor.TimeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgvInfor_TimeInfo::CopyFrom(const AgvInfor_TimeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.AgvInfor.TimeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgvInfor_TimeInfo::IsInitialized() const {
  return true;
}

void AgvInfor_TimeInfo::InternalSwap(AgvInfor_TimeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgvInfor_TimeInfo, warning_on_ts_)
      + sizeof(AgvInfor_TimeInfo::warning_on_ts_)
      - PROTOBUF_FIELD_OFFSET(AgvInfor_TimeInfo, idle_wait_ts_)>(
          reinterpret_cast<char*>(&idle_wait_ts_),
          reinterpret_cast<char*>(&other->idle_wait_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgvInfor_TimeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AgvInfor_COORD::_Internal {
 public:
};

AgvInfor_COORD::AgvInfor_COORD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.AgvInfor.COORD)
}
AgvInfor_COORD::AgvInfor_COORD(const AgvInfor_COORD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.AgvInfor.COORD)
}

void AgvInfor_COORD::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

AgvInfor_COORD::~AgvInfor_COORD() {
  // @@protoc_insertion_point(destructor:agv_mon.AgvInfor.COORD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgvInfor_COORD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AgvInfor_COORD::ArenaDtor(void* object) {
  AgvInfor_COORD* _this = reinterpret_cast< AgvInfor_COORD* >(object);
  (void)_this;
}
void AgvInfor_COORD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgvInfor_COORD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgvInfor_COORD& AgvInfor_COORD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgvInfor_COORD_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void AgvInfor_COORD::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.AgvInfor.COORD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgvInfor_COORD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgvInfor_COORD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.AgvInfor.COORD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_x(), target);
  }

  // sint32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.AgvInfor.COORD)
  return target;
}

size_t AgvInfor_COORD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.AgvInfor.COORD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_x());
  }

  // sint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgvInfor_COORD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.AgvInfor.COORD)
  GOOGLE_DCHECK_NE(&from, this);
  const AgvInfor_COORD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgvInfor_COORD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.AgvInfor.COORD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.AgvInfor.COORD)
    MergeFrom(*source);
  }
}

void AgvInfor_COORD::MergeFrom(const AgvInfor_COORD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.AgvInfor.COORD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
}

void AgvInfor_COORD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.AgvInfor.COORD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgvInfor_COORD::CopyFrom(const AgvInfor_COORD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.AgvInfor.COORD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgvInfor_COORD::IsInitialized() const {
  return true;
}

void AgvInfor_COORD::InternalSwap(AgvInfor_COORD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgvInfor_COORD, y_)
      + sizeof(AgvInfor_COORD::y_)
      - PROTOBUF_FIELD_OFFSET(AgvInfor_COORD, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgvInfor_COORD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AgvInfor::_Internal {
 public:
  static const ::agv_mon::AgvInfor_AgvReport& agvreport(const AgvInfor* msg);
  static const ::agv_mon::AgvInfor_AvoidInfo& avoidinfo(const AgvInfor* msg);
  static const ::agv_mon::AgvInfor_TimeInfo& timeinfo(const AgvInfor* msg);
};

const ::agv_mon::AgvInfor_AgvReport&
AgvInfor::_Internal::agvreport(const AgvInfor* msg) {
  return *msg->agvreport_;
}
const ::agv_mon::AgvInfor_AvoidInfo&
AgvInfor::_Internal::avoidinfo(const AgvInfor* msg) {
  return *msg->avoidinfo_;
}
const ::agv_mon::AgvInfor_TimeInfo&
AgvInfor::_Internal::timeinfo(const AgvInfor* msg) {
  return *msg->timeinfo_;
}
AgvInfor::AgvInfor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  route_id_(arena),
  routepoint_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.AgvInfor)
}
AgvInfor::AgvInfor(const AgvInfor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      route_id_(from.route_id_),
      routepoint_(from.routepoint_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_agvreport()) {
    agvreport_ = new ::agv_mon::AgvInfor_AgvReport(*from.agvreport_);
  } else {
    agvreport_ = nullptr;
  }
  if (from._internal_has_avoidinfo()) {
    avoidinfo_ = new ::agv_mon::AgvInfor_AvoidInfo(*from.avoidinfo_);
  } else {
    avoidinfo_ = nullptr;
  }
  if (from._internal_has_timeinfo()) {
    timeinfo_ = new ::agv_mon::AgvInfor_TimeInfo(*from.timeinfo_);
  } else {
    timeinfo_ = nullptr;
  }
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&ol_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(ol_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.AgvInfor)
}

void AgvInfor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgvInfor_agv_5fmon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&agvreport_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ol_) -
      reinterpret_cast<char*>(&agvreport_)) + sizeof(ol_));
}

AgvInfor::~AgvInfor() {
  // @@protoc_insertion_point(destructor:agv_mon.AgvInfor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgvInfor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete agvreport_;
  if (this != internal_default_instance()) delete avoidinfo_;
  if (this != internal_default_instance()) delete timeinfo_;
}

void AgvInfor::ArenaDtor(void* object) {
  AgvInfor* _this = reinterpret_cast< AgvInfor* >(object);
  (void)_this;
}
void AgvInfor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgvInfor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgvInfor& AgvInfor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgvInfor_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void AgvInfor::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.AgvInfor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_id_.Clear();
  routepoint_.Clear();
  if (GetArena() == nullptr && agvreport_ != nullptr) {
    delete agvreport_;
  }
  agvreport_ = nullptr;
  if (GetArena() == nullptr && avoidinfo_ != nullptr) {
    delete avoidinfo_;
  }
  avoidinfo_ = nullptr;
  if (GetArena() == nullptr && timeinfo_ != nullptr) {
    delete timeinfo_;
  }
  timeinfo_ = nullptr;
  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ol_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(ol_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgvInfor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agv_mon.AgvInfor.AgvReport agvreport = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_agvreport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agv_mon.AgvInfor.AvoidInfo avoidinfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_avoidinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agv_mon.AgvInfor.TimeInfo timeinfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 route_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_route_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_route_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .agv_mon.RoutePoint routepoint = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routepoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgvInfor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.AgvInfor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ip = 1;
  if (this->ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ip(), target);
  }

  // int64 ts = 2;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_ts(), target);
  }

  // int32 ol = 3;
  if (this->ol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ol(), target);
  }

  // .agv_mon.AgvInfor.AgvReport agvreport = 4;
  if (this->has_agvreport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::agvreport(this), target, stream);
  }

  // .agv_mon.AgvInfor.AvoidInfo avoidinfo = 5;
  if (this->has_avoidinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::avoidinfo(this), target, stream);
  }

  // .agv_mon.AgvInfor.TimeInfo timeinfo = 6;
  if (this->has_timeinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::timeinfo(this), target, stream);
  }

  // repeated int32 route_id = 7;
  {
    int byte_size = _route_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_route_id(), byte_size, target);
    }
  }

  // repeated .agv_mon.RoutePoint routepoint = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routepoint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_routepoint(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.AgvInfor)
  return target;
}

size_t AgvInfor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.AgvInfor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 route_id = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->route_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _route_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .agv_mon.RoutePoint routepoint = 8;
  total_size += 1UL * this->_internal_routepoint_size();
  for (const auto& msg : this->routepoint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .agv_mon.AgvInfor.AgvReport agvreport = 4;
  if (this->has_agvreport()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agvreport_);
  }

  // .agv_mon.AgvInfor.AvoidInfo avoidinfo = 5;
  if (this->has_avoidinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *avoidinfo_);
  }

  // .agv_mon.AgvInfor.TimeInfo timeinfo = 6;
  if (this->has_timeinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timeinfo_);
  }

  // int64 ts = 2;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  // uint32 ip = 1;
  if (this->ip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ip());
  }

  // int32 ol = 3;
  if (this->ol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ol());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgvInfor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.AgvInfor)
  GOOGLE_DCHECK_NE(&from, this);
  const AgvInfor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgvInfor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.AgvInfor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.AgvInfor)
    MergeFrom(*source);
  }
}

void AgvInfor::MergeFrom(const AgvInfor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.AgvInfor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  route_id_.MergeFrom(from.route_id_);
  routepoint_.MergeFrom(from.routepoint_);
  if (from.has_agvreport()) {
    _internal_mutable_agvreport()->::agv_mon::AgvInfor_AgvReport::MergeFrom(from._internal_agvreport());
  }
  if (from.has_avoidinfo()) {
    _internal_mutable_avoidinfo()->::agv_mon::AgvInfor_AvoidInfo::MergeFrom(from._internal_avoidinfo());
  }
  if (from.has_timeinfo()) {
    _internal_mutable_timeinfo()->::agv_mon::AgvInfor_TimeInfo::MergeFrom(from._internal_timeinfo());
  }
  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
  if (from.ip() != 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.ol() != 0) {
    _internal_set_ol(from._internal_ol());
  }
}

void AgvInfor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.AgvInfor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgvInfor::CopyFrom(const AgvInfor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.AgvInfor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgvInfor::IsInitialized() const {
  return true;
}

void AgvInfor::InternalSwap(AgvInfor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  route_id_.InternalSwap(&other->route_id_);
  routepoint_.InternalSwap(&other->routepoint_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgvInfor, ol_)
      + sizeof(AgvInfor::ol_)
      - PROTOBUF_FIELD_OFFSET(AgvInfor, agvreport_)>(
          reinterpret_cast<char*>(&agvreport_),
          reinterpret_cast<char*>(&other->agvreport_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgvInfor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiftInfor::_Internal {
 public:
};

LiftInfor::LiftInfor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.LiftInfor)
}
LiftInfor::LiftInfor(const LiftInfor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArena());
  }
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&outcall_floor_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(outcall_floor_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.LiftInfor)
}

void LiftInfor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiftInfor_agv_5fmon_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&outcall_floor_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(outcall_floor_));
}

LiftInfor::~LiftInfor() {
  // @@protoc_insertion_point(destructor:agv_mon.LiftInfor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiftInfor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LiftInfor::ArenaDtor(void* object) {
  LiftInfor* _this = reinterpret_cast< LiftInfor* >(object);
  (void)_this;
}
void LiftInfor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiftInfor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiftInfor& LiftInfor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiftInfor_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void LiftInfor::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.LiftInfor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outcall_floor_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(outcall_floor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiftInfor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agv_mon.LiftInfor.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 lift_group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lift_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 lift_idx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lift_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 lift_agv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lift_agv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 startFloor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          startfloor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 endFloor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          endfloor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 curFloor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          curfloor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 openInPlace = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          openinplace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 closeInPlace = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          closeinplace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 idleWait = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          idlewait_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 runSignal = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          runsignal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 incall_floor = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          incall_floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 outcall_floor = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          outcall_floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiftInfor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.LiftInfor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_mon.LiftInfor.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // int64 ts = 2;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_ts(), target);
  }

  // sint32 lift_group = 3;
  if (this->lift_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_lift_group(), target);
  }

  // sint32 lift_idx = 4;
  if (this->lift_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_lift_idx(), target);
  }

  // sint32 lift_agv = 5;
  if (this->lift_agv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_lift_agv(), target);
  }

  // sint32 startFloor = 6;
  if (this->startfloor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_startfloor(), target);
  }

  // sint32 endFloor = 7;
  if (this->endfloor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_endfloor(), target);
  }

  // sint32 curFloor = 8;
  if (this->curfloor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_curfloor(), target);
  }

  // int32 openInPlace = 9;
  if (this->openinplace() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_openinplace(), target);
  }

  // int32 closeInPlace = 10;
  if (this->closeinplace() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_closeinplace(), target);
  }

  // int32 idleWait = 11;
  if (this->idlewait() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_idlewait(), target);
  }

  // int32 runSignal = 12;
  if (this->runsignal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_runsignal(), target);
  }

  // sint64 incall_floor = 13;
  if (this->incall_floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(13, this->_internal_incall_floor(), target);
  }

  // sint64 outcall_floor = 14;
  if (this->outcall_floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(14, this->_internal_outcall_floor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.LiftInfor)
  return target;
}

size_t LiftInfor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.LiftInfor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int64 ts = 2;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  // sint32 lift_group = 3;
  if (this->lift_group() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_lift_group());
  }

  // sint32 lift_idx = 4;
  if (this->lift_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_lift_idx());
  }

  // sint32 lift_agv = 5;
  if (this->lift_agv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_lift_agv());
  }

  // sint32 startFloor = 6;
  if (this->startfloor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_startfloor());
  }

  // sint32 endFloor = 7;
  if (this->endfloor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_endfloor());
  }

  // sint32 curFloor = 8;
  if (this->curfloor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_curfloor());
  }

  // int32 openInPlace = 9;
  if (this->openinplace() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_openinplace());
  }

  // int32 closeInPlace = 10;
  if (this->closeinplace() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_closeinplace());
  }

  // int32 idleWait = 11;
  if (this->idlewait() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idlewait());
  }

  // int32 runSignal = 12;
  if (this->runsignal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_runsignal());
  }

  // sint64 incall_floor = 13;
  if (this->incall_floor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_incall_floor());
  }

  // sint64 outcall_floor = 14;
  if (this->outcall_floor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_outcall_floor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiftInfor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.LiftInfor)
  GOOGLE_DCHECK_NE(&from, this);
  const LiftInfor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiftInfor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.LiftInfor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.LiftInfor)
    MergeFrom(*source);
  }
}

void LiftInfor::MergeFrom(const LiftInfor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.LiftInfor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
  if (from.lift_group() != 0) {
    _internal_set_lift_group(from._internal_lift_group());
  }
  if (from.lift_idx() != 0) {
    _internal_set_lift_idx(from._internal_lift_idx());
  }
  if (from.lift_agv() != 0) {
    _internal_set_lift_agv(from._internal_lift_agv());
  }
  if (from.startfloor() != 0) {
    _internal_set_startfloor(from._internal_startfloor());
  }
  if (from.endfloor() != 0) {
    _internal_set_endfloor(from._internal_endfloor());
  }
  if (from.curfloor() != 0) {
    _internal_set_curfloor(from._internal_curfloor());
  }
  if (from.openinplace() != 0) {
    _internal_set_openinplace(from._internal_openinplace());
  }
  if (from.closeinplace() != 0) {
    _internal_set_closeinplace(from._internal_closeinplace());
  }
  if (from.idlewait() != 0) {
    _internal_set_idlewait(from._internal_idlewait());
  }
  if (from.runsignal() != 0) {
    _internal_set_runsignal(from._internal_runsignal());
  }
  if (from.incall_floor() != 0) {
    _internal_set_incall_floor(from._internal_incall_floor());
  }
  if (from.outcall_floor() != 0) {
    _internal_set_outcall_floor(from._internal_outcall_floor());
  }
}

void LiftInfor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.LiftInfor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiftInfor::CopyFrom(const LiftInfor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.LiftInfor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiftInfor::IsInitialized() const {
  return true;
}

void LiftInfor::InternalSwap(LiftInfor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiftInfor, outcall_floor_)
      + sizeof(LiftInfor::outcall_floor_)
      - PROTOBUF_FIELD_OFFSET(LiftInfor, ts_)>(
          reinterpret_cast<char*>(&ts_),
          reinterpret_cast<char*>(&other->ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiftInfor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Mon_Route_AgvRoute::_Internal {
 public:
};

Mon_Route_AgvRoute::Mon_Route_AgvRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  route_id_(arena),
  routepoint_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.Mon_Route.AgvRoute)
}
Mon_Route_AgvRoute::Mon_Route_AgvRoute(const Mon_Route_AgvRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      route_id_(from.route_id_),
      routepoint_(from.routepoint_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&nxt_seg_) -
    reinterpret_cast<char*>(&id_)) + sizeof(nxt_seg_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.Mon_Route.AgvRoute)
}

void Mon_Route_AgvRoute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mon_Route_AgvRoute_agv_5fmon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&nxt_seg_) -
      reinterpret_cast<char*>(&id_)) + sizeof(nxt_seg_));
}

Mon_Route_AgvRoute::~Mon_Route_AgvRoute() {
  // @@protoc_insertion_point(destructor:agv_mon.Mon_Route.AgvRoute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mon_Route_AgvRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Mon_Route_AgvRoute::ArenaDtor(void* object) {
  Mon_Route_AgvRoute* _this = reinterpret_cast< Mon_Route_AgvRoute* >(object);
  (void)_this;
}
void Mon_Route_AgvRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mon_Route_AgvRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mon_Route_AgvRoute& Mon_Route_AgvRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mon_Route_AgvRoute_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void Mon_Route_AgvRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.Mon_Route.AgvRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_id_.Clear();
  routepoint_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nxt_seg_) -
      reinterpret_cast<char*>(&id_)) + sizeof(nxt_seg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mon_Route_AgvRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 route_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_route_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_route_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .agv_mon.RoutePoint routepoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routepoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // sint32 cur_seg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cur_seg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 nxt_seg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          nxt_seg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mon_Route_AgvRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.Mon_Route.AgvRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated int32 route_id = 2;
  {
    int byte_size = _route_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_route_id(), byte_size, target);
    }
  }

  // repeated .agv_mon.RoutePoint routepoint = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routepoint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_routepoint(i), target, stream);
  }

  // sint32 cur_seg = 4;
  if (this->cur_seg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_cur_seg(), target);
  }

  // sint32 nxt_seg = 5;
  if (this->nxt_seg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_nxt_seg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.Mon_Route.AgvRoute)
  return target;
}

size_t Mon_Route_AgvRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.Mon_Route.AgvRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 route_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->route_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _route_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .agv_mon.RoutePoint routepoint = 3;
  total_size += 1UL * this->_internal_routepoint_size();
  for (const auto& msg : this->routepoint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // sint32 cur_seg = 4;
  if (this->cur_seg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_cur_seg());
  }

  // sint32 nxt_seg = 5;
  if (this->nxt_seg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_nxt_seg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mon_Route_AgvRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.Mon_Route.AgvRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const Mon_Route_AgvRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mon_Route_AgvRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.Mon_Route.AgvRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.Mon_Route.AgvRoute)
    MergeFrom(*source);
  }
}

void Mon_Route_AgvRoute::MergeFrom(const Mon_Route_AgvRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.Mon_Route.AgvRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  route_id_.MergeFrom(from.route_id_);
  routepoint_.MergeFrom(from.routepoint_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.cur_seg() != 0) {
    _internal_set_cur_seg(from._internal_cur_seg());
  }
  if (from.nxt_seg() != 0) {
    _internal_set_nxt_seg(from._internal_nxt_seg());
  }
}

void Mon_Route_AgvRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.Mon_Route.AgvRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mon_Route_AgvRoute::CopyFrom(const Mon_Route_AgvRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.Mon_Route.AgvRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mon_Route_AgvRoute::IsInitialized() const {
  return true;
}

void Mon_Route_AgvRoute::InternalSwap(Mon_Route_AgvRoute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  route_id_.InternalSwap(&other->route_id_);
  routepoint_.InternalSwap(&other->routepoint_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mon_Route_AgvRoute, nxt_seg_)
      + sizeof(Mon_Route_AgvRoute::nxt_seg_)
      - PROTOBUF_FIELD_OFFSET(Mon_Route_AgvRoute, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mon_Route_AgvRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Mon_Route::_Internal {
 public:
};

Mon_Route::Mon_Route(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agvroute_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.Mon_Route)
}
Mon_Route::Mon_Route(const Mon_Route& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agvroute_(from.agvroute_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:agv_mon.Mon_Route)
}

void Mon_Route::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mon_Route_agv_5fmon_2eproto.base);
}

Mon_Route::~Mon_Route() {
  // @@protoc_insertion_point(destructor:agv_mon.Mon_Route)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mon_Route::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Mon_Route::ArenaDtor(void* object) {
  Mon_Route* _this = reinterpret_cast< Mon_Route* >(object);
  (void)_this;
}
void Mon_Route::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mon_Route::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mon_Route& Mon_Route::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mon_Route_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void Mon_Route::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.Mon_Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agvroute_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mon_Route::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .agv_mon.Mon_Route.AgvRoute agvroute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agvroute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mon_Route::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.Mon_Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .agv_mon.Mon_Route.AgvRoute agvroute = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agvroute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agvroute(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.Mon_Route)
  return target;
}

size_t Mon_Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.Mon_Route)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agv_mon.Mon_Route.AgvRoute agvroute = 1;
  total_size += 1UL * this->_internal_agvroute_size();
  for (const auto& msg : this->agvroute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mon_Route::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.Mon_Route)
  GOOGLE_DCHECK_NE(&from, this);
  const Mon_Route* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mon_Route>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.Mon_Route)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.Mon_Route)
    MergeFrom(*source);
  }
}

void Mon_Route::MergeFrom(const Mon_Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.Mon_Route)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agvroute_.MergeFrom(from.agvroute_);
}

void Mon_Route::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.Mon_Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mon_Route::CopyFrom(const Mon_Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.Mon_Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mon_Route::IsInitialized() const {
  return true;
}

void Mon_Route::InternalSwap(Mon_Route* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agvroute_.InternalSwap(&other->agvroute_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mon_Route::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RoutePoint::_Internal {
 public:
};

RoutePoint::RoutePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.RoutePoint)
}
RoutePoint::RoutePoint(const RoutePoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&point_, &from.point_,
    static_cast<size_t>(reinterpret_cast<char*>(&fpoint_) -
    reinterpret_cast<char*>(&point_)) + sizeof(fpoint_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.RoutePoint)
}

void RoutePoint::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&point_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&fpoint_) -
      reinterpret_cast<char*>(&point_)) + sizeof(fpoint_));
}

RoutePoint::~RoutePoint() {
  // @@protoc_insertion_point(destructor:agv_mon.RoutePoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoutePoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoutePoint::ArenaDtor(void* object) {
  RoutePoint* _this = reinterpret_cast< RoutePoint* >(object);
  (void)_this;
}
void RoutePoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutePoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutePoint& RoutePoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutePoint_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void RoutePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.RoutePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fpoint_) -
      reinterpret_cast<char*>(&point_)) + sizeof(fpoint_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutePoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fpoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutePoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.RoutePoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 point = 1;
  if (this->point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_point(), target);
  }

  // int32 fpoint = 2;
  if (this->fpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.RoutePoint)
  return target;
}

size_t RoutePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.RoutePoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 point = 1;
  if (this->point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_point());
  }

  // int32 fpoint = 2;
  if (this->fpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fpoint());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutePoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.RoutePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutePoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutePoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.RoutePoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.RoutePoint)
    MergeFrom(*source);
  }
}

void RoutePoint::MergeFrom(const RoutePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.RoutePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.point() != 0) {
    _internal_set_point(from._internal_point());
  }
  if (from.fpoint() != 0) {
    _internal_set_fpoint(from._internal_fpoint());
  }
}

void RoutePoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.RoutePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutePoint::CopyFrom(const RoutePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.RoutePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutePoint::IsInitialized() const {
  return true;
}

void RoutePoint::InternalSwap(RoutePoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutePoint, fpoint_)
      + sizeof(RoutePoint::fpoint_)
      - PROTOBUF_FIELD_OFFSET(RoutePoint, point_)>(
          reinterpret_cast<char*>(&point_),
          reinterpret_cast<char*>(&other->point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutePoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Task_Data::_Internal {
 public:
};

Task_Data::Task_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  taskinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.Task_Data)
}
Task_Data::Task_Data(const Task_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      taskinfo_(from.taskinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:agv_mon.Task_Data)
}

void Task_Data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Task_Data_agv_5fmon_2eproto.base);
}

Task_Data::~Task_Data() {
  // @@protoc_insertion_point(destructor:agv_mon.Task_Data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Task_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Task_Data::ArenaDtor(void* object) {
  Task_Data* _this = reinterpret_cast< Task_Data* >(object);
  (void)_this;
}
void Task_Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Task_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Task_Data& Task_Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Task_Data_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void Task_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.Task_Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskinfo_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Task_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .agv_mon.TaskInfo taskinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_taskinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Task_Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.Task_Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .agv_mon.TaskInfo taskinfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_taskinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_taskinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.Task_Data)
  return target;
}

size_t Task_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.Task_Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agv_mon.TaskInfo taskinfo = 1;
  total_size += 1UL * this->_internal_taskinfo_size();
  for (const auto& msg : this->taskinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Task_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.Task_Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Task_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Task_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.Task_Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.Task_Data)
    MergeFrom(*source);
  }
}

void Task_Data::MergeFrom(const Task_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.Task_Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  taskinfo_.MergeFrom(from.taskinfo_);
}

void Task_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.Task_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task_Data::CopyFrom(const Task_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.Task_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task_Data::IsInitialized() const {
  return true;
}

void Task_Data::InternalSwap(Task_Data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  taskinfo_.InternalSwap(&other->taskinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Task_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TaskInfo::_Internal {
 public:
  static const ::agv_mon::TaskLoc& start(const TaskInfo* msg);
  static const ::agv_mon::TaskLoc& end(const TaskInfo* msg);
};

const ::agv_mon::TaskLoc&
TaskInfo::_Internal::start(const TaskInfo* msg) {
  return *msg->start_;
}
const ::agv_mon::TaskLoc&
TaskInfo::_Internal::end(const TaskInfo* msg) {
  return *msg->end_;
}
TaskInfo::TaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.TaskInfo)
}
TaskInfo::TaskInfo(const TaskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pallet_no_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pallet_no().empty()) {
    pallet_no_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pallet_no(), 
      GetArena());
  }
  if (from._internal_has_start()) {
    start_ = new ::agv_mon::TaskLoc(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::agv_mon::TaskLoc(*from.end_);
  } else {
    end_ = nullptr;
  }
  ::memcpy(&wms_id_, &from.wms_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_type_) -
    reinterpret_cast<char*>(&wms_id_)) + sizeof(delay_type_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.TaskInfo)
}

void TaskInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskInfo_agv_5fmon_2eproto.base);
  pallet_no_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&delay_type_) -
      reinterpret_cast<char*>(&start_)) + sizeof(delay_type_));
}

TaskInfo::~TaskInfo() {
  // @@protoc_insertion_point(destructor:agv_mon.TaskInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pallet_no_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void TaskInfo::ArenaDtor(void* object) {
  TaskInfo* _this = reinterpret_cast< TaskInfo* >(object);
  (void)_this;
}
void TaskInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskInfo& TaskInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskInfo_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void TaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.TaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pallet_no_.ClearToEmpty();
  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  ::memset(&wms_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_type_) -
      reinterpret_cast<char*>(&wms_id_)) + sizeof(delay_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wms_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wms_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mes_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mes_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 agv_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          agv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 area = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agv_mon.TaskLoc start = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agv_mon.TaskLoc end = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pallet_no = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_pallet_no();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agv_mon.TaskInfo.pallet_no"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 create_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 excute_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          excute_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 get_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          get_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 finish_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          finish_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 priority = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 agv_expect = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          agv_expect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delay_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          delay_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.TaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wms_id = 1;
  if (this->wms_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wms_id(), target);
  }

  // int32 mes_id = 2;
  if (this->mes_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mes_id(), target);
  }

  // sint32 agv_id = 3;
  if (this->agv_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_agv_id(), target);
  }

  // int32 area = 4;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_area(), target);
  }

  // int32 status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // .agv_mon.TaskLoc start = 6;
  if (this->has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::start(this), target, stream);
  }

  // .agv_mon.TaskLoc end = 7;
  if (this->has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::end(this), target, stream);
  }

  // string pallet_no = 8;
  if (this->pallet_no().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pallet_no().data(), static_cast<int>(this->_internal_pallet_no().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_mon.TaskInfo.pallet_no");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_pallet_no(), target);
  }

  // int64 create_time = 9;
  if (this->create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_create_time(), target);
  }

  // int64 excute_time = 10;
  if (this->excute_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_excute_time(), target);
  }

  // int64 get_time = 11;
  if (this->get_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_get_time(), target);
  }

  // int64 finish_time = 12;
  if (this->finish_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_finish_time(), target);
  }

  // int32 priority = 13;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_priority(), target);
  }

  // sint32 agv_expect = 14;
  if (this->agv_expect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(14, this->_internal_agv_expect(), target);
  }

  // int32 delay_type = 15;
  if (this->delay_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_delay_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.TaskInfo)
  return target;
}

size_t TaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.TaskInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pallet_no = 8;
  if (this->pallet_no().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pallet_no());
  }

  // .agv_mon.TaskLoc start = 6;
  if (this->has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .agv_mon.TaskLoc end = 7;
  if (this->has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // int32 wms_id = 1;
  if (this->wms_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wms_id());
  }

  // int32 mes_id = 2;
  if (this->mes_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mes_id());
  }

  // sint32 agv_id = 3;
  if (this->agv_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_agv_id());
  }

  // int32 area = 4;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_area());
  }

  // int64 create_time = 9;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_create_time());
  }

  // int32 status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 priority = 13;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_priority());
  }

  // int64 excute_time = 10;
  if (this->excute_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_excute_time());
  }

  // int64 get_time = 11;
  if (this->get_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_get_time());
  }

  // int64 finish_time = 12;
  if (this->finish_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_finish_time());
  }

  // sint32 agv_expect = 14;
  if (this->agv_expect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_agv_expect());
  }

  // int32 delay_type = 15;
  if (this->delay_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delay_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.TaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.TaskInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.TaskInfo)
    MergeFrom(*source);
  }
}

void TaskInfo::MergeFrom(const TaskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.TaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pallet_no().size() > 0) {
    _internal_set_pallet_no(from._internal_pallet_no());
  }
  if (from.has_start()) {
    _internal_mutable_start()->::agv_mon::TaskLoc::MergeFrom(from._internal_start());
  }
  if (from.has_end()) {
    _internal_mutable_end()->::agv_mon::TaskLoc::MergeFrom(from._internal_end());
  }
  if (from.wms_id() != 0) {
    _internal_set_wms_id(from._internal_wms_id());
  }
  if (from.mes_id() != 0) {
    _internal_set_mes_id(from._internal_mes_id());
  }
  if (from.agv_id() != 0) {
    _internal_set_agv_id(from._internal_agv_id());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
  if (from.create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from.excute_time() != 0) {
    _internal_set_excute_time(from._internal_excute_time());
  }
  if (from.get_time() != 0) {
    _internal_set_get_time(from._internal_get_time());
  }
  if (from.finish_time() != 0) {
    _internal_set_finish_time(from._internal_finish_time());
  }
  if (from.agv_expect() != 0) {
    _internal_set_agv_expect(from._internal_agv_expect());
  }
  if (from.delay_type() != 0) {
    _internal_set_delay_type(from._internal_delay_type());
  }
}

void TaskInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.TaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInfo::CopyFrom(const TaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.TaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfo::IsInitialized() const {
  return true;
}

void TaskInfo::InternalSwap(TaskInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pallet_no_.Swap(&other->pallet_no_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskInfo, delay_type_)
      + sizeof(TaskInfo::delay_type_)
      - PROTOBUF_FIELD_OFFSET(TaskInfo, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Dev_Data::_Internal {
 public:
};

Dev_Data::Dev_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cxjdata_(arena),
  cxjback_(arena),
  wmsdata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.Dev_Data)
}
Dev_Data::Dev_Data(const Dev_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cxjdata_(from.cxjdata_),
      cxjback_(from.cxjback_),
      wmsdata_(from.wmsdata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:agv_mon.Dev_Data)
}

void Dev_Data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dev_Data_agv_5fmon_2eproto.base);
}

Dev_Data::~Dev_Data() {
  // @@protoc_insertion_point(destructor:agv_mon.Dev_Data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Dev_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Dev_Data::ArenaDtor(void* object) {
  Dev_Data* _this = reinterpret_cast< Dev_Data* >(object);
  (void)_this;
}
void Dev_Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dev_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dev_Data& Dev_Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dev_Data_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void Dev_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.Dev_Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cxjdata_.Clear();
  cxjback_.Clear();
  wmsdata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dev_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .agv_mon.CxjData cxjdata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cxjdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .agv_mon.CxjBack cxjback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cxjback(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .agv_mon.WmsData wmsdata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wmsdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dev_Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.Dev_Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .agv_mon.CxjData cxjdata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cxjdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cxjdata(i), target, stream);
  }

  // repeated .agv_mon.CxjBack cxjback = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cxjback_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cxjback(i), target, stream);
  }

  // repeated .agv_mon.WmsData wmsdata = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wmsdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_wmsdata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.Dev_Data)
  return target;
}

size_t Dev_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.Dev_Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agv_mon.CxjData cxjdata = 1;
  total_size += 1UL * this->_internal_cxjdata_size();
  for (const auto& msg : this->cxjdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .agv_mon.CxjBack cxjback = 2;
  total_size += 1UL * this->_internal_cxjback_size();
  for (const auto& msg : this->cxjback_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .agv_mon.WmsData wmsdata = 3;
  total_size += 1UL * this->_internal_wmsdata_size();
  for (const auto& msg : this->wmsdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dev_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.Dev_Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Dev_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dev_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.Dev_Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.Dev_Data)
    MergeFrom(*source);
  }
}

void Dev_Data::MergeFrom(const Dev_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.Dev_Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cxjdata_.MergeFrom(from.cxjdata_);
  cxjback_.MergeFrom(from.cxjback_);
  wmsdata_.MergeFrom(from.wmsdata_);
}

void Dev_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.Dev_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dev_Data::CopyFrom(const Dev_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.Dev_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dev_Data::IsInitialized() const {
  return true;
}

void Dev_Data::InternalSwap(Dev_Data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cxjdata_.InternalSwap(&other->cxjdata_);
  cxjback_.InternalSwap(&other->cxjback_);
  wmsdata_.InternalSwap(&other->wmsdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dev_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CxjData::_Internal {
 public:
};

CxjData::CxjData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.CxjData)
}
CxjData::CxjData(const CxjData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cxjid_, &from.cxjid_,
    static_cast<size_t>(reinterpret_cast<char*>(&wms_task_) -
    reinterpret_cast<char*>(&cxjid_)) + sizeof(wms_task_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.CxjData)
}

void CxjData::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cxjid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&wms_task_) -
      reinterpret_cast<char*>(&cxjid_)) + sizeof(wms_task_));
}

CxjData::~CxjData() {
  // @@protoc_insertion_point(destructor:agv_mon.CxjData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CxjData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CxjData::ArenaDtor(void* object) {
  CxjData* _this = reinterpret_cast< CxjData* >(object);
  (void)_this;
}
void CxjData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CxjData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CxjData& CxjData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CxjData_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void CxjData::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.CxjData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cxjid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wms_task_) -
      reinterpret_cast<char*>(&cxjid_)) + sizeof(wms_task_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CxjData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cxjid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cxjid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cxjtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cxjtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 storeid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          storeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goods_sig = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          goods_sig_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 inright_sig = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          inright_sig_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 all_sig = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          all_sig_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 agv_in_flag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          agv_in_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cxj_heart = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          cxj_heart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 agv_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          agv_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wms_task = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          wms_task_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CxjData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.CxjData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cxjid = 1;
  if (this->cxjid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cxjid(), target);
  }

  // int32 cxjtype = 2;
  if (this->cxjtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cxjtype(), target);
  }

  // int32 storeid = 3;
  if (this->storeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_storeid(), target);
  }

  // int32 goods_sig = 4;
  if (this->goods_sig() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_goods_sig(), target);
  }

  // int32 inright_sig = 5;
  if (this->inright_sig() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_inright_sig(), target);
  }

  // int32 all_sig = 6;
  if (this->all_sig() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_all_sig(), target);
  }

  // int32 agv_in_flag = 7;
  if (this->agv_in_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_agv_in_flag(), target);
  }

  // int32 cxj_heart = 8;
  if (this->cxj_heart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_cxj_heart(), target);
  }

  // sint32 agv_id = 9;
  if (this->agv_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(9, this->_internal_agv_id(), target);
  }

  // int32 wms_task = 10;
  if (this->wms_task() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_wms_task(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.CxjData)
  return target;
}

size_t CxjData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.CxjData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cxjid = 1;
  if (this->cxjid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cxjid());
  }

  // int32 cxjtype = 2;
  if (this->cxjtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cxjtype());
  }

  // int32 storeid = 3;
  if (this->storeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_storeid());
  }

  // int32 goods_sig = 4;
  if (this->goods_sig() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goods_sig());
  }

  // int32 inright_sig = 5;
  if (this->inright_sig() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inright_sig());
  }

  // int32 all_sig = 6;
  if (this->all_sig() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_all_sig());
  }

  // int32 agv_in_flag = 7;
  if (this->agv_in_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_agv_in_flag());
  }

  // int32 cxj_heart = 8;
  if (this->cxj_heart() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cxj_heart());
  }

  // sint32 agv_id = 9;
  if (this->agv_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_agv_id());
  }

  // int32 wms_task = 10;
  if (this->wms_task() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wms_task());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CxjData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.CxjData)
  GOOGLE_DCHECK_NE(&from, this);
  const CxjData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CxjData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.CxjData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.CxjData)
    MergeFrom(*source);
  }
}

void CxjData::MergeFrom(const CxjData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.CxjData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cxjid() != 0) {
    _internal_set_cxjid(from._internal_cxjid());
  }
  if (from.cxjtype() != 0) {
    _internal_set_cxjtype(from._internal_cxjtype());
  }
  if (from.storeid() != 0) {
    _internal_set_storeid(from._internal_storeid());
  }
  if (from.goods_sig() != 0) {
    _internal_set_goods_sig(from._internal_goods_sig());
  }
  if (from.inright_sig() != 0) {
    _internal_set_inright_sig(from._internal_inright_sig());
  }
  if (from.all_sig() != 0) {
    _internal_set_all_sig(from._internal_all_sig());
  }
  if (from.agv_in_flag() != 0) {
    _internal_set_agv_in_flag(from._internal_agv_in_flag());
  }
  if (from.cxj_heart() != 0) {
    _internal_set_cxj_heart(from._internal_cxj_heart());
  }
  if (from.agv_id() != 0) {
    _internal_set_agv_id(from._internal_agv_id());
  }
  if (from.wms_task() != 0) {
    _internal_set_wms_task(from._internal_wms_task());
  }
}

void CxjData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.CxjData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CxjData::CopyFrom(const CxjData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.CxjData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CxjData::IsInitialized() const {
  return true;
}

void CxjData::InternalSwap(CxjData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CxjData, wms_task_)
      + sizeof(CxjData::wms_task_)
      - PROTOBUF_FIELD_OFFSET(CxjData, cxjid_)>(
          reinterpret_cast<char*>(&cxjid_),
          reinterpret_cast<char*>(&other->cxjid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CxjData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CxjBack::_Internal {
 public:
};

CxjBack::CxjBack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.CxjBack)
}
CxjBack::CxjBack(const CxjBack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rfid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rfid().empty()) {
    rfid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rfid(), 
      GetArena());
  }
  ::memcpy(&storeid_, &from.storeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&plcip_) -
    reinterpret_cast<char*>(&storeid_)) + sizeof(plcip_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.CxjBack)
}

void CxjBack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CxjBack_agv_5fmon_2eproto.base);
  rfid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&storeid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&plcip_) -
      reinterpret_cast<char*>(&storeid_)) + sizeof(plcip_));
}

CxjBack::~CxjBack() {
  // @@protoc_insertion_point(destructor:agv_mon.CxjBack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CxjBack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rfid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CxjBack::ArenaDtor(void* object) {
  CxjBack* _this = reinterpret_cast< CxjBack* >(object);
  (void)_this;
}
void CxjBack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CxjBack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CxjBack& CxjBack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CxjBack_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void CxjBack::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.CxjBack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rfid_.ClearToEmpty();
  ::memset(&storeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plcip_) -
      reinterpret_cast<char*>(&storeid_)) + sizeof(plcip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CxjBack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 storeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          storeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 task_no = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          task_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rfid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_rfid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agv_mon.CxjBack.rfid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 plcip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          plcip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CxjBack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.CxjBack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 storeid = 1;
  if (this->storeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_storeid(), target);
  }

  // sint32 area = 2;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_area(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int32 task_no = 4;
  if (this->task_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_task_no(), target);
  }

  // string rfid = 5;
  if (this->rfid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rfid().data(), static_cast<int>(this->_internal_rfid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_mon.CxjBack.rfid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_rfid(), target);
  }

  // uint32 plcip = 6;
  if (this->plcip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_plcip(), target);
  }

  // int64 ts = 7;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.CxjBack)
  return target;
}

size_t CxjBack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.CxjBack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rfid = 5;
  if (this->rfid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rfid());
  }

  // int32 storeid = 1;
  if (this->storeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_storeid());
  }

  // sint32 area = 2;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_area());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 task_no = 4;
  if (this->task_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_task_no());
  }

  // int64 ts = 7;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  // uint32 plcip = 6;
  if (this->plcip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_plcip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CxjBack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.CxjBack)
  GOOGLE_DCHECK_NE(&from, this);
  const CxjBack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CxjBack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.CxjBack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.CxjBack)
    MergeFrom(*source);
  }
}

void CxjBack::MergeFrom(const CxjBack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.CxjBack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rfid().size() > 0) {
    _internal_set_rfid(from._internal_rfid());
  }
  if (from.storeid() != 0) {
    _internal_set_storeid(from._internal_storeid());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.task_no() != 0) {
    _internal_set_task_no(from._internal_task_no());
  }
  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
  if (from.plcip() != 0) {
    _internal_set_plcip(from._internal_plcip());
  }
}

void CxjBack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.CxjBack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CxjBack::CopyFrom(const CxjBack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.CxjBack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CxjBack::IsInitialized() const {
  return true;
}

void CxjBack::InternalSwap(CxjBack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rfid_.Swap(&other->rfid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CxjBack, plcip_)
      + sizeof(CxjBack::plcip_)
      - PROTOBUF_FIELD_OFFSET(CxjBack, storeid_)>(
          reinterpret_cast<char*>(&storeid_),
          reinterpret_cast<char*>(&other->storeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CxjBack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WmsData::_Internal {
 public:
};

WmsData::WmsData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  infr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.WmsData)
}
WmsData::WmsData(const WmsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      infr_(from.infr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&storeid_pick_, &from.storeid_pick_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_) -
    reinterpret_cast<char*>(&storeid_pick_)) + sizeof(ts_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.WmsData)
}

void WmsData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WmsData_agv_5fmon_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&storeid_pick_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&storeid_pick_)) + sizeof(ts_));
}

WmsData::~WmsData() {
  // @@protoc_insertion_point(destructor:agv_mon.WmsData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WmsData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WmsData::ArenaDtor(void* object) {
  WmsData* _this = reinterpret_cast< WmsData* >(object);
  (void)_this;
}
void WmsData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WmsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WmsData& WmsData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WmsData_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void WmsData::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.WmsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infr_.Clear();
  ::memset(&storeid_pick_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&storeid_pick_)) + sizeof(ts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WmsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 storeid_pick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          storeid_pick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 storeid_put = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          storeid_put_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 area = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 pick_enable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pick_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 put_enable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          put_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 pick_task_no = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pick_task_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 put_task_no = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          put_task_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .agv_mon.Param infr = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 ts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WmsData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.WmsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 storeid_pick = 1;
  if (this->storeid_pick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_storeid_pick(), target);
  }

  // int32 storeid_put = 2;
  if (this->storeid_put() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_storeid_put(), target);
  }

  // sint32 area = 3;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_area(), target);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_type(), target);
  }

  // sint32 pick_enable = 5;
  if (this->pick_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_pick_enable(), target);
  }

  // sint32 put_enable = 6;
  if (this->put_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_put_enable(), target);
  }

  // sint32 pick_task_no = 7;
  if (this->pick_task_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_pick_task_no(), target);
  }

  // sint32 put_task_no = 8;
  if (this->put_task_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_put_task_no(), target);
  }

  // repeated .agv_mon.Param infr = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_infr(i), target, stream);
  }

  // int64 ts = 10;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.WmsData)
  return target;
}

size_t WmsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.WmsData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agv_mon.Param infr = 9;
  total_size += 1UL * this->_internal_infr_size();
  for (const auto& msg : this->infr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 storeid_pick = 1;
  if (this->storeid_pick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_storeid_pick());
  }

  // int32 storeid_put = 2;
  if (this->storeid_put() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_storeid_put());
  }

  // sint32 area = 3;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_area());
  }

  // int32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // sint32 pick_enable = 5;
  if (this->pick_enable() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_pick_enable());
  }

  // sint32 put_enable = 6;
  if (this->put_enable() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_put_enable());
  }

  // sint32 pick_task_no = 7;
  if (this->pick_task_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_pick_task_no());
  }

  // sint32 put_task_no = 8;
  if (this->put_task_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_put_task_no());
  }

  // int64 ts = 10;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WmsData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.WmsData)
  GOOGLE_DCHECK_NE(&from, this);
  const WmsData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WmsData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.WmsData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.WmsData)
    MergeFrom(*source);
  }
}

void WmsData::MergeFrom(const WmsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.WmsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infr_.MergeFrom(from.infr_);
  if (from.storeid_pick() != 0) {
    _internal_set_storeid_pick(from._internal_storeid_pick());
  }
  if (from.storeid_put() != 0) {
    _internal_set_storeid_put(from._internal_storeid_put());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.pick_enable() != 0) {
    _internal_set_pick_enable(from._internal_pick_enable());
  }
  if (from.put_enable() != 0) {
    _internal_set_put_enable(from._internal_put_enable());
  }
  if (from.pick_task_no() != 0) {
    _internal_set_pick_task_no(from._internal_pick_task_no());
  }
  if (from.put_task_no() != 0) {
    _internal_set_put_task_no(from._internal_put_task_no());
  }
  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
}

void WmsData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.WmsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WmsData::CopyFrom(const WmsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.WmsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WmsData::IsInitialized() const {
  return true;
}

void WmsData::InternalSwap(WmsData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  infr_.InternalSwap(&other->infr_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WmsData, ts_)
      + sizeof(WmsData::ts_)
      - PROTOBUF_FIELD_OFFSET(WmsData, storeid_pick_)>(
          reinterpret_cast<char*>(&storeid_pick_),
          reinterpret_cast<char*>(&other->storeid_pick_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WmsData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Param::_Internal {
 public:
};

Param::Param(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.Param)
}
Param::Param(const Param& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.Param)
}

void Param::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

Param::~Param() {
  // @@protoc_insertion_point(destructor:agv_mon.Param)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Param::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Param::ArenaDtor(void* object) {
  Param* _this = reinterpret_cast< Param* >(object);
  (void)_this;
}
void Param::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Param::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Param& Param::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Param_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void Param::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Param::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Param::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_key(), target);
  }

  // sint32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.Param)
  return target;
}

size_t Param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.Param)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_key());
  }

  // sint32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Param::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.Param)
  GOOGLE_DCHECK_NE(&from, this);
  const Param* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Param>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.Param)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.Param)
    MergeFrom(*source);
  }
}

void Param::MergeFrom(const Param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.Param)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Param::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Param::CopyFrom(const Param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Param::IsInitialized() const {
  return true;
}

void Param::InternalSwap(Param* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Param, value_)
      + sizeof(Param::value_)
      - PROTOBUF_FIELD_OFFSET(Param, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Param::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TaskLoc::_Internal {
 public:
};

TaskLoc::TaskLoc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.TaskLoc)
}
TaskLoc::TaskLoc(const TaskLoc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  area_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_area_name().empty()) {
    area_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_area_name(), 
      GetArena());
  }
  ::memcpy(&layers_, &from.layers_,
    static_cast<size_t>(reinterpret_cast<char*>(&area_) -
    reinterpret_cast<char*>(&layers_)) + sizeof(area_));
  // @@protoc_insertion_point(copy_constructor:agv_mon.TaskLoc)
}

void TaskLoc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskLoc_agv_5fmon_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  area_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&layers_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&layers_)) + sizeof(area_));
}

TaskLoc::~TaskLoc() {
  // @@protoc_insertion_point(destructor:agv_mon.TaskLoc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskLoc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  area_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskLoc::ArenaDtor(void* object) {
  TaskLoc* _this = reinterpret_cast< TaskLoc* >(object);
  (void)_this;
}
void TaskLoc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskLoc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskLoc& TaskLoc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskLoc_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void TaskLoc::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.TaskLoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  area_name_.ClearToEmpty();
  ::memset(&layers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_) -
      reinterpret_cast<char*>(&layers_)) + sizeof(area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskLoc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agv_mon.TaskLoc.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 layers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          layers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 area = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string area_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_area_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agv_mon.TaskLoc.area_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskLoc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.TaskLoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_mon.TaskLoc.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 layers = 2;
  if (this->layers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_layers(), target);
  }

  // int32 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  // sint32 area = 4;
  if (this->area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_area(), target);
  }

  // string area_name = 5;
  if (this->area_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_area_name().data(), static_cast<int>(this->_internal_area_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_mon.TaskLoc.area_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_area_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.TaskLoc)
  return target;
}

size_t TaskLoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.TaskLoc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string area_name = 5;
  if (this->area_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_area_name());
  }

  // int32 layers = 2;
  if (this->layers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_layers());
  }

  // int32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // sint32 area = 4;
  if (this->area() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_area());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskLoc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.TaskLoc)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskLoc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskLoc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.TaskLoc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.TaskLoc)
    MergeFrom(*source);
  }
}

void TaskLoc::MergeFrom(const TaskLoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.TaskLoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.area_name().size() > 0) {
    _internal_set_area_name(from._internal_area_name());
  }
  if (from.layers() != 0) {
    _internal_set_layers(from._internal_layers());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.area() != 0) {
    _internal_set_area(from._internal_area());
  }
}

void TaskLoc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.TaskLoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskLoc::CopyFrom(const TaskLoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.TaskLoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskLoc::IsInitialized() const {
  return true;
}

void TaskLoc::InternalSwap(TaskLoc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  area_name_.Swap(&other->area_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskLoc, area_)
      + sizeof(TaskLoc::area_)
      - PROTOBUF_FIELD_OFFSET(TaskLoc, layers_)>(
          reinterpret_cast<char*>(&layers_),
          reinterpret_cast<char*>(&other->layers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskLoc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class COMD::_Internal {
 public:
};

COMD::COMD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.COMD)
}
COMD::COMD(const COMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:agv_mon.COMD)
}

void COMD::SharedCtor() {
  flag_ = 0;
}

COMD::~COMD() {
  // @@protoc_insertion_point(destructor:agv_mon.COMD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void COMD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void COMD::ArenaDtor(void* object) {
  COMD* _this = reinterpret_cast< COMD* >(object);
  (void)_this;
}
void COMD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void COMD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const COMD& COMD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_COMD_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void COMD::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.COMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  flag_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* COMD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* COMD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.COMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_flag(), target);
  }

  // repeated int32 value = 2;
  {
    int byte_size = _value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_value(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.COMD)
  return target;
}

size_t COMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.COMD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 value = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->value_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void COMD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.COMD)
  GOOGLE_DCHECK_NE(&from, this);
  const COMD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<COMD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.COMD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.COMD)
    MergeFrom(*source);
  }
}

void COMD::MergeFrom(const COMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.COMD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void COMD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.COMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COMD::CopyFrom(const COMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.COMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COMD::IsInitialized() const {
  return true;
}

void COMD::InternalSwap(COMD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata COMD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class COMDRET::_Internal {
 public:
};

COMDRET::COMDRET(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  comdret_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agv_mon.COMDRET)
}
COMDRET::COMDRET(const COMDRET& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      comdret_(from.comdret_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:agv_mon.COMDRET)
}

void COMDRET::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_COMDRET_agv_5fmon_2eproto.base);
}

COMDRET::~COMDRET() {
  // @@protoc_insertion_point(destructor:agv_mon.COMDRET)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void COMDRET::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void COMDRET::ArenaDtor(void* object) {
  COMDRET* _this = reinterpret_cast< COMDRET* >(object);
  (void)_this;
}
void COMDRET::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void COMDRET::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const COMDRET& COMDRET::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_COMDRET_agv_5fmon_2eproto.base);
  return *internal_default_instance();
}


void COMDRET::Clear() {
// @@protoc_insertion_point(message_clear_start:agv_mon.COMDRET)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comdret_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* COMDRET::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string comdret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_comdret();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agv_mon.COMDRET.comdret"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* COMDRET::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agv_mon.COMDRET)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string comdret = 1;
  for (int i = 0, n = this->_internal_comdret_size(); i < n; i++) {
    const auto& s = this->_internal_comdret(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agv_mon.COMDRET.comdret");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agv_mon.COMDRET)
  return target;
}

size_t COMDRET::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agv_mon.COMDRET)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string comdret = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(comdret_.size());
  for (int i = 0, n = comdret_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      comdret_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void COMDRET::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agv_mon.COMDRET)
  GOOGLE_DCHECK_NE(&from, this);
  const COMDRET* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<COMDRET>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agv_mon.COMDRET)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agv_mon.COMDRET)
    MergeFrom(*source);
  }
}

void COMDRET::MergeFrom(const COMDRET& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agv_mon.COMDRET)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  comdret_.MergeFrom(from.comdret_);
}

void COMDRET::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agv_mon.COMDRET)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COMDRET::CopyFrom(const COMDRET& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agv_mon.COMDRET)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COMDRET::IsInitialized() const {
  return true;
}

void COMDRET::InternalSwap(COMDRET* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  comdret_.InternalSwap(&other->comdret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata COMDRET::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace agv_mon
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::agv_mon::Mon_Ask* Arena::CreateMaybeMessage< ::agv_mon::Mon_Ask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::Mon_Ask >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::Mon_Data* Arena::CreateMaybeMessage< ::agv_mon::Mon_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::Mon_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::AgvInfor_AgvReport* Arena::CreateMaybeMessage< ::agv_mon::AgvInfor_AgvReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::AgvInfor_AgvReport >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::AgvInfor_Basic* Arena::CreateMaybeMessage< ::agv_mon::AgvInfor_Basic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::AgvInfor_Basic >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::AgvInfor_AgvTask* Arena::CreateMaybeMessage< ::agv_mon::AgvInfor_AgvTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::AgvInfor_AgvTask >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::AgvInfor_AgvLoc* Arena::CreateMaybeMessage< ::agv_mon::AgvInfor_AgvLoc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::AgvInfor_AgvLoc >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::AgvInfor_AgvSt* Arena::CreateMaybeMessage< ::agv_mon::AgvInfor_AgvSt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::AgvInfor_AgvSt >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::AgvInfor_AgvBat* Arena::CreateMaybeMessage< ::agv_mon::AgvInfor_AgvBat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::AgvInfor_AgvBat >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::AgvInfor_AgvLoad* Arena::CreateMaybeMessage< ::agv_mon::AgvInfor_AgvLoad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::AgvInfor_AgvLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::AgvInfor_AvoidInfo* Arena::CreateMaybeMessage< ::agv_mon::AgvInfor_AvoidInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::AgvInfor_AvoidInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::AgvInfor_TimeInfo* Arena::CreateMaybeMessage< ::agv_mon::AgvInfor_TimeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::AgvInfor_TimeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::AgvInfor_COORD* Arena::CreateMaybeMessage< ::agv_mon::AgvInfor_COORD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::AgvInfor_COORD >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::AgvInfor* Arena::CreateMaybeMessage< ::agv_mon::AgvInfor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::AgvInfor >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::LiftInfor* Arena::CreateMaybeMessage< ::agv_mon::LiftInfor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::LiftInfor >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::Mon_Route_AgvRoute* Arena::CreateMaybeMessage< ::agv_mon::Mon_Route_AgvRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::Mon_Route_AgvRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::Mon_Route* Arena::CreateMaybeMessage< ::agv_mon::Mon_Route >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::Mon_Route >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::RoutePoint* Arena::CreateMaybeMessage< ::agv_mon::RoutePoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::RoutePoint >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::Task_Data* Arena::CreateMaybeMessage< ::agv_mon::Task_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::Task_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::TaskInfo* Arena::CreateMaybeMessage< ::agv_mon::TaskInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::TaskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::Dev_Data* Arena::CreateMaybeMessage< ::agv_mon::Dev_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::Dev_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::CxjData* Arena::CreateMaybeMessage< ::agv_mon::CxjData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::CxjData >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::CxjBack* Arena::CreateMaybeMessage< ::agv_mon::CxjBack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::CxjBack >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::WmsData* Arena::CreateMaybeMessage< ::agv_mon::WmsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::WmsData >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::Param* Arena::CreateMaybeMessage< ::agv_mon::Param >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::Param >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::TaskLoc* Arena::CreateMaybeMessage< ::agv_mon::TaskLoc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::TaskLoc >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::COMD* Arena::CreateMaybeMessage< ::agv_mon::COMD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::COMD >(arena);
}
template<> PROTOBUF_NOINLINE ::agv_mon::COMDRET* Arena::CreateMaybeMessage< ::agv_mon::COMDRET >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agv_mon::COMDRET >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
