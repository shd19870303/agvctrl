// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agv_mon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_agv_5fmon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_agv_5fmon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_agv_5fmon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_agv_5fmon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[27]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_agv_5fmon_2eproto;
namespace agv_mon {
class AgvInfor;
class AgvInforDefaultTypeInternal;
extern AgvInforDefaultTypeInternal _AgvInfor_default_instance_;
class AgvInfor_AgvBat;
class AgvInfor_AgvBatDefaultTypeInternal;
extern AgvInfor_AgvBatDefaultTypeInternal _AgvInfor_AgvBat_default_instance_;
class AgvInfor_AgvLoad;
class AgvInfor_AgvLoadDefaultTypeInternal;
extern AgvInfor_AgvLoadDefaultTypeInternal _AgvInfor_AgvLoad_default_instance_;
class AgvInfor_AgvLoc;
class AgvInfor_AgvLocDefaultTypeInternal;
extern AgvInfor_AgvLocDefaultTypeInternal _AgvInfor_AgvLoc_default_instance_;
class AgvInfor_AgvReport;
class AgvInfor_AgvReportDefaultTypeInternal;
extern AgvInfor_AgvReportDefaultTypeInternal _AgvInfor_AgvReport_default_instance_;
class AgvInfor_AgvSt;
class AgvInfor_AgvStDefaultTypeInternal;
extern AgvInfor_AgvStDefaultTypeInternal _AgvInfor_AgvSt_default_instance_;
class AgvInfor_AgvTask;
class AgvInfor_AgvTaskDefaultTypeInternal;
extern AgvInfor_AgvTaskDefaultTypeInternal _AgvInfor_AgvTask_default_instance_;
class AgvInfor_AvoidInfo;
class AgvInfor_AvoidInfoDefaultTypeInternal;
extern AgvInfor_AvoidInfoDefaultTypeInternal _AgvInfor_AvoidInfo_default_instance_;
class AgvInfor_Basic;
class AgvInfor_BasicDefaultTypeInternal;
extern AgvInfor_BasicDefaultTypeInternal _AgvInfor_Basic_default_instance_;
class AgvInfor_COORD;
class AgvInfor_COORDDefaultTypeInternal;
extern AgvInfor_COORDDefaultTypeInternal _AgvInfor_COORD_default_instance_;
class AgvInfor_TimeInfo;
class AgvInfor_TimeInfoDefaultTypeInternal;
extern AgvInfor_TimeInfoDefaultTypeInternal _AgvInfor_TimeInfo_default_instance_;
class COMD;
class COMDDefaultTypeInternal;
extern COMDDefaultTypeInternal _COMD_default_instance_;
class COMDRET;
class COMDRETDefaultTypeInternal;
extern COMDRETDefaultTypeInternal _COMDRET_default_instance_;
class CxjBack;
class CxjBackDefaultTypeInternal;
extern CxjBackDefaultTypeInternal _CxjBack_default_instance_;
class CxjData;
class CxjDataDefaultTypeInternal;
extern CxjDataDefaultTypeInternal _CxjData_default_instance_;
class Dev_Data;
class Dev_DataDefaultTypeInternal;
extern Dev_DataDefaultTypeInternal _Dev_Data_default_instance_;
class LiftInfor;
class LiftInforDefaultTypeInternal;
extern LiftInforDefaultTypeInternal _LiftInfor_default_instance_;
class Mon_Ask;
class Mon_AskDefaultTypeInternal;
extern Mon_AskDefaultTypeInternal _Mon_Ask_default_instance_;
class Mon_Data;
class Mon_DataDefaultTypeInternal;
extern Mon_DataDefaultTypeInternal _Mon_Data_default_instance_;
class Mon_Route;
class Mon_RouteDefaultTypeInternal;
extern Mon_RouteDefaultTypeInternal _Mon_Route_default_instance_;
class Mon_Route_AgvRoute;
class Mon_Route_AgvRouteDefaultTypeInternal;
extern Mon_Route_AgvRouteDefaultTypeInternal _Mon_Route_AgvRoute_default_instance_;
class Param;
class ParamDefaultTypeInternal;
extern ParamDefaultTypeInternal _Param_default_instance_;
class RoutePoint;
class RoutePointDefaultTypeInternal;
extern RoutePointDefaultTypeInternal _RoutePoint_default_instance_;
class TaskInfo;
class TaskInfoDefaultTypeInternal;
extern TaskInfoDefaultTypeInternal _TaskInfo_default_instance_;
class TaskLoc;
class TaskLocDefaultTypeInternal;
extern TaskLocDefaultTypeInternal _TaskLoc_default_instance_;
class Task_Data;
class Task_DataDefaultTypeInternal;
extern Task_DataDefaultTypeInternal _Task_Data_default_instance_;
class WmsData;
class WmsDataDefaultTypeInternal;
extern WmsDataDefaultTypeInternal _WmsData_default_instance_;
}  // namespace agv_mon
PROTOBUF_NAMESPACE_OPEN
template<> ::agv_mon::AgvInfor* Arena::CreateMaybeMessage<::agv_mon::AgvInfor>(Arena*);
template<> ::agv_mon::AgvInfor_AgvBat* Arena::CreateMaybeMessage<::agv_mon::AgvInfor_AgvBat>(Arena*);
template<> ::agv_mon::AgvInfor_AgvLoad* Arena::CreateMaybeMessage<::agv_mon::AgvInfor_AgvLoad>(Arena*);
template<> ::agv_mon::AgvInfor_AgvLoc* Arena::CreateMaybeMessage<::agv_mon::AgvInfor_AgvLoc>(Arena*);
template<> ::agv_mon::AgvInfor_AgvReport* Arena::CreateMaybeMessage<::agv_mon::AgvInfor_AgvReport>(Arena*);
template<> ::agv_mon::AgvInfor_AgvSt* Arena::CreateMaybeMessage<::agv_mon::AgvInfor_AgvSt>(Arena*);
template<> ::agv_mon::AgvInfor_AgvTask* Arena::CreateMaybeMessage<::agv_mon::AgvInfor_AgvTask>(Arena*);
template<> ::agv_mon::AgvInfor_AvoidInfo* Arena::CreateMaybeMessage<::agv_mon::AgvInfor_AvoidInfo>(Arena*);
template<> ::agv_mon::AgvInfor_Basic* Arena::CreateMaybeMessage<::agv_mon::AgvInfor_Basic>(Arena*);
template<> ::agv_mon::AgvInfor_COORD* Arena::CreateMaybeMessage<::agv_mon::AgvInfor_COORD>(Arena*);
template<> ::agv_mon::AgvInfor_TimeInfo* Arena::CreateMaybeMessage<::agv_mon::AgvInfor_TimeInfo>(Arena*);
template<> ::agv_mon::COMD* Arena::CreateMaybeMessage<::agv_mon::COMD>(Arena*);
template<> ::agv_mon::COMDRET* Arena::CreateMaybeMessage<::agv_mon::COMDRET>(Arena*);
template<> ::agv_mon::CxjBack* Arena::CreateMaybeMessage<::agv_mon::CxjBack>(Arena*);
template<> ::agv_mon::CxjData* Arena::CreateMaybeMessage<::agv_mon::CxjData>(Arena*);
template<> ::agv_mon::Dev_Data* Arena::CreateMaybeMessage<::agv_mon::Dev_Data>(Arena*);
template<> ::agv_mon::LiftInfor* Arena::CreateMaybeMessage<::agv_mon::LiftInfor>(Arena*);
template<> ::agv_mon::Mon_Ask* Arena::CreateMaybeMessage<::agv_mon::Mon_Ask>(Arena*);
template<> ::agv_mon::Mon_Data* Arena::CreateMaybeMessage<::agv_mon::Mon_Data>(Arena*);
template<> ::agv_mon::Mon_Route* Arena::CreateMaybeMessage<::agv_mon::Mon_Route>(Arena*);
template<> ::agv_mon::Mon_Route_AgvRoute* Arena::CreateMaybeMessage<::agv_mon::Mon_Route_AgvRoute>(Arena*);
template<> ::agv_mon::Param* Arena::CreateMaybeMessage<::agv_mon::Param>(Arena*);
template<> ::agv_mon::RoutePoint* Arena::CreateMaybeMessage<::agv_mon::RoutePoint>(Arena*);
template<> ::agv_mon::TaskInfo* Arena::CreateMaybeMessage<::agv_mon::TaskInfo>(Arena*);
template<> ::agv_mon::TaskLoc* Arena::CreateMaybeMessage<::agv_mon::TaskLoc>(Arena*);
template<> ::agv_mon::Task_Data* Arena::CreateMaybeMessage<::agv_mon::Task_Data>(Arena*);
template<> ::agv_mon::WmsData* Arena::CreateMaybeMessage<::agv_mon::WmsData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace agv_mon {

enum AgvInfor_AgvReport_ProtectionType : int {
  AgvInfor_AgvReport_ProtectionType_SAFE_FRONT = 0,
  AgvInfor_AgvReport_ProtectionType_SAFE_BACK = 1,
  AgvInfor_AgvReport_ProtectionType_INFR_BACK = 2,
  AgvInfor_AgvReport_ProtectionType_AgvInfor_AgvReport_ProtectionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AgvInfor_AgvReport_ProtectionType_AgvInfor_AgvReport_ProtectionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AgvInfor_AgvReport_ProtectionType_IsValid(int value);
constexpr AgvInfor_AgvReport_ProtectionType AgvInfor_AgvReport_ProtectionType_ProtectionType_MIN = AgvInfor_AgvReport_ProtectionType_SAFE_FRONT;
constexpr AgvInfor_AgvReport_ProtectionType AgvInfor_AgvReport_ProtectionType_ProtectionType_MAX = AgvInfor_AgvReport_ProtectionType_INFR_BACK;
constexpr int AgvInfor_AgvReport_ProtectionType_ProtectionType_ARRAYSIZE = AgvInfor_AgvReport_ProtectionType_ProtectionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AgvInfor_AgvReport_ProtectionType_descriptor();
template<typename T>
inline const std::string& AgvInfor_AgvReport_ProtectionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AgvInfor_AgvReport_ProtectionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AgvInfor_AgvReport_ProtectionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AgvInfor_AgvReport_ProtectionType_descriptor(), enum_t_value);
}
inline bool AgvInfor_AgvReport_ProtectionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AgvInfor_AgvReport_ProtectionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AgvInfor_AgvReport_ProtectionType>(
    AgvInfor_AgvReport_ProtectionType_descriptor(), name, value);
}
enum AgvInfor_AgvReport_DeviceType : int {
  AgvInfor_AgvReport_DeviceType_BAT_LOCK = 0,
  AgvInfor_AgvReport_DeviceType_AgvInfor_AgvReport_DeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AgvInfor_AgvReport_DeviceType_AgvInfor_AgvReport_DeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AgvInfor_AgvReport_DeviceType_IsValid(int value);
constexpr AgvInfor_AgvReport_DeviceType AgvInfor_AgvReport_DeviceType_DeviceType_MIN = AgvInfor_AgvReport_DeviceType_BAT_LOCK;
constexpr AgvInfor_AgvReport_DeviceType AgvInfor_AgvReport_DeviceType_DeviceType_MAX = AgvInfor_AgvReport_DeviceType_BAT_LOCK;
constexpr int AgvInfor_AgvReport_DeviceType_DeviceType_ARRAYSIZE = AgvInfor_AgvReport_DeviceType_DeviceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AgvInfor_AgvReport_DeviceType_descriptor();
template<typename T>
inline const std::string& AgvInfor_AgvReport_DeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AgvInfor_AgvReport_DeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AgvInfor_AgvReport_DeviceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AgvInfor_AgvReport_DeviceType_descriptor(), enum_t_value);
}
inline bool AgvInfor_AgvReport_DeviceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AgvInfor_AgvReport_DeviceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AgvInfor_AgvReport_DeviceType>(
    AgvInfor_AgvReport_DeviceType_descriptor(), name, value);
}
// ===================================================================

class Mon_Ask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.Mon_Ask) */ {
 public:
  inline Mon_Ask() : Mon_Ask(nullptr) {}
  virtual ~Mon_Ask();

  Mon_Ask(const Mon_Ask& from);
  Mon_Ask(Mon_Ask&& from) noexcept
    : Mon_Ask() {
    *this = ::std::move(from);
  }

  inline Mon_Ask& operator=(const Mon_Ask& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mon_Ask& operator=(Mon_Ask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mon_Ask& default_instance();

  static inline const Mon_Ask* internal_default_instance() {
    return reinterpret_cast<const Mon_Ask*>(
               &_Mon_Ask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Mon_Ask& a, Mon_Ask& b) {
    a.Swap(&b);
  }
  inline void Swap(Mon_Ask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mon_Ask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mon_Ask* New() const final {
    return CreateMaybeMessage<Mon_Ask>(nullptr);
  }

  Mon_Ask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mon_Ask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mon_Ask& from);
  void MergeFrom(const Mon_Ask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mon_Ask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.Mon_Ask";
  }
  protected:
  explicit Mon_Ask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kAreaFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // int32 data = 1;
  void clear_data();
  ::PROTOBUF_NAMESPACE_ID::int32 data() const;
  void set_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data() const;
  void _internal_set_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 area = 2;
  void clear_area();
  ::PROTOBUF_NAMESPACE_ID::int32 area() const;
  void set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_area() const;
  void _internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.Mon_Ask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_;
  ::PROTOBUF_NAMESPACE_ID::int32 area_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class Mon_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.Mon_Data) */ {
 public:
  inline Mon_Data() : Mon_Data(nullptr) {}
  virtual ~Mon_Data();

  Mon_Data(const Mon_Data& from);
  Mon_Data(Mon_Data&& from) noexcept
    : Mon_Data() {
    *this = ::std::move(from);
  }

  inline Mon_Data& operator=(const Mon_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mon_Data& operator=(Mon_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mon_Data& default_instance();

  static inline const Mon_Data* internal_default_instance() {
    return reinterpret_cast<const Mon_Data*>(
               &_Mon_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Mon_Data& a, Mon_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Mon_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mon_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mon_Data* New() const final {
    return CreateMaybeMessage<Mon_Data>(nullptr);
  }

  Mon_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mon_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mon_Data& from);
  void MergeFrom(const Mon_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mon_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.Mon_Data";
  }
  protected:
  explicit Mon_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgvinforFieldNumber = 1,
    kLiftinforFieldNumber = 2,
  };
  // repeated .agv_mon.AgvInfor agvinfor = 1;
  int agvinfor_size() const;
  private:
  int _internal_agvinfor_size() const;
  public:
  void clear_agvinfor();
  ::agv_mon::AgvInfor* mutable_agvinfor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::AgvInfor >*
      mutable_agvinfor();
  private:
  const ::agv_mon::AgvInfor& _internal_agvinfor(int index) const;
  ::agv_mon::AgvInfor* _internal_add_agvinfor();
  public:
  const ::agv_mon::AgvInfor& agvinfor(int index) const;
  ::agv_mon::AgvInfor* add_agvinfor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::AgvInfor >&
      agvinfor() const;

  // repeated .agv_mon.LiftInfor liftinfor = 2;
  int liftinfor_size() const;
  private:
  int _internal_liftinfor_size() const;
  public:
  void clear_liftinfor();
  ::agv_mon::LiftInfor* mutable_liftinfor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::LiftInfor >*
      mutable_liftinfor();
  private:
  const ::agv_mon::LiftInfor& _internal_liftinfor(int index) const;
  ::agv_mon::LiftInfor* _internal_add_liftinfor();
  public:
  const ::agv_mon::LiftInfor& liftinfor(int index) const;
  ::agv_mon::LiftInfor* add_liftinfor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::LiftInfor >&
      liftinfor() const;

  // @@protoc_insertion_point(class_scope:agv_mon.Mon_Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::AgvInfor > agvinfor_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::LiftInfor > liftinfor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class AgvInfor_AgvReport PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.AgvInfor.AgvReport) */ {
 public:
  inline AgvInfor_AgvReport() : AgvInfor_AgvReport(nullptr) {}
  virtual ~AgvInfor_AgvReport();

  AgvInfor_AgvReport(const AgvInfor_AgvReport& from);
  AgvInfor_AgvReport(AgvInfor_AgvReport&& from) noexcept
    : AgvInfor_AgvReport() {
    *this = ::std::move(from);
  }

  inline AgvInfor_AgvReport& operator=(const AgvInfor_AgvReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgvInfor_AgvReport& operator=(AgvInfor_AgvReport&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgvInfor_AgvReport& default_instance();

  static inline const AgvInfor_AgvReport* internal_default_instance() {
    return reinterpret_cast<const AgvInfor_AgvReport*>(
               &_AgvInfor_AgvReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AgvInfor_AgvReport& a, AgvInfor_AgvReport& b) {
    a.Swap(&b);
  }
  inline void Swap(AgvInfor_AgvReport* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgvInfor_AgvReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgvInfor_AgvReport* New() const final {
    return CreateMaybeMessage<AgvInfor_AgvReport>(nullptr);
  }

  AgvInfor_AgvReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgvInfor_AgvReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgvInfor_AgvReport& from);
  void MergeFrom(const AgvInfor_AgvReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgvInfor_AgvReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.AgvInfor.AgvReport";
  }
  protected:
  explicit AgvInfor_AgvReport(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AgvInfor_AgvReport_ProtectionType ProtectionType;
  static constexpr ProtectionType SAFE_FRONT =
    AgvInfor_AgvReport_ProtectionType_SAFE_FRONT;
  static constexpr ProtectionType SAFE_BACK =
    AgvInfor_AgvReport_ProtectionType_SAFE_BACK;
  static constexpr ProtectionType INFR_BACK =
    AgvInfor_AgvReport_ProtectionType_INFR_BACK;
  static inline bool ProtectionType_IsValid(int value) {
    return AgvInfor_AgvReport_ProtectionType_IsValid(value);
  }
  static constexpr ProtectionType ProtectionType_MIN =
    AgvInfor_AgvReport_ProtectionType_ProtectionType_MIN;
  static constexpr ProtectionType ProtectionType_MAX =
    AgvInfor_AgvReport_ProtectionType_ProtectionType_MAX;
  static constexpr int ProtectionType_ARRAYSIZE =
    AgvInfor_AgvReport_ProtectionType_ProtectionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProtectionType_descriptor() {
    return AgvInfor_AgvReport_ProtectionType_descriptor();
  }
  template<typename T>
  static inline const std::string& ProtectionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProtectionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProtectionType_Name.");
    return AgvInfor_AgvReport_ProtectionType_Name(enum_t_value);
  }
  static inline bool ProtectionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProtectionType* value) {
    return AgvInfor_AgvReport_ProtectionType_Parse(name, value);
  }

  typedef AgvInfor_AgvReport_DeviceType DeviceType;
  static constexpr DeviceType BAT_LOCK =
    AgvInfor_AgvReport_DeviceType_BAT_LOCK;
  static inline bool DeviceType_IsValid(int value) {
    return AgvInfor_AgvReport_DeviceType_IsValid(value);
  }
  static constexpr DeviceType DeviceType_MIN =
    AgvInfor_AgvReport_DeviceType_DeviceType_MIN;
  static constexpr DeviceType DeviceType_MAX =
    AgvInfor_AgvReport_DeviceType_DeviceType_MAX;
  static constexpr int DeviceType_ARRAYSIZE =
    AgvInfor_AgvReport_DeviceType_DeviceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DeviceType_descriptor() {
    return AgvInfor_AgvReport_DeviceType_descriptor();
  }
  template<typename T>
  static inline const std::string& DeviceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeviceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeviceType_Name.");
    return AgvInfor_AgvReport_DeviceType_Name(enum_t_value);
  }
  static inline bool DeviceType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DeviceType* value) {
    return AgvInfor_AgvReport_DeviceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProtectionFieldNumber = 7,
    kDevStatusFieldNumber = 8,
    kBasicFieldNumber = 1,
    kAgvtaskFieldNumber = 2,
    kAgvlocFieldNumber = 3,
    kAgvstFieldNumber = 4,
    kAgvbatFieldNumber = 5,
    kAgvloadFieldNumber = 6,
  };
  // repeated .agv_mon.Param protection = 7;
  int protection_size() const;
  private:
  int _internal_protection_size() const;
  public:
  void clear_protection();
  ::agv_mon::Param* mutable_protection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Param >*
      mutable_protection();
  private:
  const ::agv_mon::Param& _internal_protection(int index) const;
  ::agv_mon::Param* _internal_add_protection();
  public:
  const ::agv_mon::Param& protection(int index) const;
  ::agv_mon::Param* add_protection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Param >&
      protection() const;

  // repeated .agv_mon.Param dev_status = 8;
  int dev_status_size() const;
  private:
  int _internal_dev_status_size() const;
  public:
  void clear_dev_status();
  ::agv_mon::Param* mutable_dev_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Param >*
      mutable_dev_status();
  private:
  const ::agv_mon::Param& _internal_dev_status(int index) const;
  ::agv_mon::Param* _internal_add_dev_status();
  public:
  const ::agv_mon::Param& dev_status(int index) const;
  ::agv_mon::Param* add_dev_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Param >&
      dev_status() const;

  // .agv_mon.AgvInfor.Basic basic = 1;
  bool has_basic() const;
  private:
  bool _internal_has_basic() const;
  public:
  void clear_basic();
  const ::agv_mon::AgvInfor_Basic& basic() const;
  ::agv_mon::AgvInfor_Basic* release_basic();
  ::agv_mon::AgvInfor_Basic* mutable_basic();
  void set_allocated_basic(::agv_mon::AgvInfor_Basic* basic);
  private:
  const ::agv_mon::AgvInfor_Basic& _internal_basic() const;
  ::agv_mon::AgvInfor_Basic* _internal_mutable_basic();
  public:
  void unsafe_arena_set_allocated_basic(
      ::agv_mon::AgvInfor_Basic* basic);
  ::agv_mon::AgvInfor_Basic* unsafe_arena_release_basic();

  // .agv_mon.AgvInfor.AgvTask agvtask = 2;
  bool has_agvtask() const;
  private:
  bool _internal_has_agvtask() const;
  public:
  void clear_agvtask();
  const ::agv_mon::AgvInfor_AgvTask& agvtask() const;
  ::agv_mon::AgvInfor_AgvTask* release_agvtask();
  ::agv_mon::AgvInfor_AgvTask* mutable_agvtask();
  void set_allocated_agvtask(::agv_mon::AgvInfor_AgvTask* agvtask);
  private:
  const ::agv_mon::AgvInfor_AgvTask& _internal_agvtask() const;
  ::agv_mon::AgvInfor_AgvTask* _internal_mutable_agvtask();
  public:
  void unsafe_arena_set_allocated_agvtask(
      ::agv_mon::AgvInfor_AgvTask* agvtask);
  ::agv_mon::AgvInfor_AgvTask* unsafe_arena_release_agvtask();

  // .agv_mon.AgvInfor.AgvLoc agvloc = 3;
  bool has_agvloc() const;
  private:
  bool _internal_has_agvloc() const;
  public:
  void clear_agvloc();
  const ::agv_mon::AgvInfor_AgvLoc& agvloc() const;
  ::agv_mon::AgvInfor_AgvLoc* release_agvloc();
  ::agv_mon::AgvInfor_AgvLoc* mutable_agvloc();
  void set_allocated_agvloc(::agv_mon::AgvInfor_AgvLoc* agvloc);
  private:
  const ::agv_mon::AgvInfor_AgvLoc& _internal_agvloc() const;
  ::agv_mon::AgvInfor_AgvLoc* _internal_mutable_agvloc();
  public:
  void unsafe_arena_set_allocated_agvloc(
      ::agv_mon::AgvInfor_AgvLoc* agvloc);
  ::agv_mon::AgvInfor_AgvLoc* unsafe_arena_release_agvloc();

  // .agv_mon.AgvInfor.AgvSt agvst = 4;
  bool has_agvst() const;
  private:
  bool _internal_has_agvst() const;
  public:
  void clear_agvst();
  const ::agv_mon::AgvInfor_AgvSt& agvst() const;
  ::agv_mon::AgvInfor_AgvSt* release_agvst();
  ::agv_mon::AgvInfor_AgvSt* mutable_agvst();
  void set_allocated_agvst(::agv_mon::AgvInfor_AgvSt* agvst);
  private:
  const ::agv_mon::AgvInfor_AgvSt& _internal_agvst() const;
  ::agv_mon::AgvInfor_AgvSt* _internal_mutable_agvst();
  public:
  void unsafe_arena_set_allocated_agvst(
      ::agv_mon::AgvInfor_AgvSt* agvst);
  ::agv_mon::AgvInfor_AgvSt* unsafe_arena_release_agvst();

  // .agv_mon.AgvInfor.AgvBat agvbat = 5;
  bool has_agvbat() const;
  private:
  bool _internal_has_agvbat() const;
  public:
  void clear_agvbat();
  const ::agv_mon::AgvInfor_AgvBat& agvbat() const;
  ::agv_mon::AgvInfor_AgvBat* release_agvbat();
  ::agv_mon::AgvInfor_AgvBat* mutable_agvbat();
  void set_allocated_agvbat(::agv_mon::AgvInfor_AgvBat* agvbat);
  private:
  const ::agv_mon::AgvInfor_AgvBat& _internal_agvbat() const;
  ::agv_mon::AgvInfor_AgvBat* _internal_mutable_agvbat();
  public:
  void unsafe_arena_set_allocated_agvbat(
      ::agv_mon::AgvInfor_AgvBat* agvbat);
  ::agv_mon::AgvInfor_AgvBat* unsafe_arena_release_agvbat();

  // .agv_mon.AgvInfor.AgvLoad agvload = 6;
  bool has_agvload() const;
  private:
  bool _internal_has_agvload() const;
  public:
  void clear_agvload();
  const ::agv_mon::AgvInfor_AgvLoad& agvload() const;
  ::agv_mon::AgvInfor_AgvLoad* release_agvload();
  ::agv_mon::AgvInfor_AgvLoad* mutable_agvload();
  void set_allocated_agvload(::agv_mon::AgvInfor_AgvLoad* agvload);
  private:
  const ::agv_mon::AgvInfor_AgvLoad& _internal_agvload() const;
  ::agv_mon::AgvInfor_AgvLoad* _internal_mutable_agvload();
  public:
  void unsafe_arena_set_allocated_agvload(
      ::agv_mon::AgvInfor_AgvLoad* agvload);
  ::agv_mon::AgvInfor_AgvLoad* unsafe_arena_release_agvload();

  // @@protoc_insertion_point(class_scope:agv_mon.AgvInfor.AgvReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Param > protection_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Param > dev_status_;
  ::agv_mon::AgvInfor_Basic* basic_;
  ::agv_mon::AgvInfor_AgvTask* agvtask_;
  ::agv_mon::AgvInfor_AgvLoc* agvloc_;
  ::agv_mon::AgvInfor_AgvSt* agvst_;
  ::agv_mon::AgvInfor_AgvBat* agvbat_;
  ::agv_mon::AgvInfor_AgvLoad* agvload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class AgvInfor_Basic PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.AgvInfor.Basic) */ {
 public:
  inline AgvInfor_Basic() : AgvInfor_Basic(nullptr) {}
  virtual ~AgvInfor_Basic();

  AgvInfor_Basic(const AgvInfor_Basic& from);
  AgvInfor_Basic(AgvInfor_Basic&& from) noexcept
    : AgvInfor_Basic() {
    *this = ::std::move(from);
  }

  inline AgvInfor_Basic& operator=(const AgvInfor_Basic& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgvInfor_Basic& operator=(AgvInfor_Basic&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgvInfor_Basic& default_instance();

  static inline const AgvInfor_Basic* internal_default_instance() {
    return reinterpret_cast<const AgvInfor_Basic*>(
               &_AgvInfor_Basic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AgvInfor_Basic& a, AgvInfor_Basic& b) {
    a.Swap(&b);
  }
  inline void Swap(AgvInfor_Basic* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgvInfor_Basic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgvInfor_Basic* New() const final {
    return CreateMaybeMessage<AgvInfor_Basic>(nullptr);
  }

  AgvInfor_Basic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgvInfor_Basic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgvInfor_Basic& from);
  void MergeFrom(const AgvInfor_Basic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgvInfor_Basic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.AgvInfor.Basic";
  }
  protected:
  explicit AgvInfor_Basic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 6,
    kTsFieldNumber = 1,
    kPidFieldNumber = 2,
    kAreaFieldNumber = 3,
    kIdFieldNumber = 4,
    kTypeFieldNumber = 5,
    kVersionTsFieldNumber = 7,
    kBetaFieldNumber = 8,
  };
  // string version = 6;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // int64 ts = 1;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 pid = 2;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 area = 3;
  void clear_area();
  ::PROTOBUF_NAMESPACE_ID::int32 area() const;
  void set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_area() const;
  void _internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 4;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 5;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 version_ts = 7;
  void clear_version_ts();
  ::PROTOBUF_NAMESPACE_ID::int32 version_ts() const;
  void set_version_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version_ts() const;
  void _internal_set_version_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 beta = 8;
  void clear_beta();
  ::PROTOBUF_NAMESPACE_ID::int32 beta() const;
  void set_beta(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_beta() const;
  void _internal_set_beta(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.AgvInfor.Basic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::int64 ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 area_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 beta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class AgvInfor_AgvTask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.AgvInfor.AgvTask) */ {
 public:
  inline AgvInfor_AgvTask() : AgvInfor_AgvTask(nullptr) {}
  virtual ~AgvInfor_AgvTask();

  AgvInfor_AgvTask(const AgvInfor_AgvTask& from);
  AgvInfor_AgvTask(AgvInfor_AgvTask&& from) noexcept
    : AgvInfor_AgvTask() {
    *this = ::std::move(from);
  }

  inline AgvInfor_AgvTask& operator=(const AgvInfor_AgvTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgvInfor_AgvTask& operator=(AgvInfor_AgvTask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgvInfor_AgvTask& default_instance();

  static inline const AgvInfor_AgvTask* internal_default_instance() {
    return reinterpret_cast<const AgvInfor_AgvTask*>(
               &_AgvInfor_AgvTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AgvInfor_AgvTask& a, AgvInfor_AgvTask& b) {
    a.Swap(&b);
  }
  inline void Swap(AgvInfor_AgvTask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgvInfor_AgvTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgvInfor_AgvTask* New() const final {
    return CreateMaybeMessage<AgvInfor_AgvTask>(nullptr);
  }

  AgvInfor_AgvTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgvInfor_AgvTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgvInfor_AgvTask& from);
  void MergeFrom(const AgvInfor_AgvTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgvInfor_AgvTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.AgvInfor.AgvTask";
  }
  protected:
  explicit AgvInfor_AgvTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kTaskTypeFieldNumber = 2,
    kStartIdFieldNumber = 3,
    kEndIdFieldNumber = 4,
    kDetourIdFieldNumber = 5,
    kNxtStaFieldNumber = 6,
    kCurSegFieldNumber = 7,
    kNxtSegFieldNumber = 8,
    kStartLayerFieldNumber = 9,
    kEndLayerFieldNumber = 10,
  };
  // int32 task_id = 1;
  void clear_task_id();
  ::PROTOBUF_NAMESPACE_ID::int32 task_id() const;
  void set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_task_id() const;
  void _internal_set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 task_type = 2;
  void clear_task_type();
  ::PROTOBUF_NAMESPACE_ID::int32 task_type() const;
  void set_task_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_task_type() const;
  void _internal_set_task_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 start_id = 3;
  void clear_start_id();
  ::PROTOBUF_NAMESPACE_ID::int32 start_id() const;
  void set_start_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_id() const;
  void _internal_set_start_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 end_id = 4;
  void clear_end_id();
  ::PROTOBUF_NAMESPACE_ID::int32 end_id() const;
  void set_end_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_id() const;
  void _internal_set_end_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 detour_id = 5;
  void clear_detour_id();
  ::PROTOBUF_NAMESPACE_ID::int32 detour_id() const;
  void set_detour_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_detour_id() const;
  void _internal_set_detour_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 nxt_sta = 6;
  void clear_nxt_sta();
  ::PROTOBUF_NAMESPACE_ID::int32 nxt_sta() const;
  void set_nxt_sta(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nxt_sta() const;
  void _internal_set_nxt_sta(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 cur_seg = 7;
  void clear_cur_seg();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_seg() const;
  void set_cur_seg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_seg() const;
  void _internal_set_cur_seg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 nxt_seg = 8;
  void clear_nxt_seg();
  ::PROTOBUF_NAMESPACE_ID::int32 nxt_seg() const;
  void set_nxt_seg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nxt_seg() const;
  void _internal_set_nxt_seg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 start_layer = 9;
  void clear_start_layer();
  ::PROTOBUF_NAMESPACE_ID::int32 start_layer() const;
  void set_start_layer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_layer() const;
  void _internal_set_start_layer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 end_layer = 10;
  void clear_end_layer();
  ::PROTOBUF_NAMESPACE_ID::int32 end_layer() const;
  void set_end_layer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_layer() const;
  void _internal_set_end_layer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.AgvInfor.AgvTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 task_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 task_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 detour_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 nxt_sta_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_seg_;
  ::PROTOBUF_NAMESPACE_ID::int32 nxt_seg_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_layer_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_layer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class AgvInfor_AgvLoc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.AgvInfor.AgvLoc) */ {
 public:
  inline AgvInfor_AgvLoc() : AgvInfor_AgvLoc(nullptr) {}
  virtual ~AgvInfor_AgvLoc();

  AgvInfor_AgvLoc(const AgvInfor_AgvLoc& from);
  AgvInfor_AgvLoc(AgvInfor_AgvLoc&& from) noexcept
    : AgvInfor_AgvLoc() {
    *this = ::std::move(from);
  }

  inline AgvInfor_AgvLoc& operator=(const AgvInfor_AgvLoc& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgvInfor_AgvLoc& operator=(AgvInfor_AgvLoc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgvInfor_AgvLoc& default_instance();

  static inline const AgvInfor_AgvLoc* internal_default_instance() {
    return reinterpret_cast<const AgvInfor_AgvLoc*>(
               &_AgvInfor_AgvLoc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AgvInfor_AgvLoc& a, AgvInfor_AgvLoc& b) {
    a.Swap(&b);
  }
  inline void Swap(AgvInfor_AgvLoc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgvInfor_AgvLoc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgvInfor_AgvLoc* New() const final {
    return CreateMaybeMessage<AgvInfor_AgvLoc>(nullptr);
  }

  AgvInfor_AgvLoc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgvInfor_AgvLoc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgvInfor_AgvLoc& from);
  void MergeFrom(const AgvInfor_AgvLoc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgvInfor_AgvLoc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.AgvInfor.AgvLoc";
  }
  protected:
  explicit AgvInfor_AgvLoc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReflectIdFieldNumber = 7,
    kPosFieldNumber = 1,
    kNavFieldNumber = 2,
    kPosAngFieldNumber = 3,
    kCurStaFieldNumber = 4,
    kSeeReflectFieldNumber = 5,
    kUseReflectFieldNumber = 6,
    kInLiftFieldNumber = 8,
    kFloorFieldNumber = 9,
    kBindAreaFieldNumber = 10,
    kStaLimitFieldNumber = 11,
  };
  // repeated int32 reflect_id = 7;
  int reflect_id_size() const;
  private:
  int _internal_reflect_id_size() const;
  public:
  void clear_reflect_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reflect_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_reflect_id() const;
  void _internal_add_reflect_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_reflect_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 reflect_id(int index) const;
  void set_reflect_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_reflect_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      reflect_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_reflect_id();

  // .agv_mon.AgvInfor.COORD pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::agv_mon::AgvInfor_COORD& pos() const;
  ::agv_mon::AgvInfor_COORD* release_pos();
  ::agv_mon::AgvInfor_COORD* mutable_pos();
  void set_allocated_pos(::agv_mon::AgvInfor_COORD* pos);
  private:
  const ::agv_mon::AgvInfor_COORD& _internal_pos() const;
  ::agv_mon::AgvInfor_COORD* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::agv_mon::AgvInfor_COORD* pos);
  ::agv_mon::AgvInfor_COORD* unsafe_arena_release_pos();

  // .agv_mon.AgvInfor.COORD nav = 2;
  bool has_nav() const;
  private:
  bool _internal_has_nav() const;
  public:
  void clear_nav();
  const ::agv_mon::AgvInfor_COORD& nav() const;
  ::agv_mon::AgvInfor_COORD* release_nav();
  ::agv_mon::AgvInfor_COORD* mutable_nav();
  void set_allocated_nav(::agv_mon::AgvInfor_COORD* nav);
  private:
  const ::agv_mon::AgvInfor_COORD& _internal_nav() const;
  ::agv_mon::AgvInfor_COORD* _internal_mutable_nav();
  public:
  void unsafe_arena_set_allocated_nav(
      ::agv_mon::AgvInfor_COORD* nav);
  ::agv_mon::AgvInfor_COORD* unsafe_arena_release_nav();

  // float pos_ang = 3;
  void clear_pos_ang();
  float pos_ang() const;
  void set_pos_ang(float value);
  private:
  float _internal_pos_ang() const;
  void _internal_set_pos_ang(float value);
  public:

  // sint32 cur_sta = 4;
  void clear_cur_sta();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_sta() const;
  void set_cur_sta(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_sta() const;
  void _internal_set_cur_sta(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 see_reflect = 5;
  void clear_see_reflect();
  ::PROTOBUF_NAMESPACE_ID::int32 see_reflect() const;
  void set_see_reflect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_see_reflect() const;
  void _internal_set_see_reflect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 use_reflect = 6;
  void clear_use_reflect();
  ::PROTOBUF_NAMESPACE_ID::int32 use_reflect() const;
  void set_use_reflect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_use_reflect() const;
  void _internal_set_use_reflect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 in_lift = 8;
  void clear_in_lift();
  ::PROTOBUF_NAMESPACE_ID::int32 in_lift() const;
  void set_in_lift(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_in_lift() const;
  void _internal_set_in_lift(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 floor = 9;
  void clear_floor();
  ::PROTOBUF_NAMESPACE_ID::int32 floor() const;
  void set_floor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_floor() const;
  void _internal_set_floor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 bind_area = 10;
  void clear_bind_area();
  ::PROTOBUF_NAMESPACE_ID::int32 bind_area() const;
  void set_bind_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bind_area() const;
  void _internal_set_bind_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 sta_limit = 11;
  void clear_sta_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 sta_limit() const;
  void set_sta_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sta_limit() const;
  void _internal_set_sta_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.AgvInfor.AgvLoc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > reflect_id_;
  mutable std::atomic<int> _reflect_id_cached_byte_size_;
  ::agv_mon::AgvInfor_COORD* pos_;
  ::agv_mon::AgvInfor_COORD* nav_;
  float pos_ang_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_sta_;
  ::PROTOBUF_NAMESPACE_ID::int32 see_reflect_;
  ::PROTOBUF_NAMESPACE_ID::int32 use_reflect_;
  ::PROTOBUF_NAMESPACE_ID::int32 in_lift_;
  ::PROTOBUF_NAMESPACE_ID::int32 floor_;
  ::PROTOBUF_NAMESPACE_ID::int32 bind_area_;
  ::PROTOBUF_NAMESPACE_ID::int32 sta_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class AgvInfor_AgvSt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.AgvInfor.AgvSt) */ {
 public:
  inline AgvInfor_AgvSt() : AgvInfor_AgvSt(nullptr) {}
  virtual ~AgvInfor_AgvSt();

  AgvInfor_AgvSt(const AgvInfor_AgvSt& from);
  AgvInfor_AgvSt(AgvInfor_AgvSt&& from) noexcept
    : AgvInfor_AgvSt() {
    *this = ::std::move(from);
  }

  inline AgvInfor_AgvSt& operator=(const AgvInfor_AgvSt& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgvInfor_AgvSt& operator=(AgvInfor_AgvSt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgvInfor_AgvSt& default_instance();

  static inline const AgvInfor_AgvSt* internal_default_instance() {
    return reinterpret_cast<const AgvInfor_AgvSt*>(
               &_AgvInfor_AgvSt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AgvInfor_AgvSt& a, AgvInfor_AgvSt& b) {
    a.Swap(&b);
  }
  inline void Swap(AgvInfor_AgvSt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgvInfor_AgvSt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgvInfor_AgvSt* New() const final {
    return CreateMaybeMessage<AgvInfor_AgvSt>(nullptr);
  }

  AgvInfor_AgvSt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgvInfor_AgvSt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgvInfor_AgvSt& from);
  void MergeFrom(const AgvInfor_AgvSt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgvInfor_AgvSt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.AgvInfor.AgvSt";
  }
  protected:
  explicit AgvInfor_AgvSt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirFieldNumber = 1,
    kSpeedFieldNumber = 2,
    kStateFieldNumber = 3,
    kStatusFieldNumber = 4,
    kSoftstopFieldNumber = 5,
    kErrorFieldNumber = 6,
    kSpeedlimitFieldNumber = 7,
  };
  // sint32 dir = 1;
  void clear_dir();
  ::PROTOBUF_NAMESPACE_ID::int32 dir() const;
  void set_dir(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dir() const;
  void _internal_set_dir(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 speed = 2;
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 3;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 4;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 softstop = 5;
  void clear_softstop();
  ::PROTOBUF_NAMESPACE_ID::int32 softstop() const;
  void set_softstop(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_softstop() const;
  void _internal_set_softstop(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 error = 6;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 speedlimit = 7;
  void clear_speedlimit();
  ::PROTOBUF_NAMESPACE_ID::int32 speedlimit() const;
  void set_speedlimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speedlimit() const;
  void _internal_set_speedlimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.AgvInfor.AgvSt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 dir_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 softstop_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  ::PROTOBUF_NAMESPACE_ID::int32 speedlimit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class AgvInfor_AgvBat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.AgvInfor.AgvBat) */ {
 public:
  inline AgvInfor_AgvBat() : AgvInfor_AgvBat(nullptr) {}
  virtual ~AgvInfor_AgvBat();

  AgvInfor_AgvBat(const AgvInfor_AgvBat& from);
  AgvInfor_AgvBat(AgvInfor_AgvBat&& from) noexcept
    : AgvInfor_AgvBat() {
    *this = ::std::move(from);
  }

  inline AgvInfor_AgvBat& operator=(const AgvInfor_AgvBat& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgvInfor_AgvBat& operator=(AgvInfor_AgvBat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgvInfor_AgvBat& default_instance();

  static inline const AgvInfor_AgvBat* internal_default_instance() {
    return reinterpret_cast<const AgvInfor_AgvBat*>(
               &_AgvInfor_AgvBat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AgvInfor_AgvBat& a, AgvInfor_AgvBat& b) {
    a.Swap(&b);
  }
  inline void Swap(AgvInfor_AgvBat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgvInfor_AgvBat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgvInfor_AgvBat* New() const final {
    return CreateMaybeMessage<AgvInfor_AgvBat>(nullptr);
  }

  AgvInfor_AgvBat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgvInfor_AgvBat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgvInfor_AgvBat& from);
  void MergeFrom(const AgvInfor_AgvBat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgvInfor_AgvBat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.AgvInfor.AgvBat";
  }
  protected:
  explicit AgvInfor_AgvBat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatteryFieldNumber = 1,
    kChargingtimeFieldNumber = 2,
  };
  // float battery = 1;
  void clear_battery();
  float battery() const;
  void set_battery(float value);
  private:
  float _internal_battery() const;
  void _internal_set_battery(float value);
  public:

  // sint32 chargingtime = 2;
  void clear_chargingtime();
  ::PROTOBUF_NAMESPACE_ID::int32 chargingtime() const;
  void set_chargingtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chargingtime() const;
  void _internal_set_chargingtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.AgvInfor.AgvBat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float battery_;
  ::PROTOBUF_NAMESPACE_ID::int32 chargingtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class AgvInfor_AgvLoad PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.AgvInfor.AgvLoad) */ {
 public:
  inline AgvInfor_AgvLoad() : AgvInfor_AgvLoad(nullptr) {}
  virtual ~AgvInfor_AgvLoad();

  AgvInfor_AgvLoad(const AgvInfor_AgvLoad& from);
  AgvInfor_AgvLoad(AgvInfor_AgvLoad&& from) noexcept
    : AgvInfor_AgvLoad() {
    *this = ::std::move(from);
  }

  inline AgvInfor_AgvLoad& operator=(const AgvInfor_AgvLoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgvInfor_AgvLoad& operator=(AgvInfor_AgvLoad&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgvInfor_AgvLoad& default_instance();

  static inline const AgvInfor_AgvLoad* internal_default_instance() {
    return reinterpret_cast<const AgvInfor_AgvLoad*>(
               &_AgvInfor_AgvLoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AgvInfor_AgvLoad& a, AgvInfor_AgvLoad& b) {
    a.Swap(&b);
  }
  inline void Swap(AgvInfor_AgvLoad* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgvInfor_AgvLoad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgvInfor_AgvLoad* New() const final {
    return CreateMaybeMessage<AgvInfor_AgvLoad>(nullptr);
  }

  AgvInfor_AgvLoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgvInfor_AgvLoad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgvInfor_AgvLoad& from);
  void MergeFrom(const AgvInfor_AgvLoad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgvInfor_AgvLoad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.AgvInfor.AgvLoad";
  }
  protected:
  explicit AgvInfor_AgvLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadFieldNumber = 1,
    kHydHeightFieldNumber = 2,
  };
  // sint32 load = 1;
  void clear_load();
  ::PROTOBUF_NAMESPACE_ID::int32 load() const;
  void set_load(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_load() const;
  void _internal_set_load(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hyd_height = 2;
  void clear_hyd_height();
  ::PROTOBUF_NAMESPACE_ID::int32 hyd_height() const;
  void set_hyd_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hyd_height() const;
  void _internal_set_hyd_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.AgvInfor.AgvLoad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 load_;
  ::PROTOBUF_NAMESPACE_ID::int32 hyd_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class AgvInfor_AvoidInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.AgvInfor.AvoidInfo) */ {
 public:
  inline AgvInfor_AvoidInfo() : AgvInfor_AvoidInfo(nullptr) {}
  virtual ~AgvInfor_AvoidInfo();

  AgvInfor_AvoidInfo(const AgvInfor_AvoidInfo& from);
  AgvInfor_AvoidInfo(AgvInfor_AvoidInfo&& from) noexcept
    : AgvInfor_AvoidInfo() {
    *this = ::std::move(from);
  }

  inline AgvInfor_AvoidInfo& operator=(const AgvInfor_AvoidInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgvInfor_AvoidInfo& operator=(AgvInfor_AvoidInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgvInfor_AvoidInfo& default_instance();

  static inline const AgvInfor_AvoidInfo* internal_default_instance() {
    return reinterpret_cast<const AgvInfor_AvoidInfo*>(
               &_AgvInfor_AvoidInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AgvInfor_AvoidInfo& a, AgvInfor_AvoidInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AgvInfor_AvoidInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgvInfor_AvoidInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgvInfor_AvoidInfo* New() const final {
    return CreateMaybeMessage<AgvInfor_AvoidInfo>(nullptr);
  }

  AgvInfor_AvoidInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgvInfor_AvoidInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgvInfor_AvoidInfo& from);
  void MergeFrom(const AgvInfor_AvoidInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgvInfor_AvoidInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.AgvInfor.AvoidInfo";
  }
  protected:
  explicit AgvInfor_AvoidInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgvoutlineFieldNumber = 1,
    kGoodsoutlineFieldNumber = 2,
    kOccupypointFieldNumber = 3,
    kScanpointFieldNumber = 4,
    kStopStatusFieldNumber = 5,
    kStopLevelFieldNumber = 6,
    kStopByAGVIdFieldNumber = 7,
    kStopReasonFieldNumber = 8,
    kSpeedLevelFieldNumber = 9,
    kSpeedByAGVIdFieldNumber = 10,
    kSpeedReasonFieldNumber = 11,
    kOutLineTypeFieldNumber = 12,
    kConfPointFieldNumber = 13,
  };
  // repeated .agv_mon.AgvInfor.COORD agvoutline = 1;
  int agvoutline_size() const;
  private:
  int _internal_agvoutline_size() const;
  public:
  void clear_agvoutline();
  ::agv_mon::AgvInfor_COORD* mutable_agvoutline(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::AgvInfor_COORD >*
      mutable_agvoutline();
  private:
  const ::agv_mon::AgvInfor_COORD& _internal_agvoutline(int index) const;
  ::agv_mon::AgvInfor_COORD* _internal_add_agvoutline();
  public:
  const ::agv_mon::AgvInfor_COORD& agvoutline(int index) const;
  ::agv_mon::AgvInfor_COORD* add_agvoutline();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::AgvInfor_COORD >&
      agvoutline() const;

  // repeated .agv_mon.AgvInfor.COORD goodsoutline = 2;
  int goodsoutline_size() const;
  private:
  int _internal_goodsoutline_size() const;
  public:
  void clear_goodsoutline();
  ::agv_mon::AgvInfor_COORD* mutable_goodsoutline(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::AgvInfor_COORD >*
      mutable_goodsoutline();
  private:
  const ::agv_mon::AgvInfor_COORD& _internal_goodsoutline(int index) const;
  ::agv_mon::AgvInfor_COORD* _internal_add_goodsoutline();
  public:
  const ::agv_mon::AgvInfor_COORD& goodsoutline(int index) const;
  ::agv_mon::AgvInfor_COORD* add_goodsoutline();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::AgvInfor_COORD >&
      goodsoutline() const;

  // repeated int32 occupypoint = 3;
  int occupypoint_size() const;
  private:
  int _internal_occupypoint_size() const;
  public:
  void clear_occupypoint();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_occupypoint(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_occupypoint() const;
  void _internal_add_occupypoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_occupypoint();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 occupypoint(int index) const;
  void set_occupypoint(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_occupypoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      occupypoint() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_occupypoint();

  // repeated int32 scanpoint = 4;
  int scanpoint_size() const;
  private:
  int _internal_scanpoint_size() const;
  public:
  void clear_scanpoint();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scanpoint(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_scanpoint() const;
  void _internal_add_scanpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_scanpoint();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 scanpoint(int index) const;
  void set_scanpoint(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_scanpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      scanpoint() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_scanpoint();

  // sint32 stopStatus = 5;
  void clear_stopstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 stopstatus() const;
  void set_stopstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stopstatus() const;
  void _internal_set_stopstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 stopLevel = 6;
  void clear_stoplevel();
  ::PROTOBUF_NAMESPACE_ID::int32 stoplevel() const;
  void set_stoplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stoplevel() const;
  void _internal_set_stoplevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 stopByAGVId = 7;
  void clear_stopbyagvid();
  ::PROTOBUF_NAMESPACE_ID::int32 stopbyagvid() const;
  void set_stopbyagvid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stopbyagvid() const;
  void _internal_set_stopbyagvid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 stopReason = 8;
  void clear_stopreason();
  ::PROTOBUF_NAMESPACE_ID::int32 stopreason() const;
  void set_stopreason(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stopreason() const;
  void _internal_set_stopreason(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 speedLevel = 9;
  void clear_speedlevel();
  ::PROTOBUF_NAMESPACE_ID::int32 speedlevel() const;
  void set_speedlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speedlevel() const;
  void _internal_set_speedlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 speedByAGVId = 10;
  void clear_speedbyagvid();
  ::PROTOBUF_NAMESPACE_ID::int32 speedbyagvid() const;
  void set_speedbyagvid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speedbyagvid() const;
  void _internal_set_speedbyagvid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 speedReason = 11;
  void clear_speedreason();
  ::PROTOBUF_NAMESPACE_ID::int32 speedreason() const;
  void set_speedreason(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speedreason() const;
  void _internal_set_speedreason(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 outLineType = 12;
  void clear_outlinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 outlinetype() const;
  void set_outlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_outlinetype() const;
  void _internal_set_outlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 confPoint = 13;
  void clear_confpoint();
  ::PROTOBUF_NAMESPACE_ID::int32 confpoint() const;
  void set_confpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confpoint() const;
  void _internal_set_confpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.AgvInfor.AvoidInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::AgvInfor_COORD > agvoutline_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::AgvInfor_COORD > goodsoutline_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > occupypoint_;
  mutable std::atomic<int> _occupypoint_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > scanpoint_;
  mutable std::atomic<int> _scanpoint_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 stopstatus_;
  ::PROTOBUF_NAMESPACE_ID::int32 stoplevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 stopbyagvid_;
  ::PROTOBUF_NAMESPACE_ID::int32 stopreason_;
  ::PROTOBUF_NAMESPACE_ID::int32 speedlevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 speedbyagvid_;
  ::PROTOBUF_NAMESPACE_ID::int32 speedreason_;
  ::PROTOBUF_NAMESPACE_ID::int32 outlinetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 confpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class AgvInfor_TimeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.AgvInfor.TimeInfo) */ {
 public:
  inline AgvInfor_TimeInfo() : AgvInfor_TimeInfo(nullptr) {}
  virtual ~AgvInfor_TimeInfo();

  AgvInfor_TimeInfo(const AgvInfor_TimeInfo& from);
  AgvInfor_TimeInfo(AgvInfor_TimeInfo&& from) noexcept
    : AgvInfor_TimeInfo() {
    *this = ::std::move(from);
  }

  inline AgvInfor_TimeInfo& operator=(const AgvInfor_TimeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgvInfor_TimeInfo& operator=(AgvInfor_TimeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgvInfor_TimeInfo& default_instance();

  static inline const AgvInfor_TimeInfo* internal_default_instance() {
    return reinterpret_cast<const AgvInfor_TimeInfo*>(
               &_AgvInfor_TimeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AgvInfor_TimeInfo& a, AgvInfor_TimeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AgvInfor_TimeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgvInfor_TimeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgvInfor_TimeInfo* New() const final {
    return CreateMaybeMessage<AgvInfor_TimeInfo>(nullptr);
  }

  AgvInfor_TimeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgvInfor_TimeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgvInfor_TimeInfo& from);
  void MergeFrom(const AgvInfor_TimeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgvInfor_TimeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.AgvInfor.TimeInfo";
  }
  protected:
  explicit AgvInfor_TimeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdleWaitTsFieldNumber = 1,
    kAvoidSetTsFieldNumber = 2,
    kManualOnTsFieldNumber = 3,
    kSoftstopOnTsFieldNumber = 4,
    kWarningOnTsFieldNumber = 5,
  };
  // int32 idle_wait_ts = 1;
  void clear_idle_wait_ts();
  ::PROTOBUF_NAMESPACE_ID::int32 idle_wait_ts() const;
  void set_idle_wait_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idle_wait_ts() const;
  void _internal_set_idle_wait_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avoid_set_ts = 2;
  void clear_avoid_set_ts();
  ::PROTOBUF_NAMESPACE_ID::int32 avoid_set_ts() const;
  void set_avoid_set_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avoid_set_ts() const;
  void _internal_set_avoid_set_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 manual_on_ts = 3;
  void clear_manual_on_ts();
  ::PROTOBUF_NAMESPACE_ID::int32 manual_on_ts() const;
  void set_manual_on_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_manual_on_ts() const;
  void _internal_set_manual_on_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 softstop_on_ts = 4;
  void clear_softstop_on_ts();
  ::PROTOBUF_NAMESPACE_ID::int32 softstop_on_ts() const;
  void set_softstop_on_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_softstop_on_ts() const;
  void _internal_set_softstop_on_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 warning_on_ts = 5;
  void clear_warning_on_ts();
  ::PROTOBUF_NAMESPACE_ID::int32 warning_on_ts() const;
  void set_warning_on_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_warning_on_ts() const;
  void _internal_set_warning_on_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.AgvInfor.TimeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 idle_wait_ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 avoid_set_ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 manual_on_ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 softstop_on_ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 warning_on_ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class AgvInfor_COORD PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.AgvInfor.COORD) */ {
 public:
  inline AgvInfor_COORD() : AgvInfor_COORD(nullptr) {}
  virtual ~AgvInfor_COORD();

  AgvInfor_COORD(const AgvInfor_COORD& from);
  AgvInfor_COORD(AgvInfor_COORD&& from) noexcept
    : AgvInfor_COORD() {
    *this = ::std::move(from);
  }

  inline AgvInfor_COORD& operator=(const AgvInfor_COORD& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgvInfor_COORD& operator=(AgvInfor_COORD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgvInfor_COORD& default_instance();

  static inline const AgvInfor_COORD* internal_default_instance() {
    return reinterpret_cast<const AgvInfor_COORD*>(
               &_AgvInfor_COORD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AgvInfor_COORD& a, AgvInfor_COORD& b) {
    a.Swap(&b);
  }
  inline void Swap(AgvInfor_COORD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgvInfor_COORD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgvInfor_COORD* New() const final {
    return CreateMaybeMessage<AgvInfor_COORD>(nullptr);
  }

  AgvInfor_COORD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgvInfor_COORD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgvInfor_COORD& from);
  void MergeFrom(const AgvInfor_COORD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgvInfor_COORD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.AgvInfor.COORD";
  }
  protected:
  explicit AgvInfor_COORD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // sint32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.AgvInfor.COORD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class AgvInfor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.AgvInfor) */ {
 public:
  inline AgvInfor() : AgvInfor(nullptr) {}
  virtual ~AgvInfor();

  AgvInfor(const AgvInfor& from);
  AgvInfor(AgvInfor&& from) noexcept
    : AgvInfor() {
    *this = ::std::move(from);
  }

  inline AgvInfor& operator=(const AgvInfor& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgvInfor& operator=(AgvInfor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgvInfor& default_instance();

  static inline const AgvInfor* internal_default_instance() {
    return reinterpret_cast<const AgvInfor*>(
               &_AgvInfor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AgvInfor& a, AgvInfor& b) {
    a.Swap(&b);
  }
  inline void Swap(AgvInfor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgvInfor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgvInfor* New() const final {
    return CreateMaybeMessage<AgvInfor>(nullptr);
  }

  AgvInfor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgvInfor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgvInfor& from);
  void MergeFrom(const AgvInfor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgvInfor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.AgvInfor";
  }
  protected:
  explicit AgvInfor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AgvInfor_AgvReport AgvReport;
  typedef AgvInfor_Basic Basic;
  typedef AgvInfor_AgvTask AgvTask;
  typedef AgvInfor_AgvLoc AgvLoc;
  typedef AgvInfor_AgvSt AgvSt;
  typedef AgvInfor_AgvBat AgvBat;
  typedef AgvInfor_AgvLoad AgvLoad;
  typedef AgvInfor_AvoidInfo AvoidInfo;
  typedef AgvInfor_TimeInfo TimeInfo;
  typedef AgvInfor_COORD COORD;

  // accessors -------------------------------------------------------

  enum : int {
    kRouteIdFieldNumber = 7,
    kRoutepointFieldNumber = 8,
    kAgvreportFieldNumber = 4,
    kAvoidinfoFieldNumber = 5,
    kTimeinfoFieldNumber = 6,
    kTsFieldNumber = 2,
    kIpFieldNumber = 1,
    kOlFieldNumber = 3,
  };
  // repeated int32 route_id = 7;
  int route_id_size() const;
  private:
  int _internal_route_id_size() const;
  public:
  void clear_route_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_route_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_route_id() const;
  void _internal_add_route_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_route_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 route_id(int index) const;
  void set_route_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_route_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      route_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_route_id();

  // repeated .agv_mon.RoutePoint routepoint = 8;
  int routepoint_size() const;
  private:
  int _internal_routepoint_size() const;
  public:
  void clear_routepoint();
  ::agv_mon::RoutePoint* mutable_routepoint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::RoutePoint >*
      mutable_routepoint();
  private:
  const ::agv_mon::RoutePoint& _internal_routepoint(int index) const;
  ::agv_mon::RoutePoint* _internal_add_routepoint();
  public:
  const ::agv_mon::RoutePoint& routepoint(int index) const;
  ::agv_mon::RoutePoint* add_routepoint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::RoutePoint >&
      routepoint() const;

  // .agv_mon.AgvInfor.AgvReport agvreport = 4;
  bool has_agvreport() const;
  private:
  bool _internal_has_agvreport() const;
  public:
  void clear_agvreport();
  const ::agv_mon::AgvInfor_AgvReport& agvreport() const;
  ::agv_mon::AgvInfor_AgvReport* release_agvreport();
  ::agv_mon::AgvInfor_AgvReport* mutable_agvreport();
  void set_allocated_agvreport(::agv_mon::AgvInfor_AgvReport* agvreport);
  private:
  const ::agv_mon::AgvInfor_AgvReport& _internal_agvreport() const;
  ::agv_mon::AgvInfor_AgvReport* _internal_mutable_agvreport();
  public:
  void unsafe_arena_set_allocated_agvreport(
      ::agv_mon::AgvInfor_AgvReport* agvreport);
  ::agv_mon::AgvInfor_AgvReport* unsafe_arena_release_agvreport();

  // .agv_mon.AgvInfor.AvoidInfo avoidinfo = 5;
  bool has_avoidinfo() const;
  private:
  bool _internal_has_avoidinfo() const;
  public:
  void clear_avoidinfo();
  const ::agv_mon::AgvInfor_AvoidInfo& avoidinfo() const;
  ::agv_mon::AgvInfor_AvoidInfo* release_avoidinfo();
  ::agv_mon::AgvInfor_AvoidInfo* mutable_avoidinfo();
  void set_allocated_avoidinfo(::agv_mon::AgvInfor_AvoidInfo* avoidinfo);
  private:
  const ::agv_mon::AgvInfor_AvoidInfo& _internal_avoidinfo() const;
  ::agv_mon::AgvInfor_AvoidInfo* _internal_mutable_avoidinfo();
  public:
  void unsafe_arena_set_allocated_avoidinfo(
      ::agv_mon::AgvInfor_AvoidInfo* avoidinfo);
  ::agv_mon::AgvInfor_AvoidInfo* unsafe_arena_release_avoidinfo();

  // .agv_mon.AgvInfor.TimeInfo timeinfo = 6;
  bool has_timeinfo() const;
  private:
  bool _internal_has_timeinfo() const;
  public:
  void clear_timeinfo();
  const ::agv_mon::AgvInfor_TimeInfo& timeinfo() const;
  ::agv_mon::AgvInfor_TimeInfo* release_timeinfo();
  ::agv_mon::AgvInfor_TimeInfo* mutable_timeinfo();
  void set_allocated_timeinfo(::agv_mon::AgvInfor_TimeInfo* timeinfo);
  private:
  const ::agv_mon::AgvInfor_TimeInfo& _internal_timeinfo() const;
  ::agv_mon::AgvInfor_TimeInfo* _internal_mutable_timeinfo();
  public:
  void unsafe_arena_set_allocated_timeinfo(
      ::agv_mon::AgvInfor_TimeInfo* timeinfo);
  ::agv_mon::AgvInfor_TimeInfo* unsafe_arena_release_timeinfo();

  // int64 ts = 2;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 ip = 1;
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip() const;
  void _internal_set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 ol = 3;
  void clear_ol();
  ::PROTOBUF_NAMESPACE_ID::int32 ol() const;
  void set_ol(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ol() const;
  void _internal_set_ol(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.AgvInfor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > route_id_;
  mutable std::atomic<int> _route_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::RoutePoint > routepoint_;
  ::agv_mon::AgvInfor_AgvReport* agvreport_;
  ::agv_mon::AgvInfor_AvoidInfo* avoidinfo_;
  ::agv_mon::AgvInfor_TimeInfo* timeinfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 ts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 ol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class LiftInfor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.LiftInfor) */ {
 public:
  inline LiftInfor() : LiftInfor(nullptr) {}
  virtual ~LiftInfor();

  LiftInfor(const LiftInfor& from);
  LiftInfor(LiftInfor&& from) noexcept
    : LiftInfor() {
    *this = ::std::move(from);
  }

  inline LiftInfor& operator=(const LiftInfor& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiftInfor& operator=(LiftInfor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiftInfor& default_instance();

  static inline const LiftInfor* internal_default_instance() {
    return reinterpret_cast<const LiftInfor*>(
               &_LiftInfor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(LiftInfor& a, LiftInfor& b) {
    a.Swap(&b);
  }
  inline void Swap(LiftInfor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiftInfor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiftInfor* New() const final {
    return CreateMaybeMessage<LiftInfor>(nullptr);
  }

  LiftInfor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiftInfor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiftInfor& from);
  void MergeFrom(const LiftInfor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiftInfor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.LiftInfor";
  }
  protected:
  explicit LiftInfor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kTsFieldNumber = 2,
    kLiftGroupFieldNumber = 3,
    kLiftIdxFieldNumber = 4,
    kLiftAgvFieldNumber = 5,
    kStartFloorFieldNumber = 6,
    kEndFloorFieldNumber = 7,
    kCurFloorFieldNumber = 8,
    kOpenInPlaceFieldNumber = 9,
    kCloseInPlaceFieldNumber = 10,
    kIdleWaitFieldNumber = 11,
    kRunSignalFieldNumber = 12,
    kIncallFloorFieldNumber = 13,
    kOutcallFloorFieldNumber = 14,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int64 ts = 2;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint32 lift_group = 3;
  void clear_lift_group();
  ::PROTOBUF_NAMESPACE_ID::int32 lift_group() const;
  void set_lift_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lift_group() const;
  void _internal_set_lift_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 lift_idx = 4;
  void clear_lift_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 lift_idx() const;
  void set_lift_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lift_idx() const;
  void _internal_set_lift_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 lift_agv = 5;
  void clear_lift_agv();
  ::PROTOBUF_NAMESPACE_ID::int32 lift_agv() const;
  void set_lift_agv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lift_agv() const;
  void _internal_set_lift_agv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 startFloor = 6;
  void clear_startfloor();
  ::PROTOBUF_NAMESPACE_ID::int32 startfloor() const;
  void set_startfloor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_startfloor() const;
  void _internal_set_startfloor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 endFloor = 7;
  void clear_endfloor();
  ::PROTOBUF_NAMESPACE_ID::int32 endfloor() const;
  void set_endfloor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_endfloor() const;
  void _internal_set_endfloor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 curFloor = 8;
  void clear_curfloor();
  ::PROTOBUF_NAMESPACE_ID::int32 curfloor() const;
  void set_curfloor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curfloor() const;
  void _internal_set_curfloor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 openInPlace = 9;
  void clear_openinplace();
  ::PROTOBUF_NAMESPACE_ID::int32 openinplace() const;
  void set_openinplace(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_openinplace() const;
  void _internal_set_openinplace(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 closeInPlace = 10;
  void clear_closeinplace();
  ::PROTOBUF_NAMESPACE_ID::int32 closeinplace() const;
  void set_closeinplace(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_closeinplace() const;
  void _internal_set_closeinplace(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 idleWait = 11;
  void clear_idlewait();
  ::PROTOBUF_NAMESPACE_ID::int32 idlewait() const;
  void set_idlewait(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idlewait() const;
  void _internal_set_idlewait(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 runSignal = 12;
  void clear_runsignal();
  ::PROTOBUF_NAMESPACE_ID::int32 runsignal() const;
  void set_runsignal(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_runsignal() const;
  void _internal_set_runsignal(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint64 incall_floor = 13;
  void clear_incall_floor();
  ::PROTOBUF_NAMESPACE_ID::int64 incall_floor() const;
  void set_incall_floor(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_incall_floor() const;
  void _internal_set_incall_floor(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 outcall_floor = 14;
  void clear_outcall_floor();
  ::PROTOBUF_NAMESPACE_ID::int64 outcall_floor() const;
  void set_outcall_floor(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_outcall_floor() const;
  void _internal_set_outcall_floor(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.LiftInfor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int64 ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 lift_group_;
  ::PROTOBUF_NAMESPACE_ID::int32 lift_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 lift_agv_;
  ::PROTOBUF_NAMESPACE_ID::int32 startfloor_;
  ::PROTOBUF_NAMESPACE_ID::int32 endfloor_;
  ::PROTOBUF_NAMESPACE_ID::int32 curfloor_;
  ::PROTOBUF_NAMESPACE_ID::int32 openinplace_;
  ::PROTOBUF_NAMESPACE_ID::int32 closeinplace_;
  ::PROTOBUF_NAMESPACE_ID::int32 idlewait_;
  ::PROTOBUF_NAMESPACE_ID::int32 runsignal_;
  ::PROTOBUF_NAMESPACE_ID::int64 incall_floor_;
  ::PROTOBUF_NAMESPACE_ID::int64 outcall_floor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class Mon_Route_AgvRoute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.Mon_Route.AgvRoute) */ {
 public:
  inline Mon_Route_AgvRoute() : Mon_Route_AgvRoute(nullptr) {}
  virtual ~Mon_Route_AgvRoute();

  Mon_Route_AgvRoute(const Mon_Route_AgvRoute& from);
  Mon_Route_AgvRoute(Mon_Route_AgvRoute&& from) noexcept
    : Mon_Route_AgvRoute() {
    *this = ::std::move(from);
  }

  inline Mon_Route_AgvRoute& operator=(const Mon_Route_AgvRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mon_Route_AgvRoute& operator=(Mon_Route_AgvRoute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mon_Route_AgvRoute& default_instance();

  static inline const Mon_Route_AgvRoute* internal_default_instance() {
    return reinterpret_cast<const Mon_Route_AgvRoute*>(
               &_Mon_Route_AgvRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Mon_Route_AgvRoute& a, Mon_Route_AgvRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(Mon_Route_AgvRoute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mon_Route_AgvRoute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mon_Route_AgvRoute* New() const final {
    return CreateMaybeMessage<Mon_Route_AgvRoute>(nullptr);
  }

  Mon_Route_AgvRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mon_Route_AgvRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mon_Route_AgvRoute& from);
  void MergeFrom(const Mon_Route_AgvRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mon_Route_AgvRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.Mon_Route.AgvRoute";
  }
  protected:
  explicit Mon_Route_AgvRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteIdFieldNumber = 2,
    kRoutepointFieldNumber = 3,
    kIdFieldNumber = 1,
    kCurSegFieldNumber = 4,
    kNxtSegFieldNumber = 5,
  };
  // repeated int32 route_id = 2;
  int route_id_size() const;
  private:
  int _internal_route_id_size() const;
  public:
  void clear_route_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_route_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_route_id() const;
  void _internal_add_route_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_route_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 route_id(int index) const;
  void set_route_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_route_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      route_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_route_id();

  // repeated .agv_mon.RoutePoint routepoint = 3;
  int routepoint_size() const;
  private:
  int _internal_routepoint_size() const;
  public:
  void clear_routepoint();
  ::agv_mon::RoutePoint* mutable_routepoint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::RoutePoint >*
      mutable_routepoint();
  private:
  const ::agv_mon::RoutePoint& _internal_routepoint(int index) const;
  ::agv_mon::RoutePoint* _internal_add_routepoint();
  public:
  const ::agv_mon::RoutePoint& routepoint(int index) const;
  ::agv_mon::RoutePoint* add_routepoint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::RoutePoint >&
      routepoint() const;

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 cur_seg = 4;
  void clear_cur_seg();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_seg() const;
  void set_cur_seg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_seg() const;
  void _internal_set_cur_seg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 nxt_seg = 5;
  void clear_nxt_seg();
  ::PROTOBUF_NAMESPACE_ID::int32 nxt_seg() const;
  void set_nxt_seg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nxt_seg() const;
  void _internal_set_nxt_seg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.Mon_Route.AgvRoute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > route_id_;
  mutable std::atomic<int> _route_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::RoutePoint > routepoint_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_seg_;
  ::PROTOBUF_NAMESPACE_ID::int32 nxt_seg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class Mon_Route PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.Mon_Route) */ {
 public:
  inline Mon_Route() : Mon_Route(nullptr) {}
  virtual ~Mon_Route();

  Mon_Route(const Mon_Route& from);
  Mon_Route(Mon_Route&& from) noexcept
    : Mon_Route() {
    *this = ::std::move(from);
  }

  inline Mon_Route& operator=(const Mon_Route& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mon_Route& operator=(Mon_Route&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mon_Route& default_instance();

  static inline const Mon_Route* internal_default_instance() {
    return reinterpret_cast<const Mon_Route*>(
               &_Mon_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Mon_Route& a, Mon_Route& b) {
    a.Swap(&b);
  }
  inline void Swap(Mon_Route* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mon_Route* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mon_Route* New() const final {
    return CreateMaybeMessage<Mon_Route>(nullptr);
  }

  Mon_Route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mon_Route>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mon_Route& from);
  void MergeFrom(const Mon_Route& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mon_Route* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.Mon_Route";
  }
  protected:
  explicit Mon_Route(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Mon_Route_AgvRoute AgvRoute;

  // accessors -------------------------------------------------------

  enum : int {
    kAgvrouteFieldNumber = 1,
  };
  // repeated .agv_mon.Mon_Route.AgvRoute agvroute = 1;
  int agvroute_size() const;
  private:
  int _internal_agvroute_size() const;
  public:
  void clear_agvroute();
  ::agv_mon::Mon_Route_AgvRoute* mutable_agvroute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Mon_Route_AgvRoute >*
      mutable_agvroute();
  private:
  const ::agv_mon::Mon_Route_AgvRoute& _internal_agvroute(int index) const;
  ::agv_mon::Mon_Route_AgvRoute* _internal_add_agvroute();
  public:
  const ::agv_mon::Mon_Route_AgvRoute& agvroute(int index) const;
  ::agv_mon::Mon_Route_AgvRoute* add_agvroute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Mon_Route_AgvRoute >&
      agvroute() const;

  // @@protoc_insertion_point(class_scope:agv_mon.Mon_Route)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Mon_Route_AgvRoute > agvroute_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class RoutePoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.RoutePoint) */ {
 public:
  inline RoutePoint() : RoutePoint(nullptr) {}
  virtual ~RoutePoint();

  RoutePoint(const RoutePoint& from);
  RoutePoint(RoutePoint&& from) noexcept
    : RoutePoint() {
    *this = ::std::move(from);
  }

  inline RoutePoint& operator=(const RoutePoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutePoint& operator=(RoutePoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutePoint& default_instance();

  static inline const RoutePoint* internal_default_instance() {
    return reinterpret_cast<const RoutePoint*>(
               &_RoutePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RoutePoint& a, RoutePoint& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutePoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutePoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutePoint* New() const final {
    return CreateMaybeMessage<RoutePoint>(nullptr);
  }

  RoutePoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutePoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutePoint& from);
  void MergeFrom(const RoutePoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutePoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.RoutePoint";
  }
  protected:
  explicit RoutePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
    kFpointFieldNumber = 2,
  };
  // int32 point = 1;
  void clear_point();
  ::PROTOBUF_NAMESPACE_ID::int32 point() const;
  void set_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_point() const;
  void _internal_set_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fpoint = 2;
  void clear_fpoint();
  ::PROTOBUF_NAMESPACE_ID::int32 fpoint() const;
  void set_fpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fpoint() const;
  void _internal_set_fpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.RoutePoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 point_;
  ::PROTOBUF_NAMESPACE_ID::int32 fpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class Task_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.Task_Data) */ {
 public:
  inline Task_Data() : Task_Data(nullptr) {}
  virtual ~Task_Data();

  Task_Data(const Task_Data& from);
  Task_Data(Task_Data&& from) noexcept
    : Task_Data() {
    *this = ::std::move(from);
  }

  inline Task_Data& operator=(const Task_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task_Data& operator=(Task_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Task_Data& default_instance();

  static inline const Task_Data* internal_default_instance() {
    return reinterpret_cast<const Task_Data*>(
               &_Task_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Task_Data& a, Task_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Task_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task_Data* New() const final {
    return CreateMaybeMessage<Task_Data>(nullptr);
  }

  Task_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Task_Data& from);
  void MergeFrom(const Task_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.Task_Data";
  }
  protected:
  explicit Task_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskinfoFieldNumber = 1,
  };
  // repeated .agv_mon.TaskInfo taskinfo = 1;
  int taskinfo_size() const;
  private:
  int _internal_taskinfo_size() const;
  public:
  void clear_taskinfo();
  ::agv_mon::TaskInfo* mutable_taskinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::TaskInfo >*
      mutable_taskinfo();
  private:
  const ::agv_mon::TaskInfo& _internal_taskinfo(int index) const;
  ::agv_mon::TaskInfo* _internal_add_taskinfo();
  public:
  const ::agv_mon::TaskInfo& taskinfo(int index) const;
  ::agv_mon::TaskInfo* add_taskinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::TaskInfo >&
      taskinfo() const;

  // @@protoc_insertion_point(class_scope:agv_mon.Task_Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::TaskInfo > taskinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class TaskInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.TaskInfo) */ {
 public:
  inline TaskInfo() : TaskInfo(nullptr) {}
  virtual ~TaskInfo();

  TaskInfo(const TaskInfo& from);
  TaskInfo(TaskInfo&& from) noexcept
    : TaskInfo() {
    *this = ::std::move(from);
  }

  inline TaskInfo& operator=(const TaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskInfo& operator=(TaskInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskInfo& default_instance();

  static inline const TaskInfo* internal_default_instance() {
    return reinterpret_cast<const TaskInfo*>(
               &_TaskInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TaskInfo& a, TaskInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskInfo* New() const final {
    return CreateMaybeMessage<TaskInfo>(nullptr);
  }

  TaskInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskInfo& from);
  void MergeFrom(const TaskInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.TaskInfo";
  }
  protected:
  explicit TaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPalletNoFieldNumber = 8,
    kStartFieldNumber = 6,
    kEndFieldNumber = 7,
    kWmsIdFieldNumber = 1,
    kMesIdFieldNumber = 2,
    kAgvIdFieldNumber = 3,
    kAreaFieldNumber = 4,
    kCreateTimeFieldNumber = 9,
    kStatusFieldNumber = 5,
    kPriorityFieldNumber = 13,
    kExcuteTimeFieldNumber = 10,
    kGetTimeFieldNumber = 11,
    kFinishTimeFieldNumber = 12,
    kAgvExpectFieldNumber = 14,
    kDelayTypeFieldNumber = 15,
  };
  // string pallet_no = 8;
  void clear_pallet_no();
  const std::string& pallet_no() const;
  void set_pallet_no(const std::string& value);
  void set_pallet_no(std::string&& value);
  void set_pallet_no(const char* value);
  void set_pallet_no(const char* value, size_t size);
  std::string* mutable_pallet_no();
  std::string* release_pallet_no();
  void set_allocated_pallet_no(std::string* pallet_no);
  private:
  const std::string& _internal_pallet_no() const;
  void _internal_set_pallet_no(const std::string& value);
  std::string* _internal_mutable_pallet_no();
  public:

  // .agv_mon.TaskLoc start = 6;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::agv_mon::TaskLoc& start() const;
  ::agv_mon::TaskLoc* release_start();
  ::agv_mon::TaskLoc* mutable_start();
  void set_allocated_start(::agv_mon::TaskLoc* start);
  private:
  const ::agv_mon::TaskLoc& _internal_start() const;
  ::agv_mon::TaskLoc* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::agv_mon::TaskLoc* start);
  ::agv_mon::TaskLoc* unsafe_arena_release_start();

  // .agv_mon.TaskLoc end = 7;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::agv_mon::TaskLoc& end() const;
  ::agv_mon::TaskLoc* release_end();
  ::agv_mon::TaskLoc* mutable_end();
  void set_allocated_end(::agv_mon::TaskLoc* end);
  private:
  const ::agv_mon::TaskLoc& _internal_end() const;
  ::agv_mon::TaskLoc* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::agv_mon::TaskLoc* end);
  ::agv_mon::TaskLoc* unsafe_arena_release_end();

  // int32 wms_id = 1;
  void clear_wms_id();
  ::PROTOBUF_NAMESPACE_ID::int32 wms_id() const;
  void set_wms_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wms_id() const;
  void _internal_set_wms_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mes_id = 2;
  void clear_mes_id();
  ::PROTOBUF_NAMESPACE_ID::int32 mes_id() const;
  void set_mes_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mes_id() const;
  void _internal_set_mes_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 agv_id = 3;
  void clear_agv_id();
  ::PROTOBUF_NAMESPACE_ID::int32 agv_id() const;
  void set_agv_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_agv_id() const;
  void _internal_set_agv_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 area = 4;
  void clear_area();
  ::PROTOBUF_NAMESPACE_ID::int32 area() const;
  void set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_area() const;
  void _internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 create_time = 9;
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::int64 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_create_time() const;
  void _internal_set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 status = 5;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 priority = 13;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 excute_time = 10;
  void clear_excute_time();
  ::PROTOBUF_NAMESPACE_ID::int64 excute_time() const;
  void set_excute_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_excute_time() const;
  void _internal_set_excute_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 get_time = 11;
  void clear_get_time();
  ::PROTOBUF_NAMESPACE_ID::int64 get_time() const;
  void set_get_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_get_time() const;
  void _internal_set_get_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 finish_time = 12;
  void clear_finish_time();
  ::PROTOBUF_NAMESPACE_ID::int64 finish_time() const;
  void set_finish_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_finish_time() const;
  void _internal_set_finish_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint32 agv_expect = 14;
  void clear_agv_expect();
  ::PROTOBUF_NAMESPACE_ID::int32 agv_expect() const;
  void set_agv_expect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_agv_expect() const;
  void _internal_set_agv_expect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 delay_type = 15;
  void clear_delay_type();
  ::PROTOBUF_NAMESPACE_ID::int32 delay_type() const;
  void set_delay_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delay_type() const;
  void _internal_set_delay_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.TaskInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pallet_no_;
  ::agv_mon::TaskLoc* start_;
  ::agv_mon::TaskLoc* end_;
  ::PROTOBUF_NAMESPACE_ID::int32 wms_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 mes_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 agv_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 area_;
  ::PROTOBUF_NAMESPACE_ID::int64 create_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  ::PROTOBUF_NAMESPACE_ID::int64 excute_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 get_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 finish_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 agv_expect_;
  ::PROTOBUF_NAMESPACE_ID::int32 delay_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class Dev_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.Dev_Data) */ {
 public:
  inline Dev_Data() : Dev_Data(nullptr) {}
  virtual ~Dev_Data();

  Dev_Data(const Dev_Data& from);
  Dev_Data(Dev_Data&& from) noexcept
    : Dev_Data() {
    *this = ::std::move(from);
  }

  inline Dev_Data& operator=(const Dev_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dev_Data& operator=(Dev_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dev_Data& default_instance();

  static inline const Dev_Data* internal_default_instance() {
    return reinterpret_cast<const Dev_Data*>(
               &_Dev_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Dev_Data& a, Dev_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Dev_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dev_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dev_Data* New() const final {
    return CreateMaybeMessage<Dev_Data>(nullptr);
  }

  Dev_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dev_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dev_Data& from);
  void MergeFrom(const Dev_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dev_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.Dev_Data";
  }
  protected:
  explicit Dev_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCxjdataFieldNumber = 1,
    kCxjbackFieldNumber = 2,
    kWmsdataFieldNumber = 3,
  };
  // repeated .agv_mon.CxjData cxjdata = 1;
  int cxjdata_size() const;
  private:
  int _internal_cxjdata_size() const;
  public:
  void clear_cxjdata();
  ::agv_mon::CxjData* mutable_cxjdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::CxjData >*
      mutable_cxjdata();
  private:
  const ::agv_mon::CxjData& _internal_cxjdata(int index) const;
  ::agv_mon::CxjData* _internal_add_cxjdata();
  public:
  const ::agv_mon::CxjData& cxjdata(int index) const;
  ::agv_mon::CxjData* add_cxjdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::CxjData >&
      cxjdata() const;

  // repeated .agv_mon.CxjBack cxjback = 2;
  int cxjback_size() const;
  private:
  int _internal_cxjback_size() const;
  public:
  void clear_cxjback();
  ::agv_mon::CxjBack* mutable_cxjback(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::CxjBack >*
      mutable_cxjback();
  private:
  const ::agv_mon::CxjBack& _internal_cxjback(int index) const;
  ::agv_mon::CxjBack* _internal_add_cxjback();
  public:
  const ::agv_mon::CxjBack& cxjback(int index) const;
  ::agv_mon::CxjBack* add_cxjback();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::CxjBack >&
      cxjback() const;

  // repeated .agv_mon.WmsData wmsdata = 3;
  int wmsdata_size() const;
  private:
  int _internal_wmsdata_size() const;
  public:
  void clear_wmsdata();
  ::agv_mon::WmsData* mutable_wmsdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::WmsData >*
      mutable_wmsdata();
  private:
  const ::agv_mon::WmsData& _internal_wmsdata(int index) const;
  ::agv_mon::WmsData* _internal_add_wmsdata();
  public:
  const ::agv_mon::WmsData& wmsdata(int index) const;
  ::agv_mon::WmsData* add_wmsdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::WmsData >&
      wmsdata() const;

  // @@protoc_insertion_point(class_scope:agv_mon.Dev_Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::CxjData > cxjdata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::CxjBack > cxjback_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::WmsData > wmsdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class CxjData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.CxjData) */ {
 public:
  inline CxjData() : CxjData(nullptr) {}
  virtual ~CxjData();

  CxjData(const CxjData& from);
  CxjData(CxjData&& from) noexcept
    : CxjData() {
    *this = ::std::move(from);
  }

  inline CxjData& operator=(const CxjData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CxjData& operator=(CxjData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CxjData& default_instance();

  static inline const CxjData* internal_default_instance() {
    return reinterpret_cast<const CxjData*>(
               &_CxjData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CxjData& a, CxjData& b) {
    a.Swap(&b);
  }
  inline void Swap(CxjData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CxjData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CxjData* New() const final {
    return CreateMaybeMessage<CxjData>(nullptr);
  }

  CxjData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CxjData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CxjData& from);
  void MergeFrom(const CxjData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CxjData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.CxjData";
  }
  protected:
  explicit CxjData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCxjidFieldNumber = 1,
    kCxjtypeFieldNumber = 2,
    kStoreidFieldNumber = 3,
    kGoodsSigFieldNumber = 4,
    kInrightSigFieldNumber = 5,
    kAllSigFieldNumber = 6,
    kAgvInFlagFieldNumber = 7,
    kCxjHeartFieldNumber = 8,
    kAgvIdFieldNumber = 9,
    kWmsTaskFieldNumber = 10,
  };
  // int32 cxjid = 1;
  void clear_cxjid();
  ::PROTOBUF_NAMESPACE_ID::int32 cxjid() const;
  void set_cxjid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cxjid() const;
  void _internal_set_cxjid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cxjtype = 2;
  void clear_cxjtype();
  ::PROTOBUF_NAMESPACE_ID::int32 cxjtype() const;
  void set_cxjtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cxjtype() const;
  void _internal_set_cxjtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 storeid = 3;
  void clear_storeid();
  ::PROTOBUF_NAMESPACE_ID::int32 storeid() const;
  void set_storeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_storeid() const;
  void _internal_set_storeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goods_sig = 4;
  void clear_goods_sig();
  ::PROTOBUF_NAMESPACE_ID::int32 goods_sig() const;
  void set_goods_sig(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goods_sig() const;
  void _internal_set_goods_sig(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 inright_sig = 5;
  void clear_inright_sig();
  ::PROTOBUF_NAMESPACE_ID::int32 inright_sig() const;
  void set_inright_sig(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inright_sig() const;
  void _internal_set_inright_sig(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 all_sig = 6;
  void clear_all_sig();
  ::PROTOBUF_NAMESPACE_ID::int32 all_sig() const;
  void set_all_sig(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_all_sig() const;
  void _internal_set_all_sig(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 agv_in_flag = 7;
  void clear_agv_in_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 agv_in_flag() const;
  void set_agv_in_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_agv_in_flag() const;
  void _internal_set_agv_in_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cxj_heart = 8;
  void clear_cxj_heart();
  ::PROTOBUF_NAMESPACE_ID::int32 cxj_heart() const;
  void set_cxj_heart(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cxj_heart() const;
  void _internal_set_cxj_heart(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 agv_id = 9;
  void clear_agv_id();
  ::PROTOBUF_NAMESPACE_ID::int32 agv_id() const;
  void set_agv_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_agv_id() const;
  void _internal_set_agv_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wms_task = 10;
  void clear_wms_task();
  ::PROTOBUF_NAMESPACE_ID::int32 wms_task() const;
  void set_wms_task(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wms_task() const;
  void _internal_set_wms_task(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.CxjData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cxjid_;
  ::PROTOBUF_NAMESPACE_ID::int32 cxjtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 storeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 goods_sig_;
  ::PROTOBUF_NAMESPACE_ID::int32 inright_sig_;
  ::PROTOBUF_NAMESPACE_ID::int32 all_sig_;
  ::PROTOBUF_NAMESPACE_ID::int32 agv_in_flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 cxj_heart_;
  ::PROTOBUF_NAMESPACE_ID::int32 agv_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 wms_task_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class CxjBack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.CxjBack) */ {
 public:
  inline CxjBack() : CxjBack(nullptr) {}
  virtual ~CxjBack();

  CxjBack(const CxjBack& from);
  CxjBack(CxjBack&& from) noexcept
    : CxjBack() {
    *this = ::std::move(from);
  }

  inline CxjBack& operator=(const CxjBack& from) {
    CopyFrom(from);
    return *this;
  }
  inline CxjBack& operator=(CxjBack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CxjBack& default_instance();

  static inline const CxjBack* internal_default_instance() {
    return reinterpret_cast<const CxjBack*>(
               &_CxjBack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CxjBack& a, CxjBack& b) {
    a.Swap(&b);
  }
  inline void Swap(CxjBack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CxjBack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CxjBack* New() const final {
    return CreateMaybeMessage<CxjBack>(nullptr);
  }

  CxjBack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CxjBack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CxjBack& from);
  void MergeFrom(const CxjBack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CxjBack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.CxjBack";
  }
  protected:
  explicit CxjBack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRfidFieldNumber = 5,
    kStoreidFieldNumber = 1,
    kAreaFieldNumber = 2,
    kTypeFieldNumber = 3,
    kTaskNoFieldNumber = 4,
    kTsFieldNumber = 7,
    kPlcipFieldNumber = 6,
  };
  // string rfid = 5;
  void clear_rfid();
  const std::string& rfid() const;
  void set_rfid(const std::string& value);
  void set_rfid(std::string&& value);
  void set_rfid(const char* value);
  void set_rfid(const char* value, size_t size);
  std::string* mutable_rfid();
  std::string* release_rfid();
  void set_allocated_rfid(std::string* rfid);
  private:
  const std::string& _internal_rfid() const;
  void _internal_set_rfid(const std::string& value);
  std::string* _internal_mutable_rfid();
  public:

  // int32 storeid = 1;
  void clear_storeid();
  ::PROTOBUF_NAMESPACE_ID::int32 storeid() const;
  void set_storeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_storeid() const;
  void _internal_set_storeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 area = 2;
  void clear_area();
  ::PROTOBUF_NAMESPACE_ID::int32 area() const;
  void set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_area() const;
  void _internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 task_no = 4;
  void clear_task_no();
  ::PROTOBUF_NAMESPACE_ID::int32 task_no() const;
  void set_task_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_task_no() const;
  void _internal_set_task_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 ts = 7;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 plcip = 6;
  void clear_plcip();
  ::PROTOBUF_NAMESPACE_ID::uint32 plcip() const;
  void set_plcip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_plcip() const;
  void _internal_set_plcip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.CxjBack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rfid_;
  ::PROTOBUF_NAMESPACE_ID::int32 storeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 area_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 task_no_;
  ::PROTOBUF_NAMESPACE_ID::int64 ts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 plcip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class WmsData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.WmsData) */ {
 public:
  inline WmsData() : WmsData(nullptr) {}
  virtual ~WmsData();

  WmsData(const WmsData& from);
  WmsData(WmsData&& from) noexcept
    : WmsData() {
    *this = ::std::move(from);
  }

  inline WmsData& operator=(const WmsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline WmsData& operator=(WmsData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WmsData& default_instance();

  static inline const WmsData* internal_default_instance() {
    return reinterpret_cast<const WmsData*>(
               &_WmsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(WmsData& a, WmsData& b) {
    a.Swap(&b);
  }
  inline void Swap(WmsData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WmsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WmsData* New() const final {
    return CreateMaybeMessage<WmsData>(nullptr);
  }

  WmsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WmsData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WmsData& from);
  void MergeFrom(const WmsData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WmsData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.WmsData";
  }
  protected:
  explicit WmsData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfrFieldNumber = 9,
    kStoreidPickFieldNumber = 1,
    kStoreidPutFieldNumber = 2,
    kAreaFieldNumber = 3,
    kTypeFieldNumber = 4,
    kPickEnableFieldNumber = 5,
    kPutEnableFieldNumber = 6,
    kPickTaskNoFieldNumber = 7,
    kPutTaskNoFieldNumber = 8,
    kTsFieldNumber = 10,
  };
  // repeated .agv_mon.Param infr = 9;
  int infr_size() const;
  private:
  int _internal_infr_size() const;
  public:
  void clear_infr();
  ::agv_mon::Param* mutable_infr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Param >*
      mutable_infr();
  private:
  const ::agv_mon::Param& _internal_infr(int index) const;
  ::agv_mon::Param* _internal_add_infr();
  public:
  const ::agv_mon::Param& infr(int index) const;
  ::agv_mon::Param* add_infr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Param >&
      infr() const;

  // int32 storeid_pick = 1;
  void clear_storeid_pick();
  ::PROTOBUF_NAMESPACE_ID::int32 storeid_pick() const;
  void set_storeid_pick(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_storeid_pick() const;
  void _internal_set_storeid_pick(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 storeid_put = 2;
  void clear_storeid_put();
  ::PROTOBUF_NAMESPACE_ID::int32 storeid_put() const;
  void set_storeid_put(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_storeid_put() const;
  void _internal_set_storeid_put(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 area = 3;
  void clear_area();
  ::PROTOBUF_NAMESPACE_ID::int32 area() const;
  void set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_area() const;
  void _internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 pick_enable = 5;
  void clear_pick_enable();
  ::PROTOBUF_NAMESPACE_ID::int32 pick_enable() const;
  void set_pick_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pick_enable() const;
  void _internal_set_pick_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 put_enable = 6;
  void clear_put_enable();
  ::PROTOBUF_NAMESPACE_ID::int32 put_enable() const;
  void set_put_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_put_enable() const;
  void _internal_set_put_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 pick_task_no = 7;
  void clear_pick_task_no();
  ::PROTOBUF_NAMESPACE_ID::int32 pick_task_no() const;
  void set_pick_task_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pick_task_no() const;
  void _internal_set_pick_task_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 put_task_no = 8;
  void clear_put_task_no();
  ::PROTOBUF_NAMESPACE_ID::int32 put_task_no() const;
  void set_put_task_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_put_task_no() const;
  void _internal_set_put_task_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 ts = 10;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.WmsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Param > infr_;
  ::PROTOBUF_NAMESPACE_ID::int32 storeid_pick_;
  ::PROTOBUF_NAMESPACE_ID::int32 storeid_put_;
  ::PROTOBUF_NAMESPACE_ID::int32 area_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 pick_enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 put_enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 pick_task_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 put_task_no_;
  ::PROTOBUF_NAMESPACE_ID::int64 ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.Param) */ {
 public:
  inline Param() : Param(nullptr) {}
  virtual ~Param();

  Param(const Param& from);
  Param(Param&& from) noexcept
    : Param() {
    *this = ::std::move(from);
  }

  inline Param& operator=(const Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline Param& operator=(Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Param& default_instance();

  static inline const Param* internal_default_instance() {
    return reinterpret_cast<const Param*>(
               &_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Param& a, Param& b) {
    a.Swap(&b);
  }
  inline void Swap(Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Param* New() const final {
    return CreateMaybeMessage<Param>(nullptr);
  }

  Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Param& from);
  void MergeFrom(const Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.Param";
  }
  protected:
  explicit Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // int32 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::int32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class TaskLoc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.TaskLoc) */ {
 public:
  inline TaskLoc() : TaskLoc(nullptr) {}
  virtual ~TaskLoc();

  TaskLoc(const TaskLoc& from);
  TaskLoc(TaskLoc&& from) noexcept
    : TaskLoc() {
    *this = ::std::move(from);
  }

  inline TaskLoc& operator=(const TaskLoc& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskLoc& operator=(TaskLoc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskLoc& default_instance();

  static inline const TaskLoc* internal_default_instance() {
    return reinterpret_cast<const TaskLoc*>(
               &_TaskLoc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(TaskLoc& a, TaskLoc& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskLoc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskLoc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskLoc* New() const final {
    return CreateMaybeMessage<TaskLoc>(nullptr);
  }

  TaskLoc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskLoc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskLoc& from);
  void MergeFrom(const TaskLoc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskLoc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.TaskLoc";
  }
  protected:
  explicit TaskLoc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAreaNameFieldNumber = 5,
    kLayersFieldNumber = 2,
    kIdFieldNumber = 3,
    kAreaFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string area_name = 5;
  void clear_area_name();
  const std::string& area_name() const;
  void set_area_name(const std::string& value);
  void set_area_name(std::string&& value);
  void set_area_name(const char* value);
  void set_area_name(const char* value, size_t size);
  std::string* mutable_area_name();
  std::string* release_area_name();
  void set_allocated_area_name(std::string* area_name);
  private:
  const std::string& _internal_area_name() const;
  void _internal_set_area_name(const std::string& value);
  std::string* _internal_mutable_area_name();
  public:

  // int32 layers = 2;
  void clear_layers();
  ::PROTOBUF_NAMESPACE_ID::int32 layers() const;
  void set_layers(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layers() const;
  void _internal_set_layers(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 area = 4;
  void clear_area();
  ::PROTOBUF_NAMESPACE_ID::int32 area() const;
  void set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_area() const;
  void _internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.TaskLoc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr area_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 layers_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 area_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class COMD PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.COMD) */ {
 public:
  inline COMD() : COMD(nullptr) {}
  virtual ~COMD();

  COMD(const COMD& from);
  COMD(COMD&& from) noexcept
    : COMD() {
    *this = ::std::move(from);
  }

  inline COMD& operator=(const COMD& from) {
    CopyFrom(from);
    return *this;
  }
  inline COMD& operator=(COMD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const COMD& default_instance();

  static inline const COMD* internal_default_instance() {
    return reinterpret_cast<const COMD*>(
               &_COMD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(COMD& a, COMD& b) {
    a.Swap(&b);
  }
  inline void Swap(COMD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(COMD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline COMD* New() const final {
    return CreateMaybeMessage<COMD>(nullptr);
  }

  COMD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<COMD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const COMD& from);
  void MergeFrom(const COMD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(COMD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.COMD";
  }
  protected:
  explicit COMD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kFlagFieldNumber = 1,
  };
  // repeated int32 value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_value() const;
  void _internal_add_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 value(int index) const;
  void set_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_value();

  // int32 flag = 1;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.COMD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// -------------------------------------------------------------------

class COMDRET PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agv_mon.COMDRET) */ {
 public:
  inline COMDRET() : COMDRET(nullptr) {}
  virtual ~COMDRET();

  COMDRET(const COMDRET& from);
  COMDRET(COMDRET&& from) noexcept
    : COMDRET() {
    *this = ::std::move(from);
  }

  inline COMDRET& operator=(const COMDRET& from) {
    CopyFrom(from);
    return *this;
  }
  inline COMDRET& operator=(COMDRET&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const COMDRET& default_instance();

  static inline const COMDRET* internal_default_instance() {
    return reinterpret_cast<const COMDRET*>(
               &_COMDRET_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(COMDRET& a, COMDRET& b) {
    a.Swap(&b);
  }
  inline void Swap(COMDRET* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(COMDRET* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline COMDRET* New() const final {
    return CreateMaybeMessage<COMDRET>(nullptr);
  }

  COMDRET* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<COMDRET>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const COMDRET& from);
  void MergeFrom(const COMDRET& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(COMDRET* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agv_mon.COMDRET";
  }
  protected:
  explicit COMDRET(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agv_5fmon_2eproto);
    return ::descriptor_table_agv_5fmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComdretFieldNumber = 1,
  };
  // repeated string comdret = 1;
  int comdret_size() const;
  private:
  int _internal_comdret_size() const;
  public:
  void clear_comdret();
  const std::string& comdret(int index) const;
  std::string* mutable_comdret(int index);
  void set_comdret(int index, const std::string& value);
  void set_comdret(int index, std::string&& value);
  void set_comdret(int index, const char* value);
  void set_comdret(int index, const char* value, size_t size);
  std::string* add_comdret();
  void add_comdret(const std::string& value);
  void add_comdret(std::string&& value);
  void add_comdret(const char* value);
  void add_comdret(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& comdret() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_comdret();
  private:
  const std::string& _internal_comdret(int index) const;
  std::string* _internal_add_comdret();
  public:

  // @@protoc_insertion_point(class_scope:agv_mon.COMDRET)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> comdret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agv_5fmon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Mon_Ask

// int32 data = 1;
inline void Mon_Ask::clear_data() {
  data_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mon_Ask::_internal_data() const {
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mon_Ask::data() const {
  // @@protoc_insertion_point(field_get:agv_mon.Mon_Ask.data)
  return _internal_data();
}
inline void Mon_Ask::_internal_set_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  data_ = value;
}
inline void Mon_Ask::set_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:agv_mon.Mon_Ask.data)
}

// int32 area = 2;
inline void Mon_Ask::clear_area() {
  area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mon_Ask::_internal_area() const {
  return area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mon_Ask::area() const {
  // @@protoc_insertion_point(field_get:agv_mon.Mon_Ask.area)
  return _internal_area();
}
inline void Mon_Ask::_internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  area_ = value;
}
inline void Mon_Ask::set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:agv_mon.Mon_Ask.area)
}

// int32 type = 3;
inline void Mon_Ask::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mon_Ask::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mon_Ask::type() const {
  // @@protoc_insertion_point(field_get:agv_mon.Mon_Ask.type)
  return _internal_type();
}
inline void Mon_Ask::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Mon_Ask::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:agv_mon.Mon_Ask.type)
}

// -------------------------------------------------------------------

// Mon_Data

// repeated .agv_mon.AgvInfor agvinfor = 1;
inline int Mon_Data::_internal_agvinfor_size() const {
  return agvinfor_.size();
}
inline int Mon_Data::agvinfor_size() const {
  return _internal_agvinfor_size();
}
inline void Mon_Data::clear_agvinfor() {
  agvinfor_.Clear();
}
inline ::agv_mon::AgvInfor* Mon_Data::mutable_agvinfor(int index) {
  // @@protoc_insertion_point(field_mutable:agv_mon.Mon_Data.agvinfor)
  return agvinfor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::AgvInfor >*
Mon_Data::mutable_agvinfor() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.Mon_Data.agvinfor)
  return &agvinfor_;
}
inline const ::agv_mon::AgvInfor& Mon_Data::_internal_agvinfor(int index) const {
  return agvinfor_.Get(index);
}
inline const ::agv_mon::AgvInfor& Mon_Data::agvinfor(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.Mon_Data.agvinfor)
  return _internal_agvinfor(index);
}
inline ::agv_mon::AgvInfor* Mon_Data::_internal_add_agvinfor() {
  return agvinfor_.Add();
}
inline ::agv_mon::AgvInfor* Mon_Data::add_agvinfor() {
  // @@protoc_insertion_point(field_add:agv_mon.Mon_Data.agvinfor)
  return _internal_add_agvinfor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::AgvInfor >&
Mon_Data::agvinfor() const {
  // @@protoc_insertion_point(field_list:agv_mon.Mon_Data.agvinfor)
  return agvinfor_;
}

// repeated .agv_mon.LiftInfor liftinfor = 2;
inline int Mon_Data::_internal_liftinfor_size() const {
  return liftinfor_.size();
}
inline int Mon_Data::liftinfor_size() const {
  return _internal_liftinfor_size();
}
inline void Mon_Data::clear_liftinfor() {
  liftinfor_.Clear();
}
inline ::agv_mon::LiftInfor* Mon_Data::mutable_liftinfor(int index) {
  // @@protoc_insertion_point(field_mutable:agv_mon.Mon_Data.liftinfor)
  return liftinfor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::LiftInfor >*
Mon_Data::mutable_liftinfor() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.Mon_Data.liftinfor)
  return &liftinfor_;
}
inline const ::agv_mon::LiftInfor& Mon_Data::_internal_liftinfor(int index) const {
  return liftinfor_.Get(index);
}
inline const ::agv_mon::LiftInfor& Mon_Data::liftinfor(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.Mon_Data.liftinfor)
  return _internal_liftinfor(index);
}
inline ::agv_mon::LiftInfor* Mon_Data::_internal_add_liftinfor() {
  return liftinfor_.Add();
}
inline ::agv_mon::LiftInfor* Mon_Data::add_liftinfor() {
  // @@protoc_insertion_point(field_add:agv_mon.Mon_Data.liftinfor)
  return _internal_add_liftinfor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::LiftInfor >&
Mon_Data::liftinfor() const {
  // @@protoc_insertion_point(field_list:agv_mon.Mon_Data.liftinfor)
  return liftinfor_;
}

// -------------------------------------------------------------------

// AgvInfor_AgvReport

// .agv_mon.AgvInfor.Basic basic = 1;
inline bool AgvInfor_AgvReport::_internal_has_basic() const {
  return this != internal_default_instance() && basic_ != nullptr;
}
inline bool AgvInfor_AgvReport::has_basic() const {
  return _internal_has_basic();
}
inline void AgvInfor_AgvReport::clear_basic() {
  if (GetArena() == nullptr && basic_ != nullptr) {
    delete basic_;
  }
  basic_ = nullptr;
}
inline const ::agv_mon::AgvInfor_Basic& AgvInfor_AgvReport::_internal_basic() const {
  const ::agv_mon::AgvInfor_Basic* p = basic_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_mon::AgvInfor_Basic&>(
      ::agv_mon::_AgvInfor_Basic_default_instance_);
}
inline const ::agv_mon::AgvInfor_Basic& AgvInfor_AgvReport::basic() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvReport.basic)
  return _internal_basic();
}
inline void AgvInfor_AgvReport::unsafe_arena_set_allocated_basic(
    ::agv_mon::AgvInfor_Basic* basic) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(basic_);
  }
  basic_ = basic;
  if (basic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_mon.AgvInfor.AgvReport.basic)
}
inline ::agv_mon::AgvInfor_Basic* AgvInfor_AgvReport::release_basic() {
  
  ::agv_mon::AgvInfor_Basic* temp = basic_;
  basic_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agv_mon::AgvInfor_Basic* AgvInfor_AgvReport::unsafe_arena_release_basic() {
  // @@protoc_insertion_point(field_release:agv_mon.AgvInfor.AgvReport.basic)
  
  ::agv_mon::AgvInfor_Basic* temp = basic_;
  basic_ = nullptr;
  return temp;
}
inline ::agv_mon::AgvInfor_Basic* AgvInfor_AgvReport::_internal_mutable_basic() {
  
  if (basic_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_mon::AgvInfor_Basic>(GetArena());
    basic_ = p;
  }
  return basic_;
}
inline ::agv_mon::AgvInfor_Basic* AgvInfor_AgvReport::mutable_basic() {
  // @@protoc_insertion_point(field_mutable:agv_mon.AgvInfor.AgvReport.basic)
  return _internal_mutable_basic();
}
inline void AgvInfor_AgvReport::set_allocated_basic(::agv_mon::AgvInfor_Basic* basic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete basic_;
  }
  if (basic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(basic);
    if (message_arena != submessage_arena) {
      basic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    
  } else {
    
  }
  basic_ = basic;
  // @@protoc_insertion_point(field_set_allocated:agv_mon.AgvInfor.AgvReport.basic)
}

// .agv_mon.AgvInfor.AgvTask agvtask = 2;
inline bool AgvInfor_AgvReport::_internal_has_agvtask() const {
  return this != internal_default_instance() && agvtask_ != nullptr;
}
inline bool AgvInfor_AgvReport::has_agvtask() const {
  return _internal_has_agvtask();
}
inline void AgvInfor_AgvReport::clear_agvtask() {
  if (GetArena() == nullptr && agvtask_ != nullptr) {
    delete agvtask_;
  }
  agvtask_ = nullptr;
}
inline const ::agv_mon::AgvInfor_AgvTask& AgvInfor_AgvReport::_internal_agvtask() const {
  const ::agv_mon::AgvInfor_AgvTask* p = agvtask_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_mon::AgvInfor_AgvTask&>(
      ::agv_mon::_AgvInfor_AgvTask_default_instance_);
}
inline const ::agv_mon::AgvInfor_AgvTask& AgvInfor_AgvReport::agvtask() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvReport.agvtask)
  return _internal_agvtask();
}
inline void AgvInfor_AgvReport::unsafe_arena_set_allocated_agvtask(
    ::agv_mon::AgvInfor_AgvTask* agvtask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agvtask_);
  }
  agvtask_ = agvtask;
  if (agvtask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_mon.AgvInfor.AgvReport.agvtask)
}
inline ::agv_mon::AgvInfor_AgvTask* AgvInfor_AgvReport::release_agvtask() {
  
  ::agv_mon::AgvInfor_AgvTask* temp = agvtask_;
  agvtask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agv_mon::AgvInfor_AgvTask* AgvInfor_AgvReport::unsafe_arena_release_agvtask() {
  // @@protoc_insertion_point(field_release:agv_mon.AgvInfor.AgvReport.agvtask)
  
  ::agv_mon::AgvInfor_AgvTask* temp = agvtask_;
  agvtask_ = nullptr;
  return temp;
}
inline ::agv_mon::AgvInfor_AgvTask* AgvInfor_AgvReport::_internal_mutable_agvtask() {
  
  if (agvtask_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_mon::AgvInfor_AgvTask>(GetArena());
    agvtask_ = p;
  }
  return agvtask_;
}
inline ::agv_mon::AgvInfor_AgvTask* AgvInfor_AgvReport::mutable_agvtask() {
  // @@protoc_insertion_point(field_mutable:agv_mon.AgvInfor.AgvReport.agvtask)
  return _internal_mutable_agvtask();
}
inline void AgvInfor_AgvReport::set_allocated_agvtask(::agv_mon::AgvInfor_AgvTask* agvtask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agvtask_;
  }
  if (agvtask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agvtask);
    if (message_arena != submessage_arena) {
      agvtask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agvtask, submessage_arena);
    }
    
  } else {
    
  }
  agvtask_ = agvtask;
  // @@protoc_insertion_point(field_set_allocated:agv_mon.AgvInfor.AgvReport.agvtask)
}

// .agv_mon.AgvInfor.AgvLoc agvloc = 3;
inline bool AgvInfor_AgvReport::_internal_has_agvloc() const {
  return this != internal_default_instance() && agvloc_ != nullptr;
}
inline bool AgvInfor_AgvReport::has_agvloc() const {
  return _internal_has_agvloc();
}
inline void AgvInfor_AgvReport::clear_agvloc() {
  if (GetArena() == nullptr && agvloc_ != nullptr) {
    delete agvloc_;
  }
  agvloc_ = nullptr;
}
inline const ::agv_mon::AgvInfor_AgvLoc& AgvInfor_AgvReport::_internal_agvloc() const {
  const ::agv_mon::AgvInfor_AgvLoc* p = agvloc_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_mon::AgvInfor_AgvLoc&>(
      ::agv_mon::_AgvInfor_AgvLoc_default_instance_);
}
inline const ::agv_mon::AgvInfor_AgvLoc& AgvInfor_AgvReport::agvloc() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvReport.agvloc)
  return _internal_agvloc();
}
inline void AgvInfor_AgvReport::unsafe_arena_set_allocated_agvloc(
    ::agv_mon::AgvInfor_AgvLoc* agvloc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agvloc_);
  }
  agvloc_ = agvloc;
  if (agvloc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_mon.AgvInfor.AgvReport.agvloc)
}
inline ::agv_mon::AgvInfor_AgvLoc* AgvInfor_AgvReport::release_agvloc() {
  
  ::agv_mon::AgvInfor_AgvLoc* temp = agvloc_;
  agvloc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agv_mon::AgvInfor_AgvLoc* AgvInfor_AgvReport::unsafe_arena_release_agvloc() {
  // @@protoc_insertion_point(field_release:agv_mon.AgvInfor.AgvReport.agvloc)
  
  ::agv_mon::AgvInfor_AgvLoc* temp = agvloc_;
  agvloc_ = nullptr;
  return temp;
}
inline ::agv_mon::AgvInfor_AgvLoc* AgvInfor_AgvReport::_internal_mutable_agvloc() {
  
  if (agvloc_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_mon::AgvInfor_AgvLoc>(GetArena());
    agvloc_ = p;
  }
  return agvloc_;
}
inline ::agv_mon::AgvInfor_AgvLoc* AgvInfor_AgvReport::mutable_agvloc() {
  // @@protoc_insertion_point(field_mutable:agv_mon.AgvInfor.AgvReport.agvloc)
  return _internal_mutable_agvloc();
}
inline void AgvInfor_AgvReport::set_allocated_agvloc(::agv_mon::AgvInfor_AgvLoc* agvloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agvloc_;
  }
  if (agvloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agvloc);
    if (message_arena != submessage_arena) {
      agvloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agvloc, submessage_arena);
    }
    
  } else {
    
  }
  agvloc_ = agvloc;
  // @@protoc_insertion_point(field_set_allocated:agv_mon.AgvInfor.AgvReport.agvloc)
}

// .agv_mon.AgvInfor.AgvSt agvst = 4;
inline bool AgvInfor_AgvReport::_internal_has_agvst() const {
  return this != internal_default_instance() && agvst_ != nullptr;
}
inline bool AgvInfor_AgvReport::has_agvst() const {
  return _internal_has_agvst();
}
inline void AgvInfor_AgvReport::clear_agvst() {
  if (GetArena() == nullptr && agvst_ != nullptr) {
    delete agvst_;
  }
  agvst_ = nullptr;
}
inline const ::agv_mon::AgvInfor_AgvSt& AgvInfor_AgvReport::_internal_agvst() const {
  const ::agv_mon::AgvInfor_AgvSt* p = agvst_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_mon::AgvInfor_AgvSt&>(
      ::agv_mon::_AgvInfor_AgvSt_default_instance_);
}
inline const ::agv_mon::AgvInfor_AgvSt& AgvInfor_AgvReport::agvst() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvReport.agvst)
  return _internal_agvst();
}
inline void AgvInfor_AgvReport::unsafe_arena_set_allocated_agvst(
    ::agv_mon::AgvInfor_AgvSt* agvst) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agvst_);
  }
  agvst_ = agvst;
  if (agvst) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_mon.AgvInfor.AgvReport.agvst)
}
inline ::agv_mon::AgvInfor_AgvSt* AgvInfor_AgvReport::release_agvst() {
  
  ::agv_mon::AgvInfor_AgvSt* temp = agvst_;
  agvst_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agv_mon::AgvInfor_AgvSt* AgvInfor_AgvReport::unsafe_arena_release_agvst() {
  // @@protoc_insertion_point(field_release:agv_mon.AgvInfor.AgvReport.agvst)
  
  ::agv_mon::AgvInfor_AgvSt* temp = agvst_;
  agvst_ = nullptr;
  return temp;
}
inline ::agv_mon::AgvInfor_AgvSt* AgvInfor_AgvReport::_internal_mutable_agvst() {
  
  if (agvst_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_mon::AgvInfor_AgvSt>(GetArena());
    agvst_ = p;
  }
  return agvst_;
}
inline ::agv_mon::AgvInfor_AgvSt* AgvInfor_AgvReport::mutable_agvst() {
  // @@protoc_insertion_point(field_mutable:agv_mon.AgvInfor.AgvReport.agvst)
  return _internal_mutable_agvst();
}
inline void AgvInfor_AgvReport::set_allocated_agvst(::agv_mon::AgvInfor_AgvSt* agvst) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agvst_;
  }
  if (agvst) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agvst);
    if (message_arena != submessage_arena) {
      agvst = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agvst, submessage_arena);
    }
    
  } else {
    
  }
  agvst_ = agvst;
  // @@protoc_insertion_point(field_set_allocated:agv_mon.AgvInfor.AgvReport.agvst)
}

// .agv_mon.AgvInfor.AgvBat agvbat = 5;
inline bool AgvInfor_AgvReport::_internal_has_agvbat() const {
  return this != internal_default_instance() && agvbat_ != nullptr;
}
inline bool AgvInfor_AgvReport::has_agvbat() const {
  return _internal_has_agvbat();
}
inline void AgvInfor_AgvReport::clear_agvbat() {
  if (GetArena() == nullptr && agvbat_ != nullptr) {
    delete agvbat_;
  }
  agvbat_ = nullptr;
}
inline const ::agv_mon::AgvInfor_AgvBat& AgvInfor_AgvReport::_internal_agvbat() const {
  const ::agv_mon::AgvInfor_AgvBat* p = agvbat_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_mon::AgvInfor_AgvBat&>(
      ::agv_mon::_AgvInfor_AgvBat_default_instance_);
}
inline const ::agv_mon::AgvInfor_AgvBat& AgvInfor_AgvReport::agvbat() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvReport.agvbat)
  return _internal_agvbat();
}
inline void AgvInfor_AgvReport::unsafe_arena_set_allocated_agvbat(
    ::agv_mon::AgvInfor_AgvBat* agvbat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agvbat_);
  }
  agvbat_ = agvbat;
  if (agvbat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_mon.AgvInfor.AgvReport.agvbat)
}
inline ::agv_mon::AgvInfor_AgvBat* AgvInfor_AgvReport::release_agvbat() {
  
  ::agv_mon::AgvInfor_AgvBat* temp = agvbat_;
  agvbat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agv_mon::AgvInfor_AgvBat* AgvInfor_AgvReport::unsafe_arena_release_agvbat() {
  // @@protoc_insertion_point(field_release:agv_mon.AgvInfor.AgvReport.agvbat)
  
  ::agv_mon::AgvInfor_AgvBat* temp = agvbat_;
  agvbat_ = nullptr;
  return temp;
}
inline ::agv_mon::AgvInfor_AgvBat* AgvInfor_AgvReport::_internal_mutable_agvbat() {
  
  if (agvbat_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_mon::AgvInfor_AgvBat>(GetArena());
    agvbat_ = p;
  }
  return agvbat_;
}
inline ::agv_mon::AgvInfor_AgvBat* AgvInfor_AgvReport::mutable_agvbat() {
  // @@protoc_insertion_point(field_mutable:agv_mon.AgvInfor.AgvReport.agvbat)
  return _internal_mutable_agvbat();
}
inline void AgvInfor_AgvReport::set_allocated_agvbat(::agv_mon::AgvInfor_AgvBat* agvbat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agvbat_;
  }
  if (agvbat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agvbat);
    if (message_arena != submessage_arena) {
      agvbat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agvbat, submessage_arena);
    }
    
  } else {
    
  }
  agvbat_ = agvbat;
  // @@protoc_insertion_point(field_set_allocated:agv_mon.AgvInfor.AgvReport.agvbat)
}

// .agv_mon.AgvInfor.AgvLoad agvload = 6;
inline bool AgvInfor_AgvReport::_internal_has_agvload() const {
  return this != internal_default_instance() && agvload_ != nullptr;
}
inline bool AgvInfor_AgvReport::has_agvload() const {
  return _internal_has_agvload();
}
inline void AgvInfor_AgvReport::clear_agvload() {
  if (GetArena() == nullptr && agvload_ != nullptr) {
    delete agvload_;
  }
  agvload_ = nullptr;
}
inline const ::agv_mon::AgvInfor_AgvLoad& AgvInfor_AgvReport::_internal_agvload() const {
  const ::agv_mon::AgvInfor_AgvLoad* p = agvload_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_mon::AgvInfor_AgvLoad&>(
      ::agv_mon::_AgvInfor_AgvLoad_default_instance_);
}
inline const ::agv_mon::AgvInfor_AgvLoad& AgvInfor_AgvReport::agvload() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvReport.agvload)
  return _internal_agvload();
}
inline void AgvInfor_AgvReport::unsafe_arena_set_allocated_agvload(
    ::agv_mon::AgvInfor_AgvLoad* agvload) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agvload_);
  }
  agvload_ = agvload;
  if (agvload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_mon.AgvInfor.AgvReport.agvload)
}
inline ::agv_mon::AgvInfor_AgvLoad* AgvInfor_AgvReport::release_agvload() {
  
  ::agv_mon::AgvInfor_AgvLoad* temp = agvload_;
  agvload_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agv_mon::AgvInfor_AgvLoad* AgvInfor_AgvReport::unsafe_arena_release_agvload() {
  // @@protoc_insertion_point(field_release:agv_mon.AgvInfor.AgvReport.agvload)
  
  ::agv_mon::AgvInfor_AgvLoad* temp = agvload_;
  agvload_ = nullptr;
  return temp;
}
inline ::agv_mon::AgvInfor_AgvLoad* AgvInfor_AgvReport::_internal_mutable_agvload() {
  
  if (agvload_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_mon::AgvInfor_AgvLoad>(GetArena());
    agvload_ = p;
  }
  return agvload_;
}
inline ::agv_mon::AgvInfor_AgvLoad* AgvInfor_AgvReport::mutable_agvload() {
  // @@protoc_insertion_point(field_mutable:agv_mon.AgvInfor.AgvReport.agvload)
  return _internal_mutable_agvload();
}
inline void AgvInfor_AgvReport::set_allocated_agvload(::agv_mon::AgvInfor_AgvLoad* agvload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agvload_;
  }
  if (agvload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agvload);
    if (message_arena != submessage_arena) {
      agvload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agvload, submessage_arena);
    }
    
  } else {
    
  }
  agvload_ = agvload;
  // @@protoc_insertion_point(field_set_allocated:agv_mon.AgvInfor.AgvReport.agvload)
}

// repeated .agv_mon.Param protection = 7;
inline int AgvInfor_AgvReport::_internal_protection_size() const {
  return protection_.size();
}
inline int AgvInfor_AgvReport::protection_size() const {
  return _internal_protection_size();
}
inline void AgvInfor_AgvReport::clear_protection() {
  protection_.Clear();
}
inline ::agv_mon::Param* AgvInfor_AgvReport::mutable_protection(int index) {
  // @@protoc_insertion_point(field_mutable:agv_mon.AgvInfor.AgvReport.protection)
  return protection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Param >*
AgvInfor_AgvReport::mutable_protection() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.AgvInfor.AgvReport.protection)
  return &protection_;
}
inline const ::agv_mon::Param& AgvInfor_AgvReport::_internal_protection(int index) const {
  return protection_.Get(index);
}
inline const ::agv_mon::Param& AgvInfor_AgvReport::protection(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvReport.protection)
  return _internal_protection(index);
}
inline ::agv_mon::Param* AgvInfor_AgvReport::_internal_add_protection() {
  return protection_.Add();
}
inline ::agv_mon::Param* AgvInfor_AgvReport::add_protection() {
  // @@protoc_insertion_point(field_add:agv_mon.AgvInfor.AgvReport.protection)
  return _internal_add_protection();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Param >&
AgvInfor_AgvReport::protection() const {
  // @@protoc_insertion_point(field_list:agv_mon.AgvInfor.AgvReport.protection)
  return protection_;
}

// repeated .agv_mon.Param dev_status = 8;
inline int AgvInfor_AgvReport::_internal_dev_status_size() const {
  return dev_status_.size();
}
inline int AgvInfor_AgvReport::dev_status_size() const {
  return _internal_dev_status_size();
}
inline void AgvInfor_AgvReport::clear_dev_status() {
  dev_status_.Clear();
}
inline ::agv_mon::Param* AgvInfor_AgvReport::mutable_dev_status(int index) {
  // @@protoc_insertion_point(field_mutable:agv_mon.AgvInfor.AgvReport.dev_status)
  return dev_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Param >*
AgvInfor_AgvReport::mutable_dev_status() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.AgvInfor.AgvReport.dev_status)
  return &dev_status_;
}
inline const ::agv_mon::Param& AgvInfor_AgvReport::_internal_dev_status(int index) const {
  return dev_status_.Get(index);
}
inline const ::agv_mon::Param& AgvInfor_AgvReport::dev_status(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvReport.dev_status)
  return _internal_dev_status(index);
}
inline ::agv_mon::Param* AgvInfor_AgvReport::_internal_add_dev_status() {
  return dev_status_.Add();
}
inline ::agv_mon::Param* AgvInfor_AgvReport::add_dev_status() {
  // @@protoc_insertion_point(field_add:agv_mon.AgvInfor.AgvReport.dev_status)
  return _internal_add_dev_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Param >&
AgvInfor_AgvReport::dev_status() const {
  // @@protoc_insertion_point(field_list:agv_mon.AgvInfor.AgvReport.dev_status)
  return dev_status_;
}

// -------------------------------------------------------------------

// AgvInfor_Basic

// int64 ts = 1;
inline void AgvInfor_Basic::clear_ts() {
  ts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AgvInfor_Basic::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AgvInfor_Basic::ts() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.Basic.ts)
  return _internal_ts();
}
inline void AgvInfor_Basic::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ts_ = value;
}
inline void AgvInfor_Basic::set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.Basic.ts)
}

// int32 pid = 2;
inline void AgvInfor_Basic::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_Basic::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_Basic::pid() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.Basic.pid)
  return _internal_pid();
}
inline void AgvInfor_Basic::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void AgvInfor_Basic::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.Basic.pid)
}

// int32 area = 3;
inline void AgvInfor_Basic::clear_area() {
  area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_Basic::_internal_area() const {
  return area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_Basic::area() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.Basic.area)
  return _internal_area();
}
inline void AgvInfor_Basic::_internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  area_ = value;
}
inline void AgvInfor_Basic::set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.Basic.area)
}

// int32 id = 4;
inline void AgvInfor_Basic::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_Basic::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_Basic::id() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.Basic.id)
  return _internal_id();
}
inline void AgvInfor_Basic::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void AgvInfor_Basic::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.Basic.id)
}

// int32 type = 5;
inline void AgvInfor_Basic::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_Basic::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_Basic::type() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.Basic.type)
  return _internal_type();
}
inline void AgvInfor_Basic::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void AgvInfor_Basic::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.Basic.type)
}

// string version = 6;
inline void AgvInfor_Basic::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& AgvInfor_Basic::version() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.Basic.version)
  return _internal_version();
}
inline void AgvInfor_Basic::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.Basic.version)
}
inline std::string* AgvInfor_Basic::mutable_version() {
  // @@protoc_insertion_point(field_mutable:agv_mon.AgvInfor.Basic.version)
  return _internal_mutable_version();
}
inline const std::string& AgvInfor_Basic::_internal_version() const {
  return version_.Get();
}
inline void AgvInfor_Basic::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AgvInfor_Basic::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agv_mon.AgvInfor.Basic.version)
}
inline void AgvInfor_Basic::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:agv_mon.AgvInfor.Basic.version)
}
inline void AgvInfor_Basic::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agv_mon.AgvInfor.Basic.version)
}
inline std::string* AgvInfor_Basic::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AgvInfor_Basic::release_version() {
  // @@protoc_insertion_point(field_release:agv_mon.AgvInfor.Basic.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgvInfor_Basic::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agv_mon.AgvInfor.Basic.version)
}

// int32 version_ts = 7;
inline void AgvInfor_Basic::clear_version_ts() {
  version_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_Basic::_internal_version_ts() const {
  return version_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_Basic::version_ts() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.Basic.version_ts)
  return _internal_version_ts();
}
inline void AgvInfor_Basic::_internal_set_version_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ts_ = value;
}
inline void AgvInfor_Basic::set_version_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version_ts(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.Basic.version_ts)
}

// int32 beta = 8;
inline void AgvInfor_Basic::clear_beta() {
  beta_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_Basic::_internal_beta() const {
  return beta_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_Basic::beta() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.Basic.beta)
  return _internal_beta();
}
inline void AgvInfor_Basic::_internal_set_beta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  beta_ = value;
}
inline void AgvInfor_Basic::set_beta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.Basic.beta)
}

// -------------------------------------------------------------------

// AgvInfor_AgvTask

// int32 task_id = 1;
inline void AgvInfor_AgvTask::clear_task_id() {
  task_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::_internal_task_id() const {
  return task_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::task_id() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvTask.task_id)
  return _internal_task_id();
}
inline void AgvInfor_AgvTask::_internal_set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  task_id_ = value;
}
inline void AgvInfor_AgvTask::set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvTask.task_id)
}

// int32 task_type = 2;
inline void AgvInfor_AgvTask::clear_task_type() {
  task_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::_internal_task_type() const {
  return task_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::task_type() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvTask.task_type)
  return _internal_task_type();
}
inline void AgvInfor_AgvTask::_internal_set_task_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  task_type_ = value;
}
inline void AgvInfor_AgvTask::set_task_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_task_type(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvTask.task_type)
}

// sint32 start_id = 3;
inline void AgvInfor_AgvTask::clear_start_id() {
  start_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::_internal_start_id() const {
  return start_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::start_id() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvTask.start_id)
  return _internal_start_id();
}
inline void AgvInfor_AgvTask::_internal_set_start_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_id_ = value;
}
inline void AgvInfor_AgvTask::set_start_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_id(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvTask.start_id)
}

// sint32 end_id = 4;
inline void AgvInfor_AgvTask::clear_end_id() {
  end_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::_internal_end_id() const {
  return end_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::end_id() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvTask.end_id)
  return _internal_end_id();
}
inline void AgvInfor_AgvTask::_internal_set_end_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_id_ = value;
}
inline void AgvInfor_AgvTask::set_end_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_id(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvTask.end_id)
}

// sint32 detour_id = 5;
inline void AgvInfor_AgvTask::clear_detour_id() {
  detour_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::_internal_detour_id() const {
  return detour_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::detour_id() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvTask.detour_id)
  return _internal_detour_id();
}
inline void AgvInfor_AgvTask::_internal_set_detour_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  detour_id_ = value;
}
inline void AgvInfor_AgvTask::set_detour_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_detour_id(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvTask.detour_id)
}

// sint32 nxt_sta = 6;
inline void AgvInfor_AgvTask::clear_nxt_sta() {
  nxt_sta_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::_internal_nxt_sta() const {
  return nxt_sta_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::nxt_sta() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvTask.nxt_sta)
  return _internal_nxt_sta();
}
inline void AgvInfor_AgvTask::_internal_set_nxt_sta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nxt_sta_ = value;
}
inline void AgvInfor_AgvTask::set_nxt_sta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nxt_sta(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvTask.nxt_sta)
}

// sint32 cur_seg = 7;
inline void AgvInfor_AgvTask::clear_cur_seg() {
  cur_seg_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::_internal_cur_seg() const {
  return cur_seg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::cur_seg() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvTask.cur_seg)
  return _internal_cur_seg();
}
inline void AgvInfor_AgvTask::_internal_set_cur_seg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_seg_ = value;
}
inline void AgvInfor_AgvTask::set_cur_seg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_seg(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvTask.cur_seg)
}

// sint32 nxt_seg = 8;
inline void AgvInfor_AgvTask::clear_nxt_seg() {
  nxt_seg_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::_internal_nxt_seg() const {
  return nxt_seg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::nxt_seg() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvTask.nxt_seg)
  return _internal_nxt_seg();
}
inline void AgvInfor_AgvTask::_internal_set_nxt_seg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nxt_seg_ = value;
}
inline void AgvInfor_AgvTask::set_nxt_seg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nxt_seg(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvTask.nxt_seg)
}

// sint32 start_layer = 9;
inline void AgvInfor_AgvTask::clear_start_layer() {
  start_layer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::_internal_start_layer() const {
  return start_layer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::start_layer() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvTask.start_layer)
  return _internal_start_layer();
}
inline void AgvInfor_AgvTask::_internal_set_start_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_layer_ = value;
}
inline void AgvInfor_AgvTask::set_start_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_layer(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvTask.start_layer)
}

// sint32 end_layer = 10;
inline void AgvInfor_AgvTask::clear_end_layer() {
  end_layer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::_internal_end_layer() const {
  return end_layer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvTask::end_layer() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvTask.end_layer)
  return _internal_end_layer();
}
inline void AgvInfor_AgvTask::_internal_set_end_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_layer_ = value;
}
inline void AgvInfor_AgvTask::set_end_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_layer(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvTask.end_layer)
}

// -------------------------------------------------------------------

// AgvInfor_AgvLoc

// .agv_mon.AgvInfor.COORD pos = 1;
inline bool AgvInfor_AgvLoc::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool AgvInfor_AgvLoc::has_pos() const {
  return _internal_has_pos();
}
inline void AgvInfor_AgvLoc::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::agv_mon::AgvInfor_COORD& AgvInfor_AgvLoc::_internal_pos() const {
  const ::agv_mon::AgvInfor_COORD* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_mon::AgvInfor_COORD&>(
      ::agv_mon::_AgvInfor_COORD_default_instance_);
}
inline const ::agv_mon::AgvInfor_COORD& AgvInfor_AgvLoc::pos() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvLoc.pos)
  return _internal_pos();
}
inline void AgvInfor_AgvLoc::unsafe_arena_set_allocated_pos(
    ::agv_mon::AgvInfor_COORD* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_mon.AgvInfor.AgvLoc.pos)
}
inline ::agv_mon::AgvInfor_COORD* AgvInfor_AgvLoc::release_pos() {
  
  ::agv_mon::AgvInfor_COORD* temp = pos_;
  pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agv_mon::AgvInfor_COORD* AgvInfor_AgvLoc::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:agv_mon.AgvInfor.AgvLoc.pos)
  
  ::agv_mon::AgvInfor_COORD* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::agv_mon::AgvInfor_COORD* AgvInfor_AgvLoc::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_mon::AgvInfor_COORD>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::agv_mon::AgvInfor_COORD* AgvInfor_AgvLoc::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:agv_mon.AgvInfor.AgvLoc.pos)
  return _internal_mutable_pos();
}
inline void AgvInfor_AgvLoc::set_allocated_pos(::agv_mon::AgvInfor_COORD* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:agv_mon.AgvInfor.AgvLoc.pos)
}

// .agv_mon.AgvInfor.COORD nav = 2;
inline bool AgvInfor_AgvLoc::_internal_has_nav() const {
  return this != internal_default_instance() && nav_ != nullptr;
}
inline bool AgvInfor_AgvLoc::has_nav() const {
  return _internal_has_nav();
}
inline void AgvInfor_AgvLoc::clear_nav() {
  if (GetArena() == nullptr && nav_ != nullptr) {
    delete nav_;
  }
  nav_ = nullptr;
}
inline const ::agv_mon::AgvInfor_COORD& AgvInfor_AgvLoc::_internal_nav() const {
  const ::agv_mon::AgvInfor_COORD* p = nav_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_mon::AgvInfor_COORD&>(
      ::agv_mon::_AgvInfor_COORD_default_instance_);
}
inline const ::agv_mon::AgvInfor_COORD& AgvInfor_AgvLoc::nav() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvLoc.nav)
  return _internal_nav();
}
inline void AgvInfor_AgvLoc::unsafe_arena_set_allocated_nav(
    ::agv_mon::AgvInfor_COORD* nav) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nav_);
  }
  nav_ = nav;
  if (nav) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_mon.AgvInfor.AgvLoc.nav)
}
inline ::agv_mon::AgvInfor_COORD* AgvInfor_AgvLoc::release_nav() {
  
  ::agv_mon::AgvInfor_COORD* temp = nav_;
  nav_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agv_mon::AgvInfor_COORD* AgvInfor_AgvLoc::unsafe_arena_release_nav() {
  // @@protoc_insertion_point(field_release:agv_mon.AgvInfor.AgvLoc.nav)
  
  ::agv_mon::AgvInfor_COORD* temp = nav_;
  nav_ = nullptr;
  return temp;
}
inline ::agv_mon::AgvInfor_COORD* AgvInfor_AgvLoc::_internal_mutable_nav() {
  
  if (nav_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_mon::AgvInfor_COORD>(GetArena());
    nav_ = p;
  }
  return nav_;
}
inline ::agv_mon::AgvInfor_COORD* AgvInfor_AgvLoc::mutable_nav() {
  // @@protoc_insertion_point(field_mutable:agv_mon.AgvInfor.AgvLoc.nav)
  return _internal_mutable_nav();
}
inline void AgvInfor_AgvLoc::set_allocated_nav(::agv_mon::AgvInfor_COORD* nav) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nav_;
  }
  if (nav) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nav);
    if (message_arena != submessage_arena) {
      nav = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nav, submessage_arena);
    }
    
  } else {
    
  }
  nav_ = nav;
  // @@protoc_insertion_point(field_set_allocated:agv_mon.AgvInfor.AgvLoc.nav)
}

// float pos_ang = 3;
inline void AgvInfor_AgvLoc::clear_pos_ang() {
  pos_ang_ = 0;
}
inline float AgvInfor_AgvLoc::_internal_pos_ang() const {
  return pos_ang_;
}
inline float AgvInfor_AgvLoc::pos_ang() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvLoc.pos_ang)
  return _internal_pos_ang();
}
inline void AgvInfor_AgvLoc::_internal_set_pos_ang(float value) {
  
  pos_ang_ = value;
}
inline void AgvInfor_AgvLoc::set_pos_ang(float value) {
  _internal_set_pos_ang(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvLoc.pos_ang)
}

// sint32 cur_sta = 4;
inline void AgvInfor_AgvLoc::clear_cur_sta() {
  cur_sta_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoc::_internal_cur_sta() const {
  return cur_sta_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoc::cur_sta() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvLoc.cur_sta)
  return _internal_cur_sta();
}
inline void AgvInfor_AgvLoc::_internal_set_cur_sta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_sta_ = value;
}
inline void AgvInfor_AgvLoc::set_cur_sta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_sta(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvLoc.cur_sta)
}

// sint32 see_reflect = 5;
inline void AgvInfor_AgvLoc::clear_see_reflect() {
  see_reflect_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoc::_internal_see_reflect() const {
  return see_reflect_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoc::see_reflect() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvLoc.see_reflect)
  return _internal_see_reflect();
}
inline void AgvInfor_AgvLoc::_internal_set_see_reflect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  see_reflect_ = value;
}
inline void AgvInfor_AgvLoc::set_see_reflect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_see_reflect(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvLoc.see_reflect)
}

// sint32 use_reflect = 6;
inline void AgvInfor_AgvLoc::clear_use_reflect() {
  use_reflect_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoc::_internal_use_reflect() const {
  return use_reflect_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoc::use_reflect() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvLoc.use_reflect)
  return _internal_use_reflect();
}
inline void AgvInfor_AgvLoc::_internal_set_use_reflect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  use_reflect_ = value;
}
inline void AgvInfor_AgvLoc::set_use_reflect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_use_reflect(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvLoc.use_reflect)
}

// repeated int32 reflect_id = 7;
inline int AgvInfor_AgvLoc::_internal_reflect_id_size() const {
  return reflect_id_.size();
}
inline int AgvInfor_AgvLoc::reflect_id_size() const {
  return _internal_reflect_id_size();
}
inline void AgvInfor_AgvLoc::clear_reflect_id() {
  reflect_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoc::_internal_reflect_id(int index) const {
  return reflect_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoc::reflect_id(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvLoc.reflect_id)
  return _internal_reflect_id(index);
}
inline void AgvInfor_AgvLoc::set_reflect_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  reflect_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvLoc.reflect_id)
}
inline void AgvInfor_AgvLoc::_internal_add_reflect_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  reflect_id_.Add(value);
}
inline void AgvInfor_AgvLoc::add_reflect_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_reflect_id(value);
  // @@protoc_insertion_point(field_add:agv_mon.AgvInfor.AgvLoc.reflect_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AgvInfor_AgvLoc::_internal_reflect_id() const {
  return reflect_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AgvInfor_AgvLoc::reflect_id() const {
  // @@protoc_insertion_point(field_list:agv_mon.AgvInfor.AgvLoc.reflect_id)
  return _internal_reflect_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AgvInfor_AgvLoc::_internal_mutable_reflect_id() {
  return &reflect_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AgvInfor_AgvLoc::mutable_reflect_id() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.AgvInfor.AgvLoc.reflect_id)
  return _internal_mutable_reflect_id();
}

// int32 in_lift = 8;
inline void AgvInfor_AgvLoc::clear_in_lift() {
  in_lift_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoc::_internal_in_lift() const {
  return in_lift_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoc::in_lift() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvLoc.in_lift)
  return _internal_in_lift();
}
inline void AgvInfor_AgvLoc::_internal_set_in_lift(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  in_lift_ = value;
}
inline void AgvInfor_AgvLoc::set_in_lift(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_in_lift(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvLoc.in_lift)
}

// int32 floor = 9;
inline void AgvInfor_AgvLoc::clear_floor() {
  floor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoc::_internal_floor() const {
  return floor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoc::floor() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvLoc.floor)
  return _internal_floor();
}
inline void AgvInfor_AgvLoc::_internal_set_floor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  floor_ = value;
}
inline void AgvInfor_AgvLoc::set_floor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_floor(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvLoc.floor)
}

// sint32 bind_area = 10;
inline void AgvInfor_AgvLoc::clear_bind_area() {
  bind_area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoc::_internal_bind_area() const {
  return bind_area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoc::bind_area() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvLoc.bind_area)
  return _internal_bind_area();
}
inline void AgvInfor_AgvLoc::_internal_set_bind_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bind_area_ = value;
}
inline void AgvInfor_AgvLoc::set_bind_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bind_area(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvLoc.bind_area)
}

// sint32 sta_limit = 11;
inline void AgvInfor_AgvLoc::clear_sta_limit() {
  sta_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoc::_internal_sta_limit() const {
  return sta_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoc::sta_limit() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvLoc.sta_limit)
  return _internal_sta_limit();
}
inline void AgvInfor_AgvLoc::_internal_set_sta_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sta_limit_ = value;
}
inline void AgvInfor_AgvLoc::set_sta_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sta_limit(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvLoc.sta_limit)
}

// -------------------------------------------------------------------

// AgvInfor_AgvSt

// sint32 dir = 1;
inline void AgvInfor_AgvSt::clear_dir() {
  dir_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvSt::_internal_dir() const {
  return dir_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvSt::dir() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvSt.dir)
  return _internal_dir();
}
inline void AgvInfor_AgvSt::_internal_set_dir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dir_ = value;
}
inline void AgvInfor_AgvSt::set_dir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvSt.dir)
}

// int32 speed = 2;
inline void AgvInfor_AgvSt::clear_speed() {
  speed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvSt::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvSt::speed() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvSt.speed)
  return _internal_speed();
}
inline void AgvInfor_AgvSt::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_ = value;
}
inline void AgvInfor_AgvSt::set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvSt.speed)
}

// int32 state = 3;
inline void AgvInfor_AgvSt::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvSt::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvSt::state() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvSt.state)
  return _internal_state();
}
inline void AgvInfor_AgvSt::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void AgvInfor_AgvSt::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvSt.state)
}

// int32 status = 4;
inline void AgvInfor_AgvSt::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvSt::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvSt::status() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvSt.status)
  return _internal_status();
}
inline void AgvInfor_AgvSt::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void AgvInfor_AgvSt::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvSt.status)
}

// sint32 softstop = 5;
inline void AgvInfor_AgvSt::clear_softstop() {
  softstop_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvSt::_internal_softstop() const {
  return softstop_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvSt::softstop() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvSt.softstop)
  return _internal_softstop();
}
inline void AgvInfor_AgvSt::_internal_set_softstop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  softstop_ = value;
}
inline void AgvInfor_AgvSt::set_softstop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_softstop(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvSt.softstop)
}

// sint32 error = 6;
inline void AgvInfor_AgvSt::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvSt::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvSt::error() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvSt.error)
  return _internal_error();
}
inline void AgvInfor_AgvSt::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void AgvInfor_AgvSt::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvSt.error)
}

// sint32 speedlimit = 7;
inline void AgvInfor_AgvSt::clear_speedlimit() {
  speedlimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvSt::_internal_speedlimit() const {
  return speedlimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvSt::speedlimit() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvSt.speedlimit)
  return _internal_speedlimit();
}
inline void AgvInfor_AgvSt::_internal_set_speedlimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speedlimit_ = value;
}
inline void AgvInfor_AgvSt::set_speedlimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speedlimit(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvSt.speedlimit)
}

// -------------------------------------------------------------------

// AgvInfor_AgvBat

// float battery = 1;
inline void AgvInfor_AgvBat::clear_battery() {
  battery_ = 0;
}
inline float AgvInfor_AgvBat::_internal_battery() const {
  return battery_;
}
inline float AgvInfor_AgvBat::battery() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvBat.battery)
  return _internal_battery();
}
inline void AgvInfor_AgvBat::_internal_set_battery(float value) {
  
  battery_ = value;
}
inline void AgvInfor_AgvBat::set_battery(float value) {
  _internal_set_battery(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvBat.battery)
}

// sint32 chargingtime = 2;
inline void AgvInfor_AgvBat::clear_chargingtime() {
  chargingtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvBat::_internal_chargingtime() const {
  return chargingtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvBat::chargingtime() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvBat.chargingtime)
  return _internal_chargingtime();
}
inline void AgvInfor_AgvBat::_internal_set_chargingtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chargingtime_ = value;
}
inline void AgvInfor_AgvBat::set_chargingtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chargingtime(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvBat.chargingtime)
}

// -------------------------------------------------------------------

// AgvInfor_AgvLoad

// sint32 load = 1;
inline void AgvInfor_AgvLoad::clear_load() {
  load_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoad::_internal_load() const {
  return load_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoad::load() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvLoad.load)
  return _internal_load();
}
inline void AgvInfor_AgvLoad::_internal_set_load(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  load_ = value;
}
inline void AgvInfor_AgvLoad::set_load(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_load(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvLoad.load)
}

// int32 hyd_height = 2;
inline void AgvInfor_AgvLoad::clear_hyd_height() {
  hyd_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoad::_internal_hyd_height() const {
  return hyd_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AgvLoad::hyd_height() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AgvLoad.hyd_height)
  return _internal_hyd_height();
}
inline void AgvInfor_AgvLoad::_internal_set_hyd_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hyd_height_ = value;
}
inline void AgvInfor_AgvLoad::set_hyd_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hyd_height(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AgvLoad.hyd_height)
}

// -------------------------------------------------------------------

// AgvInfor_AvoidInfo

// repeated .agv_mon.AgvInfor.COORD agvoutline = 1;
inline int AgvInfor_AvoidInfo::_internal_agvoutline_size() const {
  return agvoutline_.size();
}
inline int AgvInfor_AvoidInfo::agvoutline_size() const {
  return _internal_agvoutline_size();
}
inline void AgvInfor_AvoidInfo::clear_agvoutline() {
  agvoutline_.Clear();
}
inline ::agv_mon::AgvInfor_COORD* AgvInfor_AvoidInfo::mutable_agvoutline(int index) {
  // @@protoc_insertion_point(field_mutable:agv_mon.AgvInfor.AvoidInfo.agvoutline)
  return agvoutline_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::AgvInfor_COORD >*
AgvInfor_AvoidInfo::mutable_agvoutline() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.AgvInfor.AvoidInfo.agvoutline)
  return &agvoutline_;
}
inline const ::agv_mon::AgvInfor_COORD& AgvInfor_AvoidInfo::_internal_agvoutline(int index) const {
  return agvoutline_.Get(index);
}
inline const ::agv_mon::AgvInfor_COORD& AgvInfor_AvoidInfo::agvoutline(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AvoidInfo.agvoutline)
  return _internal_agvoutline(index);
}
inline ::agv_mon::AgvInfor_COORD* AgvInfor_AvoidInfo::_internal_add_agvoutline() {
  return agvoutline_.Add();
}
inline ::agv_mon::AgvInfor_COORD* AgvInfor_AvoidInfo::add_agvoutline() {
  // @@protoc_insertion_point(field_add:agv_mon.AgvInfor.AvoidInfo.agvoutline)
  return _internal_add_agvoutline();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::AgvInfor_COORD >&
AgvInfor_AvoidInfo::agvoutline() const {
  // @@protoc_insertion_point(field_list:agv_mon.AgvInfor.AvoidInfo.agvoutline)
  return agvoutline_;
}

// repeated .agv_mon.AgvInfor.COORD goodsoutline = 2;
inline int AgvInfor_AvoidInfo::_internal_goodsoutline_size() const {
  return goodsoutline_.size();
}
inline int AgvInfor_AvoidInfo::goodsoutline_size() const {
  return _internal_goodsoutline_size();
}
inline void AgvInfor_AvoidInfo::clear_goodsoutline() {
  goodsoutline_.Clear();
}
inline ::agv_mon::AgvInfor_COORD* AgvInfor_AvoidInfo::mutable_goodsoutline(int index) {
  // @@protoc_insertion_point(field_mutable:agv_mon.AgvInfor.AvoidInfo.goodsoutline)
  return goodsoutline_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::AgvInfor_COORD >*
AgvInfor_AvoidInfo::mutable_goodsoutline() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.AgvInfor.AvoidInfo.goodsoutline)
  return &goodsoutline_;
}
inline const ::agv_mon::AgvInfor_COORD& AgvInfor_AvoidInfo::_internal_goodsoutline(int index) const {
  return goodsoutline_.Get(index);
}
inline const ::agv_mon::AgvInfor_COORD& AgvInfor_AvoidInfo::goodsoutline(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AvoidInfo.goodsoutline)
  return _internal_goodsoutline(index);
}
inline ::agv_mon::AgvInfor_COORD* AgvInfor_AvoidInfo::_internal_add_goodsoutline() {
  return goodsoutline_.Add();
}
inline ::agv_mon::AgvInfor_COORD* AgvInfor_AvoidInfo::add_goodsoutline() {
  // @@protoc_insertion_point(field_add:agv_mon.AgvInfor.AvoidInfo.goodsoutline)
  return _internal_add_goodsoutline();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::AgvInfor_COORD >&
AgvInfor_AvoidInfo::goodsoutline() const {
  // @@protoc_insertion_point(field_list:agv_mon.AgvInfor.AvoidInfo.goodsoutline)
  return goodsoutline_;
}

// repeated int32 occupypoint = 3;
inline int AgvInfor_AvoidInfo::_internal_occupypoint_size() const {
  return occupypoint_.size();
}
inline int AgvInfor_AvoidInfo::occupypoint_size() const {
  return _internal_occupypoint_size();
}
inline void AgvInfor_AvoidInfo::clear_occupypoint() {
  occupypoint_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::_internal_occupypoint(int index) const {
  return occupypoint_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::occupypoint(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AvoidInfo.occupypoint)
  return _internal_occupypoint(index);
}
inline void AgvInfor_AvoidInfo::set_occupypoint(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  occupypoint_.Set(index, value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AvoidInfo.occupypoint)
}
inline void AgvInfor_AvoidInfo::_internal_add_occupypoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  occupypoint_.Add(value);
}
inline void AgvInfor_AvoidInfo::add_occupypoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_occupypoint(value);
  // @@protoc_insertion_point(field_add:agv_mon.AgvInfor.AvoidInfo.occupypoint)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AgvInfor_AvoidInfo::_internal_occupypoint() const {
  return occupypoint_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AgvInfor_AvoidInfo::occupypoint() const {
  // @@protoc_insertion_point(field_list:agv_mon.AgvInfor.AvoidInfo.occupypoint)
  return _internal_occupypoint();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AgvInfor_AvoidInfo::_internal_mutable_occupypoint() {
  return &occupypoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AgvInfor_AvoidInfo::mutable_occupypoint() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.AgvInfor.AvoidInfo.occupypoint)
  return _internal_mutable_occupypoint();
}

// repeated int32 scanpoint = 4;
inline int AgvInfor_AvoidInfo::_internal_scanpoint_size() const {
  return scanpoint_.size();
}
inline int AgvInfor_AvoidInfo::scanpoint_size() const {
  return _internal_scanpoint_size();
}
inline void AgvInfor_AvoidInfo::clear_scanpoint() {
  scanpoint_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::_internal_scanpoint(int index) const {
  return scanpoint_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::scanpoint(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AvoidInfo.scanpoint)
  return _internal_scanpoint(index);
}
inline void AgvInfor_AvoidInfo::set_scanpoint(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  scanpoint_.Set(index, value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AvoidInfo.scanpoint)
}
inline void AgvInfor_AvoidInfo::_internal_add_scanpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  scanpoint_.Add(value);
}
inline void AgvInfor_AvoidInfo::add_scanpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_scanpoint(value);
  // @@protoc_insertion_point(field_add:agv_mon.AgvInfor.AvoidInfo.scanpoint)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AgvInfor_AvoidInfo::_internal_scanpoint() const {
  return scanpoint_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AgvInfor_AvoidInfo::scanpoint() const {
  // @@protoc_insertion_point(field_list:agv_mon.AgvInfor.AvoidInfo.scanpoint)
  return _internal_scanpoint();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AgvInfor_AvoidInfo::_internal_mutable_scanpoint() {
  return &scanpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AgvInfor_AvoidInfo::mutable_scanpoint() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.AgvInfor.AvoidInfo.scanpoint)
  return _internal_mutable_scanpoint();
}

// sint32 stopStatus = 5;
inline void AgvInfor_AvoidInfo::clear_stopstatus() {
  stopstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::_internal_stopstatus() const {
  return stopstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::stopstatus() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AvoidInfo.stopStatus)
  return _internal_stopstatus();
}
inline void AgvInfor_AvoidInfo::_internal_set_stopstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stopstatus_ = value;
}
inline void AgvInfor_AvoidInfo::set_stopstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stopstatus(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AvoidInfo.stopStatus)
}

// sint32 stopLevel = 6;
inline void AgvInfor_AvoidInfo::clear_stoplevel() {
  stoplevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::_internal_stoplevel() const {
  return stoplevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::stoplevel() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AvoidInfo.stopLevel)
  return _internal_stoplevel();
}
inline void AgvInfor_AvoidInfo::_internal_set_stoplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stoplevel_ = value;
}
inline void AgvInfor_AvoidInfo::set_stoplevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stoplevel(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AvoidInfo.stopLevel)
}

// sint32 stopByAGVId = 7;
inline void AgvInfor_AvoidInfo::clear_stopbyagvid() {
  stopbyagvid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::_internal_stopbyagvid() const {
  return stopbyagvid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::stopbyagvid() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AvoidInfo.stopByAGVId)
  return _internal_stopbyagvid();
}
inline void AgvInfor_AvoidInfo::_internal_set_stopbyagvid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stopbyagvid_ = value;
}
inline void AgvInfor_AvoidInfo::set_stopbyagvid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stopbyagvid(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AvoidInfo.stopByAGVId)
}

// sint32 stopReason = 8;
inline void AgvInfor_AvoidInfo::clear_stopreason() {
  stopreason_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::_internal_stopreason() const {
  return stopreason_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::stopreason() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AvoidInfo.stopReason)
  return _internal_stopreason();
}
inline void AgvInfor_AvoidInfo::_internal_set_stopreason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stopreason_ = value;
}
inline void AgvInfor_AvoidInfo::set_stopreason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stopreason(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AvoidInfo.stopReason)
}

// sint32 speedLevel = 9;
inline void AgvInfor_AvoidInfo::clear_speedlevel() {
  speedlevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::_internal_speedlevel() const {
  return speedlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::speedlevel() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AvoidInfo.speedLevel)
  return _internal_speedlevel();
}
inline void AgvInfor_AvoidInfo::_internal_set_speedlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speedlevel_ = value;
}
inline void AgvInfor_AvoidInfo::set_speedlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speedlevel(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AvoidInfo.speedLevel)
}

// sint32 speedByAGVId = 10;
inline void AgvInfor_AvoidInfo::clear_speedbyagvid() {
  speedbyagvid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::_internal_speedbyagvid() const {
  return speedbyagvid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::speedbyagvid() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AvoidInfo.speedByAGVId)
  return _internal_speedbyagvid();
}
inline void AgvInfor_AvoidInfo::_internal_set_speedbyagvid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speedbyagvid_ = value;
}
inline void AgvInfor_AvoidInfo::set_speedbyagvid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speedbyagvid(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AvoidInfo.speedByAGVId)
}

// sint32 speedReason = 11;
inline void AgvInfor_AvoidInfo::clear_speedreason() {
  speedreason_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::_internal_speedreason() const {
  return speedreason_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::speedreason() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AvoidInfo.speedReason)
  return _internal_speedreason();
}
inline void AgvInfor_AvoidInfo::_internal_set_speedreason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speedreason_ = value;
}
inline void AgvInfor_AvoidInfo::set_speedreason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speedreason(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AvoidInfo.speedReason)
}

// sint32 outLineType = 12;
inline void AgvInfor_AvoidInfo::clear_outlinetype() {
  outlinetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::_internal_outlinetype() const {
  return outlinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::outlinetype() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AvoidInfo.outLineType)
  return _internal_outlinetype();
}
inline void AgvInfor_AvoidInfo::_internal_set_outlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  outlinetype_ = value;
}
inline void AgvInfor_AvoidInfo::set_outlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_outlinetype(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AvoidInfo.outLineType)
}

// sint32 confPoint = 13;
inline void AgvInfor_AvoidInfo::clear_confpoint() {
  confpoint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::_internal_confpoint() const {
  return confpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_AvoidInfo::confpoint() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.AvoidInfo.confPoint)
  return _internal_confpoint();
}
inline void AgvInfor_AvoidInfo::_internal_set_confpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confpoint_ = value;
}
inline void AgvInfor_AvoidInfo::set_confpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confpoint(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.AvoidInfo.confPoint)
}

// -------------------------------------------------------------------

// AgvInfor_TimeInfo

// int32 idle_wait_ts = 1;
inline void AgvInfor_TimeInfo::clear_idle_wait_ts() {
  idle_wait_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_TimeInfo::_internal_idle_wait_ts() const {
  return idle_wait_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_TimeInfo::idle_wait_ts() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.TimeInfo.idle_wait_ts)
  return _internal_idle_wait_ts();
}
inline void AgvInfor_TimeInfo::_internal_set_idle_wait_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idle_wait_ts_ = value;
}
inline void AgvInfor_TimeInfo::set_idle_wait_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idle_wait_ts(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.TimeInfo.idle_wait_ts)
}

// int32 avoid_set_ts = 2;
inline void AgvInfor_TimeInfo::clear_avoid_set_ts() {
  avoid_set_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_TimeInfo::_internal_avoid_set_ts() const {
  return avoid_set_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_TimeInfo::avoid_set_ts() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.TimeInfo.avoid_set_ts)
  return _internal_avoid_set_ts();
}
inline void AgvInfor_TimeInfo::_internal_set_avoid_set_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avoid_set_ts_ = value;
}
inline void AgvInfor_TimeInfo::set_avoid_set_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avoid_set_ts(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.TimeInfo.avoid_set_ts)
}

// int32 manual_on_ts = 3;
inline void AgvInfor_TimeInfo::clear_manual_on_ts() {
  manual_on_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_TimeInfo::_internal_manual_on_ts() const {
  return manual_on_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_TimeInfo::manual_on_ts() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.TimeInfo.manual_on_ts)
  return _internal_manual_on_ts();
}
inline void AgvInfor_TimeInfo::_internal_set_manual_on_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  manual_on_ts_ = value;
}
inline void AgvInfor_TimeInfo::set_manual_on_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_manual_on_ts(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.TimeInfo.manual_on_ts)
}

// int32 softstop_on_ts = 4;
inline void AgvInfor_TimeInfo::clear_softstop_on_ts() {
  softstop_on_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_TimeInfo::_internal_softstop_on_ts() const {
  return softstop_on_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_TimeInfo::softstop_on_ts() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.TimeInfo.softstop_on_ts)
  return _internal_softstop_on_ts();
}
inline void AgvInfor_TimeInfo::_internal_set_softstop_on_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  softstop_on_ts_ = value;
}
inline void AgvInfor_TimeInfo::set_softstop_on_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_softstop_on_ts(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.TimeInfo.softstop_on_ts)
}

// int32 warning_on_ts = 5;
inline void AgvInfor_TimeInfo::clear_warning_on_ts() {
  warning_on_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_TimeInfo::_internal_warning_on_ts() const {
  return warning_on_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_TimeInfo::warning_on_ts() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.TimeInfo.warning_on_ts)
  return _internal_warning_on_ts();
}
inline void AgvInfor_TimeInfo::_internal_set_warning_on_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  warning_on_ts_ = value;
}
inline void AgvInfor_TimeInfo::set_warning_on_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_warning_on_ts(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.TimeInfo.warning_on_ts)
}

// -------------------------------------------------------------------

// AgvInfor_COORD

// sint32 x = 1;
inline void AgvInfor_COORD::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_COORD::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_COORD::x() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.COORD.x)
  return _internal_x();
}
inline void AgvInfor_COORD::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void AgvInfor_COORD::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.COORD.x)
}

// sint32 y = 2;
inline void AgvInfor_COORD::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_COORD::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor_COORD::y() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.COORD.y)
  return _internal_y();
}
inline void AgvInfor_COORD::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void AgvInfor_COORD::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.COORD.y)
}

// -------------------------------------------------------------------

// AgvInfor

// uint32 ip = 1;
inline void AgvInfor::clear_ip() {
  ip_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AgvInfor::_internal_ip() const {
  return ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AgvInfor::ip() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.ip)
  return _internal_ip();
}
inline void AgvInfor::_internal_set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ip_ = value;
}
inline void AgvInfor::set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.ip)
}

// int64 ts = 2;
inline void AgvInfor::clear_ts() {
  ts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AgvInfor::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AgvInfor::ts() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.ts)
  return _internal_ts();
}
inline void AgvInfor::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ts_ = value;
}
inline void AgvInfor::set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.ts)
}

// int32 ol = 3;
inline void AgvInfor::clear_ol() {
  ol_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor::_internal_ol() const {
  return ol_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor::ol() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.ol)
  return _internal_ol();
}
inline void AgvInfor::_internal_set_ol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ol_ = value;
}
inline void AgvInfor::set_ol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ol(value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.ol)
}

// .agv_mon.AgvInfor.AgvReport agvreport = 4;
inline bool AgvInfor::_internal_has_agvreport() const {
  return this != internal_default_instance() && agvreport_ != nullptr;
}
inline bool AgvInfor::has_agvreport() const {
  return _internal_has_agvreport();
}
inline void AgvInfor::clear_agvreport() {
  if (GetArena() == nullptr && agvreport_ != nullptr) {
    delete agvreport_;
  }
  agvreport_ = nullptr;
}
inline const ::agv_mon::AgvInfor_AgvReport& AgvInfor::_internal_agvreport() const {
  const ::agv_mon::AgvInfor_AgvReport* p = agvreport_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_mon::AgvInfor_AgvReport&>(
      ::agv_mon::_AgvInfor_AgvReport_default_instance_);
}
inline const ::agv_mon::AgvInfor_AgvReport& AgvInfor::agvreport() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.agvreport)
  return _internal_agvreport();
}
inline void AgvInfor::unsafe_arena_set_allocated_agvreport(
    ::agv_mon::AgvInfor_AgvReport* agvreport) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agvreport_);
  }
  agvreport_ = agvreport;
  if (agvreport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_mon.AgvInfor.agvreport)
}
inline ::agv_mon::AgvInfor_AgvReport* AgvInfor::release_agvreport() {
  
  ::agv_mon::AgvInfor_AgvReport* temp = agvreport_;
  agvreport_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agv_mon::AgvInfor_AgvReport* AgvInfor::unsafe_arena_release_agvreport() {
  // @@protoc_insertion_point(field_release:agv_mon.AgvInfor.agvreport)
  
  ::agv_mon::AgvInfor_AgvReport* temp = agvreport_;
  agvreport_ = nullptr;
  return temp;
}
inline ::agv_mon::AgvInfor_AgvReport* AgvInfor::_internal_mutable_agvreport() {
  
  if (agvreport_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_mon::AgvInfor_AgvReport>(GetArena());
    agvreport_ = p;
  }
  return agvreport_;
}
inline ::agv_mon::AgvInfor_AgvReport* AgvInfor::mutable_agvreport() {
  // @@protoc_insertion_point(field_mutable:agv_mon.AgvInfor.agvreport)
  return _internal_mutable_agvreport();
}
inline void AgvInfor::set_allocated_agvreport(::agv_mon::AgvInfor_AgvReport* agvreport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agvreport_;
  }
  if (agvreport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agvreport);
    if (message_arena != submessage_arena) {
      agvreport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agvreport, submessage_arena);
    }
    
  } else {
    
  }
  agvreport_ = agvreport;
  // @@protoc_insertion_point(field_set_allocated:agv_mon.AgvInfor.agvreport)
}

// .agv_mon.AgvInfor.AvoidInfo avoidinfo = 5;
inline bool AgvInfor::_internal_has_avoidinfo() const {
  return this != internal_default_instance() && avoidinfo_ != nullptr;
}
inline bool AgvInfor::has_avoidinfo() const {
  return _internal_has_avoidinfo();
}
inline void AgvInfor::clear_avoidinfo() {
  if (GetArena() == nullptr && avoidinfo_ != nullptr) {
    delete avoidinfo_;
  }
  avoidinfo_ = nullptr;
}
inline const ::agv_mon::AgvInfor_AvoidInfo& AgvInfor::_internal_avoidinfo() const {
  const ::agv_mon::AgvInfor_AvoidInfo* p = avoidinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_mon::AgvInfor_AvoidInfo&>(
      ::agv_mon::_AgvInfor_AvoidInfo_default_instance_);
}
inline const ::agv_mon::AgvInfor_AvoidInfo& AgvInfor::avoidinfo() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.avoidinfo)
  return _internal_avoidinfo();
}
inline void AgvInfor::unsafe_arena_set_allocated_avoidinfo(
    ::agv_mon::AgvInfor_AvoidInfo* avoidinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avoidinfo_);
  }
  avoidinfo_ = avoidinfo;
  if (avoidinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_mon.AgvInfor.avoidinfo)
}
inline ::agv_mon::AgvInfor_AvoidInfo* AgvInfor::release_avoidinfo() {
  
  ::agv_mon::AgvInfor_AvoidInfo* temp = avoidinfo_;
  avoidinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agv_mon::AgvInfor_AvoidInfo* AgvInfor::unsafe_arena_release_avoidinfo() {
  // @@protoc_insertion_point(field_release:agv_mon.AgvInfor.avoidinfo)
  
  ::agv_mon::AgvInfor_AvoidInfo* temp = avoidinfo_;
  avoidinfo_ = nullptr;
  return temp;
}
inline ::agv_mon::AgvInfor_AvoidInfo* AgvInfor::_internal_mutable_avoidinfo() {
  
  if (avoidinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_mon::AgvInfor_AvoidInfo>(GetArena());
    avoidinfo_ = p;
  }
  return avoidinfo_;
}
inline ::agv_mon::AgvInfor_AvoidInfo* AgvInfor::mutable_avoidinfo() {
  // @@protoc_insertion_point(field_mutable:agv_mon.AgvInfor.avoidinfo)
  return _internal_mutable_avoidinfo();
}
inline void AgvInfor::set_allocated_avoidinfo(::agv_mon::AgvInfor_AvoidInfo* avoidinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete avoidinfo_;
  }
  if (avoidinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(avoidinfo);
    if (message_arena != submessage_arena) {
      avoidinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avoidinfo, submessage_arena);
    }
    
  } else {
    
  }
  avoidinfo_ = avoidinfo;
  // @@protoc_insertion_point(field_set_allocated:agv_mon.AgvInfor.avoidinfo)
}

// .agv_mon.AgvInfor.TimeInfo timeinfo = 6;
inline bool AgvInfor::_internal_has_timeinfo() const {
  return this != internal_default_instance() && timeinfo_ != nullptr;
}
inline bool AgvInfor::has_timeinfo() const {
  return _internal_has_timeinfo();
}
inline void AgvInfor::clear_timeinfo() {
  if (GetArena() == nullptr && timeinfo_ != nullptr) {
    delete timeinfo_;
  }
  timeinfo_ = nullptr;
}
inline const ::agv_mon::AgvInfor_TimeInfo& AgvInfor::_internal_timeinfo() const {
  const ::agv_mon::AgvInfor_TimeInfo* p = timeinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_mon::AgvInfor_TimeInfo&>(
      ::agv_mon::_AgvInfor_TimeInfo_default_instance_);
}
inline const ::agv_mon::AgvInfor_TimeInfo& AgvInfor::timeinfo() const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.timeinfo)
  return _internal_timeinfo();
}
inline void AgvInfor::unsafe_arena_set_allocated_timeinfo(
    ::agv_mon::AgvInfor_TimeInfo* timeinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeinfo_);
  }
  timeinfo_ = timeinfo;
  if (timeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_mon.AgvInfor.timeinfo)
}
inline ::agv_mon::AgvInfor_TimeInfo* AgvInfor::release_timeinfo() {
  
  ::agv_mon::AgvInfor_TimeInfo* temp = timeinfo_;
  timeinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agv_mon::AgvInfor_TimeInfo* AgvInfor::unsafe_arena_release_timeinfo() {
  // @@protoc_insertion_point(field_release:agv_mon.AgvInfor.timeinfo)
  
  ::agv_mon::AgvInfor_TimeInfo* temp = timeinfo_;
  timeinfo_ = nullptr;
  return temp;
}
inline ::agv_mon::AgvInfor_TimeInfo* AgvInfor::_internal_mutable_timeinfo() {
  
  if (timeinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_mon::AgvInfor_TimeInfo>(GetArena());
    timeinfo_ = p;
  }
  return timeinfo_;
}
inline ::agv_mon::AgvInfor_TimeInfo* AgvInfor::mutable_timeinfo() {
  // @@protoc_insertion_point(field_mutable:agv_mon.AgvInfor.timeinfo)
  return _internal_mutable_timeinfo();
}
inline void AgvInfor::set_allocated_timeinfo(::agv_mon::AgvInfor_TimeInfo* timeinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete timeinfo_;
  }
  if (timeinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(timeinfo);
    if (message_arena != submessage_arena) {
      timeinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeinfo, submessage_arena);
    }
    
  } else {
    
  }
  timeinfo_ = timeinfo;
  // @@protoc_insertion_point(field_set_allocated:agv_mon.AgvInfor.timeinfo)
}

// repeated int32 route_id = 7;
inline int AgvInfor::_internal_route_id_size() const {
  return route_id_.size();
}
inline int AgvInfor::route_id_size() const {
  return _internal_route_id_size();
}
inline void AgvInfor::clear_route_id() {
  route_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor::_internal_route_id(int index) const {
  return route_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgvInfor::route_id(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.route_id)
  return _internal_route_id(index);
}
inline void AgvInfor::set_route_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  route_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:agv_mon.AgvInfor.route_id)
}
inline void AgvInfor::_internal_add_route_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  route_id_.Add(value);
}
inline void AgvInfor::add_route_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_route_id(value);
  // @@protoc_insertion_point(field_add:agv_mon.AgvInfor.route_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AgvInfor::_internal_route_id() const {
  return route_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AgvInfor::route_id() const {
  // @@protoc_insertion_point(field_list:agv_mon.AgvInfor.route_id)
  return _internal_route_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AgvInfor::_internal_mutable_route_id() {
  return &route_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AgvInfor::mutable_route_id() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.AgvInfor.route_id)
  return _internal_mutable_route_id();
}

// repeated .agv_mon.RoutePoint routepoint = 8;
inline int AgvInfor::_internal_routepoint_size() const {
  return routepoint_.size();
}
inline int AgvInfor::routepoint_size() const {
  return _internal_routepoint_size();
}
inline void AgvInfor::clear_routepoint() {
  routepoint_.Clear();
}
inline ::agv_mon::RoutePoint* AgvInfor::mutable_routepoint(int index) {
  // @@protoc_insertion_point(field_mutable:agv_mon.AgvInfor.routepoint)
  return routepoint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::RoutePoint >*
AgvInfor::mutable_routepoint() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.AgvInfor.routepoint)
  return &routepoint_;
}
inline const ::agv_mon::RoutePoint& AgvInfor::_internal_routepoint(int index) const {
  return routepoint_.Get(index);
}
inline const ::agv_mon::RoutePoint& AgvInfor::routepoint(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.AgvInfor.routepoint)
  return _internal_routepoint(index);
}
inline ::agv_mon::RoutePoint* AgvInfor::_internal_add_routepoint() {
  return routepoint_.Add();
}
inline ::agv_mon::RoutePoint* AgvInfor::add_routepoint() {
  // @@protoc_insertion_point(field_add:agv_mon.AgvInfor.routepoint)
  return _internal_add_routepoint();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::RoutePoint >&
AgvInfor::routepoint() const {
  // @@protoc_insertion_point(field_list:agv_mon.AgvInfor.routepoint)
  return routepoint_;
}

// -------------------------------------------------------------------

// LiftInfor

// string ip = 1;
inline void LiftInfor::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& LiftInfor::ip() const {
  // @@protoc_insertion_point(field_get:agv_mon.LiftInfor.ip)
  return _internal_ip();
}
inline void LiftInfor::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:agv_mon.LiftInfor.ip)
}
inline std::string* LiftInfor::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:agv_mon.LiftInfor.ip)
  return _internal_mutable_ip();
}
inline const std::string& LiftInfor::_internal_ip() const {
  return ip_.Get();
}
inline void LiftInfor::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiftInfor::set_ip(std::string&& value) {
  
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agv_mon.LiftInfor.ip)
}
inline void LiftInfor::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:agv_mon.LiftInfor.ip)
}
inline void LiftInfor::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agv_mon.LiftInfor.ip)
}
inline std::string* LiftInfor::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiftInfor::release_ip() {
  // @@protoc_insertion_point(field_release:agv_mon.LiftInfor.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiftInfor::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agv_mon.LiftInfor.ip)
}

// int64 ts = 2;
inline void LiftInfor::clear_ts() {
  ts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiftInfor::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiftInfor::ts() const {
  // @@protoc_insertion_point(field_get:agv_mon.LiftInfor.ts)
  return _internal_ts();
}
inline void LiftInfor::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ts_ = value;
}
inline void LiftInfor::set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:agv_mon.LiftInfor.ts)
}

// sint32 lift_group = 3;
inline void LiftInfor::clear_lift_group() {
  lift_group_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::_internal_lift_group() const {
  return lift_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::lift_group() const {
  // @@protoc_insertion_point(field_get:agv_mon.LiftInfor.lift_group)
  return _internal_lift_group();
}
inline void LiftInfor::_internal_set_lift_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lift_group_ = value;
}
inline void LiftInfor::set_lift_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lift_group(value);
  // @@protoc_insertion_point(field_set:agv_mon.LiftInfor.lift_group)
}

// sint32 lift_idx = 4;
inline void LiftInfor::clear_lift_idx() {
  lift_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::_internal_lift_idx() const {
  return lift_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::lift_idx() const {
  // @@protoc_insertion_point(field_get:agv_mon.LiftInfor.lift_idx)
  return _internal_lift_idx();
}
inline void LiftInfor::_internal_set_lift_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lift_idx_ = value;
}
inline void LiftInfor::set_lift_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lift_idx(value);
  // @@protoc_insertion_point(field_set:agv_mon.LiftInfor.lift_idx)
}

// sint32 lift_agv = 5;
inline void LiftInfor::clear_lift_agv() {
  lift_agv_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::_internal_lift_agv() const {
  return lift_agv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::lift_agv() const {
  // @@protoc_insertion_point(field_get:agv_mon.LiftInfor.lift_agv)
  return _internal_lift_agv();
}
inline void LiftInfor::_internal_set_lift_agv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lift_agv_ = value;
}
inline void LiftInfor::set_lift_agv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lift_agv(value);
  // @@protoc_insertion_point(field_set:agv_mon.LiftInfor.lift_agv)
}

// sint32 startFloor = 6;
inline void LiftInfor::clear_startfloor() {
  startfloor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::_internal_startfloor() const {
  return startfloor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::startfloor() const {
  // @@protoc_insertion_point(field_get:agv_mon.LiftInfor.startFloor)
  return _internal_startfloor();
}
inline void LiftInfor::_internal_set_startfloor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  startfloor_ = value;
}
inline void LiftInfor::set_startfloor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_startfloor(value);
  // @@protoc_insertion_point(field_set:agv_mon.LiftInfor.startFloor)
}

// sint32 endFloor = 7;
inline void LiftInfor::clear_endfloor() {
  endfloor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::_internal_endfloor() const {
  return endfloor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::endfloor() const {
  // @@protoc_insertion_point(field_get:agv_mon.LiftInfor.endFloor)
  return _internal_endfloor();
}
inline void LiftInfor::_internal_set_endfloor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  endfloor_ = value;
}
inline void LiftInfor::set_endfloor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_endfloor(value);
  // @@protoc_insertion_point(field_set:agv_mon.LiftInfor.endFloor)
}

// sint32 curFloor = 8;
inline void LiftInfor::clear_curfloor() {
  curfloor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::_internal_curfloor() const {
  return curfloor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::curfloor() const {
  // @@protoc_insertion_point(field_get:agv_mon.LiftInfor.curFloor)
  return _internal_curfloor();
}
inline void LiftInfor::_internal_set_curfloor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curfloor_ = value;
}
inline void LiftInfor::set_curfloor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curfloor(value);
  // @@protoc_insertion_point(field_set:agv_mon.LiftInfor.curFloor)
}

// int32 openInPlace = 9;
inline void LiftInfor::clear_openinplace() {
  openinplace_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::_internal_openinplace() const {
  return openinplace_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::openinplace() const {
  // @@protoc_insertion_point(field_get:agv_mon.LiftInfor.openInPlace)
  return _internal_openinplace();
}
inline void LiftInfor::_internal_set_openinplace(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  openinplace_ = value;
}
inline void LiftInfor::set_openinplace(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_openinplace(value);
  // @@protoc_insertion_point(field_set:agv_mon.LiftInfor.openInPlace)
}

// int32 closeInPlace = 10;
inline void LiftInfor::clear_closeinplace() {
  closeinplace_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::_internal_closeinplace() const {
  return closeinplace_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::closeinplace() const {
  // @@protoc_insertion_point(field_get:agv_mon.LiftInfor.closeInPlace)
  return _internal_closeinplace();
}
inline void LiftInfor::_internal_set_closeinplace(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  closeinplace_ = value;
}
inline void LiftInfor::set_closeinplace(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_closeinplace(value);
  // @@protoc_insertion_point(field_set:agv_mon.LiftInfor.closeInPlace)
}

// int32 idleWait = 11;
inline void LiftInfor::clear_idlewait() {
  idlewait_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::_internal_idlewait() const {
  return idlewait_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::idlewait() const {
  // @@protoc_insertion_point(field_get:agv_mon.LiftInfor.idleWait)
  return _internal_idlewait();
}
inline void LiftInfor::_internal_set_idlewait(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idlewait_ = value;
}
inline void LiftInfor::set_idlewait(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idlewait(value);
  // @@protoc_insertion_point(field_set:agv_mon.LiftInfor.idleWait)
}

// int32 runSignal = 12;
inline void LiftInfor::clear_runsignal() {
  runsignal_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::_internal_runsignal() const {
  return runsignal_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LiftInfor::runsignal() const {
  // @@protoc_insertion_point(field_get:agv_mon.LiftInfor.runSignal)
  return _internal_runsignal();
}
inline void LiftInfor::_internal_set_runsignal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  runsignal_ = value;
}
inline void LiftInfor::set_runsignal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_runsignal(value);
  // @@protoc_insertion_point(field_set:agv_mon.LiftInfor.runSignal)
}

// sint64 incall_floor = 13;
inline void LiftInfor::clear_incall_floor() {
  incall_floor_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiftInfor::_internal_incall_floor() const {
  return incall_floor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiftInfor::incall_floor() const {
  // @@protoc_insertion_point(field_get:agv_mon.LiftInfor.incall_floor)
  return _internal_incall_floor();
}
inline void LiftInfor::_internal_set_incall_floor(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  incall_floor_ = value;
}
inline void LiftInfor::set_incall_floor(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_incall_floor(value);
  // @@protoc_insertion_point(field_set:agv_mon.LiftInfor.incall_floor)
}

// sint64 outcall_floor = 14;
inline void LiftInfor::clear_outcall_floor() {
  outcall_floor_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiftInfor::_internal_outcall_floor() const {
  return outcall_floor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiftInfor::outcall_floor() const {
  // @@protoc_insertion_point(field_get:agv_mon.LiftInfor.outcall_floor)
  return _internal_outcall_floor();
}
inline void LiftInfor::_internal_set_outcall_floor(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  outcall_floor_ = value;
}
inline void LiftInfor::set_outcall_floor(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_outcall_floor(value);
  // @@protoc_insertion_point(field_set:agv_mon.LiftInfor.outcall_floor)
}

// -------------------------------------------------------------------

// Mon_Route_AgvRoute

// int32 id = 1;
inline void Mon_Route_AgvRoute::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mon_Route_AgvRoute::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mon_Route_AgvRoute::id() const {
  // @@protoc_insertion_point(field_get:agv_mon.Mon_Route.AgvRoute.id)
  return _internal_id();
}
inline void Mon_Route_AgvRoute::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Mon_Route_AgvRoute::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:agv_mon.Mon_Route.AgvRoute.id)
}

// repeated int32 route_id = 2;
inline int Mon_Route_AgvRoute::_internal_route_id_size() const {
  return route_id_.size();
}
inline int Mon_Route_AgvRoute::route_id_size() const {
  return _internal_route_id_size();
}
inline void Mon_Route_AgvRoute::clear_route_id() {
  route_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mon_Route_AgvRoute::_internal_route_id(int index) const {
  return route_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mon_Route_AgvRoute::route_id(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.Mon_Route.AgvRoute.route_id)
  return _internal_route_id(index);
}
inline void Mon_Route_AgvRoute::set_route_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  route_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:agv_mon.Mon_Route.AgvRoute.route_id)
}
inline void Mon_Route_AgvRoute::_internal_add_route_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  route_id_.Add(value);
}
inline void Mon_Route_AgvRoute::add_route_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_route_id(value);
  // @@protoc_insertion_point(field_add:agv_mon.Mon_Route.AgvRoute.route_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Mon_Route_AgvRoute::_internal_route_id() const {
  return route_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Mon_Route_AgvRoute::route_id() const {
  // @@protoc_insertion_point(field_list:agv_mon.Mon_Route.AgvRoute.route_id)
  return _internal_route_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Mon_Route_AgvRoute::_internal_mutable_route_id() {
  return &route_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Mon_Route_AgvRoute::mutable_route_id() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.Mon_Route.AgvRoute.route_id)
  return _internal_mutable_route_id();
}

// repeated .agv_mon.RoutePoint routepoint = 3;
inline int Mon_Route_AgvRoute::_internal_routepoint_size() const {
  return routepoint_.size();
}
inline int Mon_Route_AgvRoute::routepoint_size() const {
  return _internal_routepoint_size();
}
inline void Mon_Route_AgvRoute::clear_routepoint() {
  routepoint_.Clear();
}
inline ::agv_mon::RoutePoint* Mon_Route_AgvRoute::mutable_routepoint(int index) {
  // @@protoc_insertion_point(field_mutable:agv_mon.Mon_Route.AgvRoute.routepoint)
  return routepoint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::RoutePoint >*
Mon_Route_AgvRoute::mutable_routepoint() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.Mon_Route.AgvRoute.routepoint)
  return &routepoint_;
}
inline const ::agv_mon::RoutePoint& Mon_Route_AgvRoute::_internal_routepoint(int index) const {
  return routepoint_.Get(index);
}
inline const ::agv_mon::RoutePoint& Mon_Route_AgvRoute::routepoint(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.Mon_Route.AgvRoute.routepoint)
  return _internal_routepoint(index);
}
inline ::agv_mon::RoutePoint* Mon_Route_AgvRoute::_internal_add_routepoint() {
  return routepoint_.Add();
}
inline ::agv_mon::RoutePoint* Mon_Route_AgvRoute::add_routepoint() {
  // @@protoc_insertion_point(field_add:agv_mon.Mon_Route.AgvRoute.routepoint)
  return _internal_add_routepoint();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::RoutePoint >&
Mon_Route_AgvRoute::routepoint() const {
  // @@protoc_insertion_point(field_list:agv_mon.Mon_Route.AgvRoute.routepoint)
  return routepoint_;
}

// sint32 cur_seg = 4;
inline void Mon_Route_AgvRoute::clear_cur_seg() {
  cur_seg_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mon_Route_AgvRoute::_internal_cur_seg() const {
  return cur_seg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mon_Route_AgvRoute::cur_seg() const {
  // @@protoc_insertion_point(field_get:agv_mon.Mon_Route.AgvRoute.cur_seg)
  return _internal_cur_seg();
}
inline void Mon_Route_AgvRoute::_internal_set_cur_seg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_seg_ = value;
}
inline void Mon_Route_AgvRoute::set_cur_seg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_seg(value);
  // @@protoc_insertion_point(field_set:agv_mon.Mon_Route.AgvRoute.cur_seg)
}

// sint32 nxt_seg = 5;
inline void Mon_Route_AgvRoute::clear_nxt_seg() {
  nxt_seg_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mon_Route_AgvRoute::_internal_nxt_seg() const {
  return nxt_seg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mon_Route_AgvRoute::nxt_seg() const {
  // @@protoc_insertion_point(field_get:agv_mon.Mon_Route.AgvRoute.nxt_seg)
  return _internal_nxt_seg();
}
inline void Mon_Route_AgvRoute::_internal_set_nxt_seg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nxt_seg_ = value;
}
inline void Mon_Route_AgvRoute::set_nxt_seg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nxt_seg(value);
  // @@protoc_insertion_point(field_set:agv_mon.Mon_Route.AgvRoute.nxt_seg)
}

// -------------------------------------------------------------------

// Mon_Route

// repeated .agv_mon.Mon_Route.AgvRoute agvroute = 1;
inline int Mon_Route::_internal_agvroute_size() const {
  return agvroute_.size();
}
inline int Mon_Route::agvroute_size() const {
  return _internal_agvroute_size();
}
inline void Mon_Route::clear_agvroute() {
  agvroute_.Clear();
}
inline ::agv_mon::Mon_Route_AgvRoute* Mon_Route::mutable_agvroute(int index) {
  // @@protoc_insertion_point(field_mutable:agv_mon.Mon_Route.agvroute)
  return agvroute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Mon_Route_AgvRoute >*
Mon_Route::mutable_agvroute() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.Mon_Route.agvroute)
  return &agvroute_;
}
inline const ::agv_mon::Mon_Route_AgvRoute& Mon_Route::_internal_agvroute(int index) const {
  return agvroute_.Get(index);
}
inline const ::agv_mon::Mon_Route_AgvRoute& Mon_Route::agvroute(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.Mon_Route.agvroute)
  return _internal_agvroute(index);
}
inline ::agv_mon::Mon_Route_AgvRoute* Mon_Route::_internal_add_agvroute() {
  return agvroute_.Add();
}
inline ::agv_mon::Mon_Route_AgvRoute* Mon_Route::add_agvroute() {
  // @@protoc_insertion_point(field_add:agv_mon.Mon_Route.agvroute)
  return _internal_add_agvroute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Mon_Route_AgvRoute >&
Mon_Route::agvroute() const {
  // @@protoc_insertion_point(field_list:agv_mon.Mon_Route.agvroute)
  return agvroute_;
}

// -------------------------------------------------------------------

// RoutePoint

// int32 point = 1;
inline void RoutePoint::clear_point() {
  point_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutePoint::_internal_point() const {
  return point_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutePoint::point() const {
  // @@protoc_insertion_point(field_get:agv_mon.RoutePoint.point)
  return _internal_point();
}
inline void RoutePoint::_internal_set_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  point_ = value;
}
inline void RoutePoint::set_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:agv_mon.RoutePoint.point)
}

// int32 fpoint = 2;
inline void RoutePoint::clear_fpoint() {
  fpoint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutePoint::_internal_fpoint() const {
  return fpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutePoint::fpoint() const {
  // @@protoc_insertion_point(field_get:agv_mon.RoutePoint.fpoint)
  return _internal_fpoint();
}
inline void RoutePoint::_internal_set_fpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fpoint_ = value;
}
inline void RoutePoint::set_fpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fpoint(value);
  // @@protoc_insertion_point(field_set:agv_mon.RoutePoint.fpoint)
}

// -------------------------------------------------------------------

// Task_Data

// repeated .agv_mon.TaskInfo taskinfo = 1;
inline int Task_Data::_internal_taskinfo_size() const {
  return taskinfo_.size();
}
inline int Task_Data::taskinfo_size() const {
  return _internal_taskinfo_size();
}
inline void Task_Data::clear_taskinfo() {
  taskinfo_.Clear();
}
inline ::agv_mon::TaskInfo* Task_Data::mutable_taskinfo(int index) {
  // @@protoc_insertion_point(field_mutable:agv_mon.Task_Data.taskinfo)
  return taskinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::TaskInfo >*
Task_Data::mutable_taskinfo() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.Task_Data.taskinfo)
  return &taskinfo_;
}
inline const ::agv_mon::TaskInfo& Task_Data::_internal_taskinfo(int index) const {
  return taskinfo_.Get(index);
}
inline const ::agv_mon::TaskInfo& Task_Data::taskinfo(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.Task_Data.taskinfo)
  return _internal_taskinfo(index);
}
inline ::agv_mon::TaskInfo* Task_Data::_internal_add_taskinfo() {
  return taskinfo_.Add();
}
inline ::agv_mon::TaskInfo* Task_Data::add_taskinfo() {
  // @@protoc_insertion_point(field_add:agv_mon.Task_Data.taskinfo)
  return _internal_add_taskinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::TaskInfo >&
Task_Data::taskinfo() const {
  // @@protoc_insertion_point(field_list:agv_mon.Task_Data.taskinfo)
  return taskinfo_;
}

// -------------------------------------------------------------------

// TaskInfo

// int32 wms_id = 1;
inline void TaskInfo::clear_wms_id() {
  wms_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::_internal_wms_id() const {
  return wms_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::wms_id() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskInfo.wms_id)
  return _internal_wms_id();
}
inline void TaskInfo::_internal_set_wms_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wms_id_ = value;
}
inline void TaskInfo::set_wms_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wms_id(value);
  // @@protoc_insertion_point(field_set:agv_mon.TaskInfo.wms_id)
}

// int32 mes_id = 2;
inline void TaskInfo::clear_mes_id() {
  mes_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::_internal_mes_id() const {
  return mes_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::mes_id() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskInfo.mes_id)
  return _internal_mes_id();
}
inline void TaskInfo::_internal_set_mes_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mes_id_ = value;
}
inline void TaskInfo::set_mes_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mes_id(value);
  // @@protoc_insertion_point(field_set:agv_mon.TaskInfo.mes_id)
}

// sint32 agv_id = 3;
inline void TaskInfo::clear_agv_id() {
  agv_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::_internal_agv_id() const {
  return agv_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::agv_id() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskInfo.agv_id)
  return _internal_agv_id();
}
inline void TaskInfo::_internal_set_agv_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  agv_id_ = value;
}
inline void TaskInfo::set_agv_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_agv_id(value);
  // @@protoc_insertion_point(field_set:agv_mon.TaskInfo.agv_id)
}

// int32 area = 4;
inline void TaskInfo::clear_area() {
  area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::_internal_area() const {
  return area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::area() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskInfo.area)
  return _internal_area();
}
inline void TaskInfo::_internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  area_ = value;
}
inline void TaskInfo::set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:agv_mon.TaskInfo.area)
}

// int32 status = 5;
inline void TaskInfo::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::status() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskInfo.status)
  return _internal_status();
}
inline void TaskInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void TaskInfo::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:agv_mon.TaskInfo.status)
}

// .agv_mon.TaskLoc start = 6;
inline bool TaskInfo::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool TaskInfo::has_start() const {
  return _internal_has_start();
}
inline void TaskInfo::clear_start() {
  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
inline const ::agv_mon::TaskLoc& TaskInfo::_internal_start() const {
  const ::agv_mon::TaskLoc* p = start_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_mon::TaskLoc&>(
      ::agv_mon::_TaskLoc_default_instance_);
}
inline const ::agv_mon::TaskLoc& TaskInfo::start() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskInfo.start)
  return _internal_start();
}
inline void TaskInfo::unsafe_arena_set_allocated_start(
    ::agv_mon::TaskLoc* start) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_mon.TaskInfo.start)
}
inline ::agv_mon::TaskLoc* TaskInfo::release_start() {
  
  ::agv_mon::TaskLoc* temp = start_;
  start_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agv_mon::TaskLoc* TaskInfo::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:agv_mon.TaskInfo.start)
  
  ::agv_mon::TaskLoc* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::agv_mon::TaskLoc* TaskInfo::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_mon::TaskLoc>(GetArena());
    start_ = p;
  }
  return start_;
}
inline ::agv_mon::TaskLoc* TaskInfo::mutable_start() {
  // @@protoc_insertion_point(field_mutable:agv_mon.TaskInfo.start)
  return _internal_mutable_start();
}
inline void TaskInfo::set_allocated_start(::agv_mon::TaskLoc* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:agv_mon.TaskInfo.start)
}

// .agv_mon.TaskLoc end = 7;
inline bool TaskInfo::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool TaskInfo::has_end() const {
  return _internal_has_end();
}
inline void TaskInfo::clear_end() {
  if (GetArena() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
inline const ::agv_mon::TaskLoc& TaskInfo::_internal_end() const {
  const ::agv_mon::TaskLoc* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const ::agv_mon::TaskLoc&>(
      ::agv_mon::_TaskLoc_default_instance_);
}
inline const ::agv_mon::TaskLoc& TaskInfo::end() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskInfo.end)
  return _internal_end();
}
inline void TaskInfo::unsafe_arena_set_allocated_end(
    ::agv_mon::TaskLoc* end) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agv_mon.TaskInfo.end)
}
inline ::agv_mon::TaskLoc* TaskInfo::release_end() {
  
  ::agv_mon::TaskLoc* temp = end_;
  end_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agv_mon::TaskLoc* TaskInfo::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:agv_mon.TaskInfo.end)
  
  ::agv_mon::TaskLoc* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::agv_mon::TaskLoc* TaskInfo::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::agv_mon::TaskLoc>(GetArena());
    end_ = p;
  }
  return end_;
}
inline ::agv_mon::TaskLoc* TaskInfo::mutable_end() {
  // @@protoc_insertion_point(field_mutable:agv_mon.TaskInfo.end)
  return _internal_mutable_end();
}
inline void TaskInfo::set_allocated_end(::agv_mon::TaskLoc* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete end_;
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(end);
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:agv_mon.TaskInfo.end)
}

// string pallet_no = 8;
inline void TaskInfo::clear_pallet_no() {
  pallet_no_.ClearToEmpty();
}
inline const std::string& TaskInfo::pallet_no() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskInfo.pallet_no)
  return _internal_pallet_no();
}
inline void TaskInfo::set_pallet_no(const std::string& value) {
  _internal_set_pallet_no(value);
  // @@protoc_insertion_point(field_set:agv_mon.TaskInfo.pallet_no)
}
inline std::string* TaskInfo::mutable_pallet_no() {
  // @@protoc_insertion_point(field_mutable:agv_mon.TaskInfo.pallet_no)
  return _internal_mutable_pallet_no();
}
inline const std::string& TaskInfo::_internal_pallet_no() const {
  return pallet_no_.Get();
}
inline void TaskInfo::_internal_set_pallet_no(const std::string& value) {
  
  pallet_no_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskInfo::set_pallet_no(std::string&& value) {
  
  pallet_no_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agv_mon.TaskInfo.pallet_no)
}
inline void TaskInfo::set_pallet_no(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pallet_no_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:agv_mon.TaskInfo.pallet_no)
}
inline void TaskInfo::set_pallet_no(const char* value,
    size_t size) {
  
  pallet_no_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agv_mon.TaskInfo.pallet_no)
}
inline std::string* TaskInfo::_internal_mutable_pallet_no() {
  
  return pallet_no_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskInfo::release_pallet_no() {
  // @@protoc_insertion_point(field_release:agv_mon.TaskInfo.pallet_no)
  return pallet_no_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskInfo::set_allocated_pallet_no(std::string* pallet_no) {
  if (pallet_no != nullptr) {
    
  } else {
    
  }
  pallet_no_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pallet_no,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agv_mon.TaskInfo.pallet_no)
}

// int64 create_time = 9;
inline void TaskInfo::clear_create_time() {
  create_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskInfo::_internal_create_time() const {
  return create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskInfo::create_time() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskInfo.create_time)
  return _internal_create_time();
}
inline void TaskInfo::_internal_set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  create_time_ = value;
}
inline void TaskInfo::set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:agv_mon.TaskInfo.create_time)
}

// int64 excute_time = 10;
inline void TaskInfo::clear_excute_time() {
  excute_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskInfo::_internal_excute_time() const {
  return excute_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskInfo::excute_time() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskInfo.excute_time)
  return _internal_excute_time();
}
inline void TaskInfo::_internal_set_excute_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  excute_time_ = value;
}
inline void TaskInfo::set_excute_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_excute_time(value);
  // @@protoc_insertion_point(field_set:agv_mon.TaskInfo.excute_time)
}

// int64 get_time = 11;
inline void TaskInfo::clear_get_time() {
  get_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskInfo::_internal_get_time() const {
  return get_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskInfo::get_time() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskInfo.get_time)
  return _internal_get_time();
}
inline void TaskInfo::_internal_set_get_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  get_time_ = value;
}
inline void TaskInfo::set_get_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_get_time(value);
  // @@protoc_insertion_point(field_set:agv_mon.TaskInfo.get_time)
}

// int64 finish_time = 12;
inline void TaskInfo::clear_finish_time() {
  finish_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskInfo::_internal_finish_time() const {
  return finish_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskInfo::finish_time() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskInfo.finish_time)
  return _internal_finish_time();
}
inline void TaskInfo::_internal_set_finish_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  finish_time_ = value;
}
inline void TaskInfo::set_finish_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_finish_time(value);
  // @@protoc_insertion_point(field_set:agv_mon.TaskInfo.finish_time)
}

// int32 priority = 13;
inline void TaskInfo::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::priority() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskInfo.priority)
  return _internal_priority();
}
inline void TaskInfo::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void TaskInfo::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:agv_mon.TaskInfo.priority)
}

// sint32 agv_expect = 14;
inline void TaskInfo::clear_agv_expect() {
  agv_expect_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::_internal_agv_expect() const {
  return agv_expect_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::agv_expect() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskInfo.agv_expect)
  return _internal_agv_expect();
}
inline void TaskInfo::_internal_set_agv_expect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  agv_expect_ = value;
}
inline void TaskInfo::set_agv_expect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_agv_expect(value);
  // @@protoc_insertion_point(field_set:agv_mon.TaskInfo.agv_expect)
}

// int32 delay_type = 15;
inline void TaskInfo::clear_delay_type() {
  delay_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::_internal_delay_type() const {
  return delay_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::delay_type() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskInfo.delay_type)
  return _internal_delay_type();
}
inline void TaskInfo::_internal_set_delay_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delay_type_ = value;
}
inline void TaskInfo::set_delay_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delay_type(value);
  // @@protoc_insertion_point(field_set:agv_mon.TaskInfo.delay_type)
}

// -------------------------------------------------------------------

// Dev_Data

// repeated .agv_mon.CxjData cxjdata = 1;
inline int Dev_Data::_internal_cxjdata_size() const {
  return cxjdata_.size();
}
inline int Dev_Data::cxjdata_size() const {
  return _internal_cxjdata_size();
}
inline void Dev_Data::clear_cxjdata() {
  cxjdata_.Clear();
}
inline ::agv_mon::CxjData* Dev_Data::mutable_cxjdata(int index) {
  // @@protoc_insertion_point(field_mutable:agv_mon.Dev_Data.cxjdata)
  return cxjdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::CxjData >*
Dev_Data::mutable_cxjdata() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.Dev_Data.cxjdata)
  return &cxjdata_;
}
inline const ::agv_mon::CxjData& Dev_Data::_internal_cxjdata(int index) const {
  return cxjdata_.Get(index);
}
inline const ::agv_mon::CxjData& Dev_Data::cxjdata(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.Dev_Data.cxjdata)
  return _internal_cxjdata(index);
}
inline ::agv_mon::CxjData* Dev_Data::_internal_add_cxjdata() {
  return cxjdata_.Add();
}
inline ::agv_mon::CxjData* Dev_Data::add_cxjdata() {
  // @@protoc_insertion_point(field_add:agv_mon.Dev_Data.cxjdata)
  return _internal_add_cxjdata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::CxjData >&
Dev_Data::cxjdata() const {
  // @@protoc_insertion_point(field_list:agv_mon.Dev_Data.cxjdata)
  return cxjdata_;
}

// repeated .agv_mon.CxjBack cxjback = 2;
inline int Dev_Data::_internal_cxjback_size() const {
  return cxjback_.size();
}
inline int Dev_Data::cxjback_size() const {
  return _internal_cxjback_size();
}
inline void Dev_Data::clear_cxjback() {
  cxjback_.Clear();
}
inline ::agv_mon::CxjBack* Dev_Data::mutable_cxjback(int index) {
  // @@protoc_insertion_point(field_mutable:agv_mon.Dev_Data.cxjback)
  return cxjback_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::CxjBack >*
Dev_Data::mutable_cxjback() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.Dev_Data.cxjback)
  return &cxjback_;
}
inline const ::agv_mon::CxjBack& Dev_Data::_internal_cxjback(int index) const {
  return cxjback_.Get(index);
}
inline const ::agv_mon::CxjBack& Dev_Data::cxjback(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.Dev_Data.cxjback)
  return _internal_cxjback(index);
}
inline ::agv_mon::CxjBack* Dev_Data::_internal_add_cxjback() {
  return cxjback_.Add();
}
inline ::agv_mon::CxjBack* Dev_Data::add_cxjback() {
  // @@protoc_insertion_point(field_add:agv_mon.Dev_Data.cxjback)
  return _internal_add_cxjback();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::CxjBack >&
Dev_Data::cxjback() const {
  // @@protoc_insertion_point(field_list:agv_mon.Dev_Data.cxjback)
  return cxjback_;
}

// repeated .agv_mon.WmsData wmsdata = 3;
inline int Dev_Data::_internal_wmsdata_size() const {
  return wmsdata_.size();
}
inline int Dev_Data::wmsdata_size() const {
  return _internal_wmsdata_size();
}
inline void Dev_Data::clear_wmsdata() {
  wmsdata_.Clear();
}
inline ::agv_mon::WmsData* Dev_Data::mutable_wmsdata(int index) {
  // @@protoc_insertion_point(field_mutable:agv_mon.Dev_Data.wmsdata)
  return wmsdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::WmsData >*
Dev_Data::mutable_wmsdata() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.Dev_Data.wmsdata)
  return &wmsdata_;
}
inline const ::agv_mon::WmsData& Dev_Data::_internal_wmsdata(int index) const {
  return wmsdata_.Get(index);
}
inline const ::agv_mon::WmsData& Dev_Data::wmsdata(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.Dev_Data.wmsdata)
  return _internal_wmsdata(index);
}
inline ::agv_mon::WmsData* Dev_Data::_internal_add_wmsdata() {
  return wmsdata_.Add();
}
inline ::agv_mon::WmsData* Dev_Data::add_wmsdata() {
  // @@protoc_insertion_point(field_add:agv_mon.Dev_Data.wmsdata)
  return _internal_add_wmsdata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::WmsData >&
Dev_Data::wmsdata() const {
  // @@protoc_insertion_point(field_list:agv_mon.Dev_Data.wmsdata)
  return wmsdata_;
}

// -------------------------------------------------------------------

// CxjData

// int32 cxjid = 1;
inline void CxjData::clear_cxjid() {
  cxjid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::_internal_cxjid() const {
  return cxjid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::cxjid() const {
  // @@protoc_insertion_point(field_get:agv_mon.CxjData.cxjid)
  return _internal_cxjid();
}
inline void CxjData::_internal_set_cxjid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cxjid_ = value;
}
inline void CxjData::set_cxjid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cxjid(value);
  // @@protoc_insertion_point(field_set:agv_mon.CxjData.cxjid)
}

// int32 cxjtype = 2;
inline void CxjData::clear_cxjtype() {
  cxjtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::_internal_cxjtype() const {
  return cxjtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::cxjtype() const {
  // @@protoc_insertion_point(field_get:agv_mon.CxjData.cxjtype)
  return _internal_cxjtype();
}
inline void CxjData::_internal_set_cxjtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cxjtype_ = value;
}
inline void CxjData::set_cxjtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cxjtype(value);
  // @@protoc_insertion_point(field_set:agv_mon.CxjData.cxjtype)
}

// int32 storeid = 3;
inline void CxjData::clear_storeid() {
  storeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::_internal_storeid() const {
  return storeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::storeid() const {
  // @@protoc_insertion_point(field_get:agv_mon.CxjData.storeid)
  return _internal_storeid();
}
inline void CxjData::_internal_set_storeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  storeid_ = value;
}
inline void CxjData::set_storeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_storeid(value);
  // @@protoc_insertion_point(field_set:agv_mon.CxjData.storeid)
}

// int32 goods_sig = 4;
inline void CxjData::clear_goods_sig() {
  goods_sig_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::_internal_goods_sig() const {
  return goods_sig_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::goods_sig() const {
  // @@protoc_insertion_point(field_get:agv_mon.CxjData.goods_sig)
  return _internal_goods_sig();
}
inline void CxjData::_internal_set_goods_sig(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goods_sig_ = value;
}
inline void CxjData::set_goods_sig(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goods_sig(value);
  // @@protoc_insertion_point(field_set:agv_mon.CxjData.goods_sig)
}

// int32 inright_sig = 5;
inline void CxjData::clear_inright_sig() {
  inright_sig_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::_internal_inright_sig() const {
  return inright_sig_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::inright_sig() const {
  // @@protoc_insertion_point(field_get:agv_mon.CxjData.inright_sig)
  return _internal_inright_sig();
}
inline void CxjData::_internal_set_inright_sig(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inright_sig_ = value;
}
inline void CxjData::set_inright_sig(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inright_sig(value);
  // @@protoc_insertion_point(field_set:agv_mon.CxjData.inright_sig)
}

// int32 all_sig = 6;
inline void CxjData::clear_all_sig() {
  all_sig_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::_internal_all_sig() const {
  return all_sig_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::all_sig() const {
  // @@protoc_insertion_point(field_get:agv_mon.CxjData.all_sig)
  return _internal_all_sig();
}
inline void CxjData::_internal_set_all_sig(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  all_sig_ = value;
}
inline void CxjData::set_all_sig(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_all_sig(value);
  // @@protoc_insertion_point(field_set:agv_mon.CxjData.all_sig)
}

// int32 agv_in_flag = 7;
inline void CxjData::clear_agv_in_flag() {
  agv_in_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::_internal_agv_in_flag() const {
  return agv_in_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::agv_in_flag() const {
  // @@protoc_insertion_point(field_get:agv_mon.CxjData.agv_in_flag)
  return _internal_agv_in_flag();
}
inline void CxjData::_internal_set_agv_in_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  agv_in_flag_ = value;
}
inline void CxjData::set_agv_in_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_agv_in_flag(value);
  // @@protoc_insertion_point(field_set:agv_mon.CxjData.agv_in_flag)
}

// int32 cxj_heart = 8;
inline void CxjData::clear_cxj_heart() {
  cxj_heart_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::_internal_cxj_heart() const {
  return cxj_heart_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::cxj_heart() const {
  // @@protoc_insertion_point(field_get:agv_mon.CxjData.cxj_heart)
  return _internal_cxj_heart();
}
inline void CxjData::_internal_set_cxj_heart(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cxj_heart_ = value;
}
inline void CxjData::set_cxj_heart(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cxj_heart(value);
  // @@protoc_insertion_point(field_set:agv_mon.CxjData.cxj_heart)
}

// sint32 agv_id = 9;
inline void CxjData::clear_agv_id() {
  agv_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::_internal_agv_id() const {
  return agv_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::agv_id() const {
  // @@protoc_insertion_point(field_get:agv_mon.CxjData.agv_id)
  return _internal_agv_id();
}
inline void CxjData::_internal_set_agv_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  agv_id_ = value;
}
inline void CxjData::set_agv_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_agv_id(value);
  // @@protoc_insertion_point(field_set:agv_mon.CxjData.agv_id)
}

// int32 wms_task = 10;
inline void CxjData::clear_wms_task() {
  wms_task_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::_internal_wms_task() const {
  return wms_task_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjData::wms_task() const {
  // @@protoc_insertion_point(field_get:agv_mon.CxjData.wms_task)
  return _internal_wms_task();
}
inline void CxjData::_internal_set_wms_task(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wms_task_ = value;
}
inline void CxjData::set_wms_task(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wms_task(value);
  // @@protoc_insertion_point(field_set:agv_mon.CxjData.wms_task)
}

// -------------------------------------------------------------------

// CxjBack

// int32 storeid = 1;
inline void CxjBack::clear_storeid() {
  storeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjBack::_internal_storeid() const {
  return storeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjBack::storeid() const {
  // @@protoc_insertion_point(field_get:agv_mon.CxjBack.storeid)
  return _internal_storeid();
}
inline void CxjBack::_internal_set_storeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  storeid_ = value;
}
inline void CxjBack::set_storeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_storeid(value);
  // @@protoc_insertion_point(field_set:agv_mon.CxjBack.storeid)
}

// sint32 area = 2;
inline void CxjBack::clear_area() {
  area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjBack::_internal_area() const {
  return area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjBack::area() const {
  // @@protoc_insertion_point(field_get:agv_mon.CxjBack.area)
  return _internal_area();
}
inline void CxjBack::_internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  area_ = value;
}
inline void CxjBack::set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:agv_mon.CxjBack.area)
}

// int32 type = 3;
inline void CxjBack::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjBack::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjBack::type() const {
  // @@protoc_insertion_point(field_get:agv_mon.CxjBack.type)
  return _internal_type();
}
inline void CxjBack::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CxjBack::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:agv_mon.CxjBack.type)
}

// int32 task_no = 4;
inline void CxjBack::clear_task_no() {
  task_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjBack::_internal_task_no() const {
  return task_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CxjBack::task_no() const {
  // @@protoc_insertion_point(field_get:agv_mon.CxjBack.task_no)
  return _internal_task_no();
}
inline void CxjBack::_internal_set_task_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  task_no_ = value;
}
inline void CxjBack::set_task_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_task_no(value);
  // @@protoc_insertion_point(field_set:agv_mon.CxjBack.task_no)
}

// string rfid = 5;
inline void CxjBack::clear_rfid() {
  rfid_.ClearToEmpty();
}
inline const std::string& CxjBack::rfid() const {
  // @@protoc_insertion_point(field_get:agv_mon.CxjBack.rfid)
  return _internal_rfid();
}
inline void CxjBack::set_rfid(const std::string& value) {
  _internal_set_rfid(value);
  // @@protoc_insertion_point(field_set:agv_mon.CxjBack.rfid)
}
inline std::string* CxjBack::mutable_rfid() {
  // @@protoc_insertion_point(field_mutable:agv_mon.CxjBack.rfid)
  return _internal_mutable_rfid();
}
inline const std::string& CxjBack::_internal_rfid() const {
  return rfid_.Get();
}
inline void CxjBack::_internal_set_rfid(const std::string& value) {
  
  rfid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CxjBack::set_rfid(std::string&& value) {
  
  rfid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agv_mon.CxjBack.rfid)
}
inline void CxjBack::set_rfid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rfid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:agv_mon.CxjBack.rfid)
}
inline void CxjBack::set_rfid(const char* value,
    size_t size) {
  
  rfid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agv_mon.CxjBack.rfid)
}
inline std::string* CxjBack::_internal_mutable_rfid() {
  
  return rfid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CxjBack::release_rfid() {
  // @@protoc_insertion_point(field_release:agv_mon.CxjBack.rfid)
  return rfid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CxjBack::set_allocated_rfid(std::string* rfid) {
  if (rfid != nullptr) {
    
  } else {
    
  }
  rfid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rfid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agv_mon.CxjBack.rfid)
}

// uint32 plcip = 6;
inline void CxjBack::clear_plcip() {
  plcip_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CxjBack::_internal_plcip() const {
  return plcip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CxjBack::plcip() const {
  // @@protoc_insertion_point(field_get:agv_mon.CxjBack.plcip)
  return _internal_plcip();
}
inline void CxjBack::_internal_set_plcip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  plcip_ = value;
}
inline void CxjBack::set_plcip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_plcip(value);
  // @@protoc_insertion_point(field_set:agv_mon.CxjBack.plcip)
}

// int64 ts = 7;
inline void CxjBack::clear_ts() {
  ts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CxjBack::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CxjBack::ts() const {
  // @@protoc_insertion_point(field_get:agv_mon.CxjBack.ts)
  return _internal_ts();
}
inline void CxjBack::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ts_ = value;
}
inline void CxjBack::set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:agv_mon.CxjBack.ts)
}

// -------------------------------------------------------------------

// WmsData

// int32 storeid_pick = 1;
inline void WmsData::clear_storeid_pick() {
  storeid_pick_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WmsData::_internal_storeid_pick() const {
  return storeid_pick_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WmsData::storeid_pick() const {
  // @@protoc_insertion_point(field_get:agv_mon.WmsData.storeid_pick)
  return _internal_storeid_pick();
}
inline void WmsData::_internal_set_storeid_pick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  storeid_pick_ = value;
}
inline void WmsData::set_storeid_pick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_storeid_pick(value);
  // @@protoc_insertion_point(field_set:agv_mon.WmsData.storeid_pick)
}

// int32 storeid_put = 2;
inline void WmsData::clear_storeid_put() {
  storeid_put_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WmsData::_internal_storeid_put() const {
  return storeid_put_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WmsData::storeid_put() const {
  // @@protoc_insertion_point(field_get:agv_mon.WmsData.storeid_put)
  return _internal_storeid_put();
}
inline void WmsData::_internal_set_storeid_put(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  storeid_put_ = value;
}
inline void WmsData::set_storeid_put(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_storeid_put(value);
  // @@protoc_insertion_point(field_set:agv_mon.WmsData.storeid_put)
}

// sint32 area = 3;
inline void WmsData::clear_area() {
  area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WmsData::_internal_area() const {
  return area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WmsData::area() const {
  // @@protoc_insertion_point(field_get:agv_mon.WmsData.area)
  return _internal_area();
}
inline void WmsData::_internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  area_ = value;
}
inline void WmsData::set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:agv_mon.WmsData.area)
}

// int32 type = 4;
inline void WmsData::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WmsData::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WmsData::type() const {
  // @@protoc_insertion_point(field_get:agv_mon.WmsData.type)
  return _internal_type();
}
inline void WmsData::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void WmsData::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:agv_mon.WmsData.type)
}

// sint32 pick_enable = 5;
inline void WmsData::clear_pick_enable() {
  pick_enable_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WmsData::_internal_pick_enable() const {
  return pick_enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WmsData::pick_enable() const {
  // @@protoc_insertion_point(field_get:agv_mon.WmsData.pick_enable)
  return _internal_pick_enable();
}
inline void WmsData::_internal_set_pick_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pick_enable_ = value;
}
inline void WmsData::set_pick_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pick_enable(value);
  // @@protoc_insertion_point(field_set:agv_mon.WmsData.pick_enable)
}

// sint32 put_enable = 6;
inline void WmsData::clear_put_enable() {
  put_enable_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WmsData::_internal_put_enable() const {
  return put_enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WmsData::put_enable() const {
  // @@protoc_insertion_point(field_get:agv_mon.WmsData.put_enable)
  return _internal_put_enable();
}
inline void WmsData::_internal_set_put_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  put_enable_ = value;
}
inline void WmsData::set_put_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_put_enable(value);
  // @@protoc_insertion_point(field_set:agv_mon.WmsData.put_enable)
}

// sint32 pick_task_no = 7;
inline void WmsData::clear_pick_task_no() {
  pick_task_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WmsData::_internal_pick_task_no() const {
  return pick_task_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WmsData::pick_task_no() const {
  // @@protoc_insertion_point(field_get:agv_mon.WmsData.pick_task_no)
  return _internal_pick_task_no();
}
inline void WmsData::_internal_set_pick_task_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pick_task_no_ = value;
}
inline void WmsData::set_pick_task_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pick_task_no(value);
  // @@protoc_insertion_point(field_set:agv_mon.WmsData.pick_task_no)
}

// sint32 put_task_no = 8;
inline void WmsData::clear_put_task_no() {
  put_task_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WmsData::_internal_put_task_no() const {
  return put_task_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WmsData::put_task_no() const {
  // @@protoc_insertion_point(field_get:agv_mon.WmsData.put_task_no)
  return _internal_put_task_no();
}
inline void WmsData::_internal_set_put_task_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  put_task_no_ = value;
}
inline void WmsData::set_put_task_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_put_task_no(value);
  // @@protoc_insertion_point(field_set:agv_mon.WmsData.put_task_no)
}

// repeated .agv_mon.Param infr = 9;
inline int WmsData::_internal_infr_size() const {
  return infr_.size();
}
inline int WmsData::infr_size() const {
  return _internal_infr_size();
}
inline void WmsData::clear_infr() {
  infr_.Clear();
}
inline ::agv_mon::Param* WmsData::mutable_infr(int index) {
  // @@protoc_insertion_point(field_mutable:agv_mon.WmsData.infr)
  return infr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Param >*
WmsData::mutable_infr() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.WmsData.infr)
  return &infr_;
}
inline const ::agv_mon::Param& WmsData::_internal_infr(int index) const {
  return infr_.Get(index);
}
inline const ::agv_mon::Param& WmsData::infr(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.WmsData.infr)
  return _internal_infr(index);
}
inline ::agv_mon::Param* WmsData::_internal_add_infr() {
  return infr_.Add();
}
inline ::agv_mon::Param* WmsData::add_infr() {
  // @@protoc_insertion_point(field_add:agv_mon.WmsData.infr)
  return _internal_add_infr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agv_mon::Param >&
WmsData::infr() const {
  // @@protoc_insertion_point(field_list:agv_mon.WmsData.infr)
  return infr_;
}

// int64 ts = 10;
inline void WmsData::clear_ts() {
  ts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WmsData::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WmsData::ts() const {
  // @@protoc_insertion_point(field_get:agv_mon.WmsData.ts)
  return _internal_ts();
}
inline void WmsData::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ts_ = value;
}
inline void WmsData::set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:agv_mon.WmsData.ts)
}

// -------------------------------------------------------------------

// Param

// int32 key = 1;
inline void Param::clear_key() {
  key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Param::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Param::key() const {
  // @@protoc_insertion_point(field_get:agv_mon.Param.key)
  return _internal_key();
}
inline void Param::_internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  key_ = value;
}
inline void Param::set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:agv_mon.Param.key)
}

// sint32 value = 2;
inline void Param::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Param::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Param::value() const {
  // @@protoc_insertion_point(field_get:agv_mon.Param.value)
  return _internal_value();
}
inline void Param::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void Param::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:agv_mon.Param.value)
}

// -------------------------------------------------------------------

// TaskLoc

// string name = 1;
inline void TaskLoc::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TaskLoc::name() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskLoc.name)
  return _internal_name();
}
inline void TaskLoc::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:agv_mon.TaskLoc.name)
}
inline std::string* TaskLoc::mutable_name() {
  // @@protoc_insertion_point(field_mutable:agv_mon.TaskLoc.name)
  return _internal_mutable_name();
}
inline const std::string& TaskLoc::_internal_name() const {
  return name_.Get();
}
inline void TaskLoc::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskLoc::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agv_mon.TaskLoc.name)
}
inline void TaskLoc::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:agv_mon.TaskLoc.name)
}
inline void TaskLoc::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agv_mon.TaskLoc.name)
}
inline std::string* TaskLoc::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskLoc::release_name() {
  // @@protoc_insertion_point(field_release:agv_mon.TaskLoc.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskLoc::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agv_mon.TaskLoc.name)
}

// int32 layers = 2;
inline void TaskLoc::clear_layers() {
  layers_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskLoc::_internal_layers() const {
  return layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskLoc::layers() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskLoc.layers)
  return _internal_layers();
}
inline void TaskLoc::_internal_set_layers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  layers_ = value;
}
inline void TaskLoc::set_layers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layers(value);
  // @@protoc_insertion_point(field_set:agv_mon.TaskLoc.layers)
}

// int32 id = 3;
inline void TaskLoc::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskLoc::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskLoc::id() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskLoc.id)
  return _internal_id();
}
inline void TaskLoc::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void TaskLoc::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:agv_mon.TaskLoc.id)
}

// sint32 area = 4;
inline void TaskLoc::clear_area() {
  area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskLoc::_internal_area() const {
  return area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskLoc::area() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskLoc.area)
  return _internal_area();
}
inline void TaskLoc::_internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  area_ = value;
}
inline void TaskLoc::set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:agv_mon.TaskLoc.area)
}

// string area_name = 5;
inline void TaskLoc::clear_area_name() {
  area_name_.ClearToEmpty();
}
inline const std::string& TaskLoc::area_name() const {
  // @@protoc_insertion_point(field_get:agv_mon.TaskLoc.area_name)
  return _internal_area_name();
}
inline void TaskLoc::set_area_name(const std::string& value) {
  _internal_set_area_name(value);
  // @@protoc_insertion_point(field_set:agv_mon.TaskLoc.area_name)
}
inline std::string* TaskLoc::mutable_area_name() {
  // @@protoc_insertion_point(field_mutable:agv_mon.TaskLoc.area_name)
  return _internal_mutable_area_name();
}
inline const std::string& TaskLoc::_internal_area_name() const {
  return area_name_.Get();
}
inline void TaskLoc::_internal_set_area_name(const std::string& value) {
  
  area_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskLoc::set_area_name(std::string&& value) {
  
  area_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agv_mon.TaskLoc.area_name)
}
inline void TaskLoc::set_area_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  area_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:agv_mon.TaskLoc.area_name)
}
inline void TaskLoc::set_area_name(const char* value,
    size_t size) {
  
  area_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agv_mon.TaskLoc.area_name)
}
inline std::string* TaskLoc::_internal_mutable_area_name() {
  
  return area_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskLoc::release_area_name() {
  // @@protoc_insertion_point(field_release:agv_mon.TaskLoc.area_name)
  return area_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskLoc::set_allocated_area_name(std::string* area_name) {
  if (area_name != nullptr) {
    
  } else {
    
  }
  area_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), area_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agv_mon.TaskLoc.area_name)
}

// -------------------------------------------------------------------

// COMD

// int32 flag = 1;
inline void COMD::clear_flag() {
  flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 COMD::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 COMD::flag() const {
  // @@protoc_insertion_point(field_get:agv_mon.COMD.flag)
  return _internal_flag();
}
inline void COMD::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flag_ = value;
}
inline void COMD::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:agv_mon.COMD.flag)
}

// repeated int32 value = 2;
inline int COMD::_internal_value_size() const {
  return value_.size();
}
inline int COMD::value_size() const {
  return _internal_value_size();
}
inline void COMD::clear_value() {
  value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 COMD::_internal_value(int index) const {
  return value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 COMD::value(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.COMD.value)
  return _internal_value(index);
}
inline void COMD::set_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:agv_mon.COMD.value)
}
inline void COMD::_internal_add_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_.Add(value);
}
inline void COMD::add_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:agv_mon.COMD.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
COMD::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
COMD::value() const {
  // @@protoc_insertion_point(field_list:agv_mon.COMD.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
COMD::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
COMD::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.COMD.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// COMDRET

// repeated string comdret = 1;
inline int COMDRET::_internal_comdret_size() const {
  return comdret_.size();
}
inline int COMDRET::comdret_size() const {
  return _internal_comdret_size();
}
inline void COMDRET::clear_comdret() {
  comdret_.Clear();
}
inline std::string* COMDRET::add_comdret() {
  // @@protoc_insertion_point(field_add_mutable:agv_mon.COMDRET.comdret)
  return _internal_add_comdret();
}
inline const std::string& COMDRET::_internal_comdret(int index) const {
  return comdret_.Get(index);
}
inline const std::string& COMDRET::comdret(int index) const {
  // @@protoc_insertion_point(field_get:agv_mon.COMDRET.comdret)
  return _internal_comdret(index);
}
inline std::string* COMDRET::mutable_comdret(int index) {
  // @@protoc_insertion_point(field_mutable:agv_mon.COMDRET.comdret)
  return comdret_.Mutable(index);
}
inline void COMDRET::set_comdret(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:agv_mon.COMDRET.comdret)
  comdret_.Mutable(index)->assign(value);
}
inline void COMDRET::set_comdret(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:agv_mon.COMDRET.comdret)
  comdret_.Mutable(index)->assign(std::move(value));
}
inline void COMDRET::set_comdret(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  comdret_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:agv_mon.COMDRET.comdret)
}
inline void COMDRET::set_comdret(int index, const char* value, size_t size) {
  comdret_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agv_mon.COMDRET.comdret)
}
inline std::string* COMDRET::_internal_add_comdret() {
  return comdret_.Add();
}
inline void COMDRET::add_comdret(const std::string& value) {
  comdret_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:agv_mon.COMDRET.comdret)
}
inline void COMDRET::add_comdret(std::string&& value) {
  comdret_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:agv_mon.COMDRET.comdret)
}
inline void COMDRET::add_comdret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  comdret_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:agv_mon.COMDRET.comdret)
}
inline void COMDRET::add_comdret(const char* value, size_t size) {
  comdret_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:agv_mon.COMDRET.comdret)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
COMDRET::comdret() const {
  // @@protoc_insertion_point(field_list:agv_mon.COMDRET.comdret)
  return comdret_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
COMDRET::mutable_comdret() {
  // @@protoc_insertion_point(field_mutable_list:agv_mon.COMDRET.comdret)
  return &comdret_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace agv_mon

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::agv_mon::AgvInfor_AgvReport_ProtectionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agv_mon::AgvInfor_AgvReport_ProtectionType>() {
  return ::agv_mon::AgvInfor_AgvReport_ProtectionType_descriptor();
}
template <> struct is_proto_enum< ::agv_mon::AgvInfor_AgvReport_DeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agv_mon::AgvInfor_AgvReport_DeviceType>() {
  return ::agv_mon::AgvInfor_AgvReport_DeviceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_agv_5fmon_2eproto
