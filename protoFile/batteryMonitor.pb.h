// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: batteryMonitor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_batteryMonitor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_batteryMonitor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_batteryMonitor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_batteryMonitor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_batteryMonitor_2eproto;
namespace batteryMonitor {
class BatteryData;
class BatteryDataDefaultTypeInternal;
extern BatteryDataDefaultTypeInternal _BatteryData_default_instance_;
class DetailBtyData;
class DetailBtyDataDefaultTypeInternal;
extern DetailBtyDataDefaultTypeInternal _DetailBtyData_default_instance_;
class DetailBtyData_EvtItem;
class DetailBtyData_EvtItemDefaultTypeInternal;
extern DetailBtyData_EvtItemDefaultTypeInternal _DetailBtyData_EvtItem_default_instance_;
class ProfileBtyData;
class ProfileBtyDataDefaultTypeInternal;
extern ProfileBtyDataDefaultTypeInternal _ProfileBtyData_default_instance_;
class ProfileBtyData_BatData;
class ProfileBtyData_BatDataDefaultTypeInternal;
extern ProfileBtyData_BatDataDefaultTypeInternal _ProfileBtyData_BatData_default_instance_;
}  // namespace batteryMonitor
PROTOBUF_NAMESPACE_OPEN
template<> ::batteryMonitor::BatteryData* Arena::CreateMaybeMessage<::batteryMonitor::BatteryData>(Arena*);
template<> ::batteryMonitor::DetailBtyData* Arena::CreateMaybeMessage<::batteryMonitor::DetailBtyData>(Arena*);
template<> ::batteryMonitor::DetailBtyData_EvtItem* Arena::CreateMaybeMessage<::batteryMonitor::DetailBtyData_EvtItem>(Arena*);
template<> ::batteryMonitor::ProfileBtyData* Arena::CreateMaybeMessage<::batteryMonitor::ProfileBtyData>(Arena*);
template<> ::batteryMonitor::ProfileBtyData_BatData* Arena::CreateMaybeMessage<::batteryMonitor::ProfileBtyData_BatData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace batteryMonitor {

enum BatteryData_InfoType : int {
  BatteryData_InfoType_PROFILE = 0,
  BatteryData_InfoType_DETAIL = 1,
  BatteryData_InfoType_REMIND = 2,
  BatteryData_InfoType_BatteryData_InfoType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BatteryData_InfoType_BatteryData_InfoType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BatteryData_InfoType_IsValid(int value);
constexpr BatteryData_InfoType BatteryData_InfoType_InfoType_MIN = BatteryData_InfoType_PROFILE;
constexpr BatteryData_InfoType BatteryData_InfoType_InfoType_MAX = BatteryData_InfoType_REMIND;
constexpr int BatteryData_InfoType_InfoType_ARRAYSIZE = BatteryData_InfoType_InfoType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatteryData_InfoType_descriptor();
template<typename T>
inline const std::string& BatteryData_InfoType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BatteryData_InfoType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BatteryData_InfoType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BatteryData_InfoType_descriptor(), enum_t_value);
}
inline bool BatteryData_InfoType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BatteryData_InfoType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BatteryData_InfoType>(
    BatteryData_InfoType_descriptor(), name, value);
}
// ===================================================================

class BatteryData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:batteryMonitor.BatteryData) */ {
 public:
  inline BatteryData() : BatteryData(nullptr) {}
  virtual ~BatteryData();

  BatteryData(const BatteryData& from);
  BatteryData(BatteryData&& from) noexcept
    : BatteryData() {
    *this = ::std::move(from);
  }

  inline BatteryData& operator=(const BatteryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatteryData& operator=(BatteryData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatteryData& default_instance();

  static inline const BatteryData* internal_default_instance() {
    return reinterpret_cast<const BatteryData*>(
               &_BatteryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BatteryData& a, BatteryData& b) {
    a.Swap(&b);
  }
  inline void Swap(BatteryData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatteryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatteryData* New() const final {
    return CreateMaybeMessage<BatteryData>(nullptr);
  }

  BatteryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatteryData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatteryData& from);
  void MergeFrom(const BatteryData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatteryData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "batteryMonitor.BatteryData";
  }
  protected:
  explicit BatteryData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_batteryMonitor_2eproto);
    return ::descriptor_table_batteryMonitor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BatteryData_InfoType InfoType;
  static constexpr InfoType PROFILE =
    BatteryData_InfoType_PROFILE;
  static constexpr InfoType DETAIL =
    BatteryData_InfoType_DETAIL;
  static constexpr InfoType REMIND =
    BatteryData_InfoType_REMIND;
  static inline bool InfoType_IsValid(int value) {
    return BatteryData_InfoType_IsValid(value);
  }
  static constexpr InfoType InfoType_MIN =
    BatteryData_InfoType_InfoType_MIN;
  static constexpr InfoType InfoType_MAX =
    BatteryData_InfoType_InfoType_MAX;
  static constexpr int InfoType_ARRAYSIZE =
    BatteryData_InfoType_InfoType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InfoType_descriptor() {
    return BatteryData_InfoType_descriptor();
  }
  template<typename T>
  static inline const std::string& InfoType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InfoType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InfoType_Name.");
    return BatteryData_InfoType_Name(enum_t_value);
  }
  static inline bool InfoType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      InfoType* value) {
    return BatteryData_InfoType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kStationIDFieldNumber = 2,
    kBtyTagFieldNumber = 3,
    kAgvIDFieldNumber = 4,
  };
  // .batteryMonitor.BatteryData.InfoType info = 1;
  void clear_info();
  ::batteryMonitor::BatteryData_InfoType info() const;
  void set_info(::batteryMonitor::BatteryData_InfoType value);
  private:
  ::batteryMonitor::BatteryData_InfoType _internal_info() const;
  void _internal_set_info(::batteryMonitor::BatteryData_InfoType value);
  public:

  // int32 stationID = 2;
  void clear_stationid();
  ::PROTOBUF_NAMESPACE_ID::int32 stationid() const;
  void set_stationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stationid() const;
  void _internal_set_stationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 btyTag = 3;
  void clear_btytag();
  ::PROTOBUF_NAMESPACE_ID::int32 btytag() const;
  void set_btytag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_btytag() const;
  void _internal_set_btytag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 agvID = 4;
  void clear_agvid();
  ::PROTOBUF_NAMESPACE_ID::int32 agvid() const;
  void set_agvid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_agvid() const;
  void _internal_set_agvid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:batteryMonitor.BatteryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int info_;
  ::PROTOBUF_NAMESPACE_ID::int32 stationid_;
  ::PROTOBUF_NAMESPACE_ID::int32 btytag_;
  ::PROTOBUF_NAMESPACE_ID::int32 agvid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_batteryMonitor_2eproto;
};
// -------------------------------------------------------------------

class ProfileBtyData_BatData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:batteryMonitor.ProfileBtyData.BatData) */ {
 public:
  inline ProfileBtyData_BatData() : ProfileBtyData_BatData(nullptr) {}
  virtual ~ProfileBtyData_BatData();

  ProfileBtyData_BatData(const ProfileBtyData_BatData& from);
  ProfileBtyData_BatData(ProfileBtyData_BatData&& from) noexcept
    : ProfileBtyData_BatData() {
    *this = ::std::move(from);
  }

  inline ProfileBtyData_BatData& operator=(const ProfileBtyData_BatData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileBtyData_BatData& operator=(ProfileBtyData_BatData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileBtyData_BatData& default_instance();

  static inline const ProfileBtyData_BatData* internal_default_instance() {
    return reinterpret_cast<const ProfileBtyData_BatData*>(
               &_ProfileBtyData_BatData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProfileBtyData_BatData& a, ProfileBtyData_BatData& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileBtyData_BatData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileBtyData_BatData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileBtyData_BatData* New() const final {
    return CreateMaybeMessage<ProfileBtyData_BatData>(nullptr);
  }

  ProfileBtyData_BatData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileBtyData_BatData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileBtyData_BatData& from);
  void MergeFrom(const ProfileBtyData_BatData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileBtyData_BatData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "batteryMonitor.ProfileBtyData.BatData";
  }
  protected:
  explicit ProfileBtyData_BatData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_batteryMonitor_2eproto);
    return ::descriptor_table_batteryMonitor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBtyRfidFieldNumber = 2,
    kAddWaterTimeFieldNumber = 11,
    kStartUseTimeFieldNumber = 12,
    kBtyTagFieldNumber = 1,
    kInAGVFieldNumber = 3,
    kInStationFieldNumber = 4,
    kStationSpaceFieldNumber = 5,
    kPowerFieldNumber = 6,
    kUseAvgTimeFieldNumber = 7,
    kChargeAvgTimeFieldNumber = 8,
    kIdleAvgTimeFieldNumber = 9,
    kAddWaterInterFieldNumber = 10,
  };
  // string bty_Rfid = 2;
  void clear_bty_rfid();
  const std::string& bty_rfid() const;
  void set_bty_rfid(const std::string& value);
  void set_bty_rfid(std::string&& value);
  void set_bty_rfid(const char* value);
  void set_bty_rfid(const char* value, size_t size);
  std::string* mutable_bty_rfid();
  std::string* release_bty_rfid();
  void set_allocated_bty_rfid(std::string* bty_rfid);
  private:
  const std::string& _internal_bty_rfid() const;
  void _internal_set_bty_rfid(const std::string& value);
  std::string* _internal_mutable_bty_rfid();
  public:

  // string addWaterTime = 11;
  void clear_addwatertime();
  const std::string& addwatertime() const;
  void set_addwatertime(const std::string& value);
  void set_addwatertime(std::string&& value);
  void set_addwatertime(const char* value);
  void set_addwatertime(const char* value, size_t size);
  std::string* mutable_addwatertime();
  std::string* release_addwatertime();
  void set_allocated_addwatertime(std::string* addwatertime);
  private:
  const std::string& _internal_addwatertime() const;
  void _internal_set_addwatertime(const std::string& value);
  std::string* _internal_mutable_addwatertime();
  public:

  // string startUseTime = 12;
  void clear_startusetime();
  const std::string& startusetime() const;
  void set_startusetime(const std::string& value);
  void set_startusetime(std::string&& value);
  void set_startusetime(const char* value);
  void set_startusetime(const char* value, size_t size);
  std::string* mutable_startusetime();
  std::string* release_startusetime();
  void set_allocated_startusetime(std::string* startusetime);
  private:
  const std::string& _internal_startusetime() const;
  void _internal_set_startusetime(const std::string& value);
  std::string* _internal_mutable_startusetime();
  public:

  // int32 bty_Tag = 1;
  void clear_bty_tag();
  ::PROTOBUF_NAMESPACE_ID::int32 bty_tag() const;
  void set_bty_tag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bty_tag() const;
  void _internal_set_bty_tag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 inAGV = 3;
  void clear_inagv();
  ::PROTOBUF_NAMESPACE_ID::int32 inagv() const;
  void set_inagv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inagv() const;
  void _internal_set_inagv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 inStation = 4;
  void clear_instation();
  ::PROTOBUF_NAMESPACE_ID::int32 instation() const;
  void set_instation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_instation() const;
  void _internal_set_instation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stationSpace = 5;
  void clear_stationspace();
  ::PROTOBUF_NAMESPACE_ID::int32 stationspace() const;
  void set_stationspace(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stationspace() const;
  void _internal_set_stationspace(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 power = 6;
  void clear_power();
  ::PROTOBUF_NAMESPACE_ID::int32 power() const;
  void set_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_power() const;
  void _internal_set_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 useAvgTime = 7;
  void clear_useavgtime();
  ::PROTOBUF_NAMESPACE_ID::int32 useavgtime() const;
  void set_useavgtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_useavgtime() const;
  void _internal_set_useavgtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 chargeAvgTime = 8;
  void clear_chargeavgtime();
  ::PROTOBUF_NAMESPACE_ID::int32 chargeavgtime() const;
  void set_chargeavgtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chargeavgtime() const;
  void _internal_set_chargeavgtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 idleAvgTime = 9;
  void clear_idleavgtime();
  ::PROTOBUF_NAMESPACE_ID::int32 idleavgtime() const;
  void set_idleavgtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idleavgtime() const;
  void _internal_set_idleavgtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 addWaterInter = 10;
  void clear_addwaterinter();
  ::PROTOBUF_NAMESPACE_ID::int32 addwaterinter() const;
  void set_addwaterinter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_addwaterinter() const;
  void _internal_set_addwaterinter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:batteryMonitor.ProfileBtyData.BatData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bty_rfid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addwatertime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr startusetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 bty_tag_;
  ::PROTOBUF_NAMESPACE_ID::int32 inagv_;
  ::PROTOBUF_NAMESPACE_ID::int32 instation_;
  ::PROTOBUF_NAMESPACE_ID::int32 stationspace_;
  ::PROTOBUF_NAMESPACE_ID::int32 power_;
  ::PROTOBUF_NAMESPACE_ID::int32 useavgtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 chargeavgtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 idleavgtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 addwaterinter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_batteryMonitor_2eproto;
};
// -------------------------------------------------------------------

class ProfileBtyData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:batteryMonitor.ProfileBtyData) */ {
 public:
  inline ProfileBtyData() : ProfileBtyData(nullptr) {}
  virtual ~ProfileBtyData();

  ProfileBtyData(const ProfileBtyData& from);
  ProfileBtyData(ProfileBtyData&& from) noexcept
    : ProfileBtyData() {
    *this = ::std::move(from);
  }

  inline ProfileBtyData& operator=(const ProfileBtyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileBtyData& operator=(ProfileBtyData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileBtyData& default_instance();

  static inline const ProfileBtyData* internal_default_instance() {
    return reinterpret_cast<const ProfileBtyData*>(
               &_ProfileBtyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProfileBtyData& a, ProfileBtyData& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileBtyData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileBtyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileBtyData* New() const final {
    return CreateMaybeMessage<ProfileBtyData>(nullptr);
  }

  ProfileBtyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileBtyData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileBtyData& from);
  void MergeFrom(const ProfileBtyData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileBtyData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "batteryMonitor.ProfileBtyData";
  }
  protected:
  explicit ProfileBtyData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_batteryMonitor_2eproto);
    return ::descriptor_table_batteryMonitor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ProfileBtyData_BatData BatData;

  // accessors -------------------------------------------------------

  enum : int {
    kBatsFieldNumber = 1,
  };
  // repeated .batteryMonitor.ProfileBtyData.BatData bats = 1;
  int bats_size() const;
  private:
  int _internal_bats_size() const;
  public:
  void clear_bats();
  ::batteryMonitor::ProfileBtyData_BatData* mutable_bats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::batteryMonitor::ProfileBtyData_BatData >*
      mutable_bats();
  private:
  const ::batteryMonitor::ProfileBtyData_BatData& _internal_bats(int index) const;
  ::batteryMonitor::ProfileBtyData_BatData* _internal_add_bats();
  public:
  const ::batteryMonitor::ProfileBtyData_BatData& bats(int index) const;
  ::batteryMonitor::ProfileBtyData_BatData* add_bats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::batteryMonitor::ProfileBtyData_BatData >&
      bats() const;

  // @@protoc_insertion_point(class_scope:batteryMonitor.ProfileBtyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::batteryMonitor::ProfileBtyData_BatData > bats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_batteryMonitor_2eproto;
};
// -------------------------------------------------------------------

class DetailBtyData_EvtItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:batteryMonitor.DetailBtyData.EvtItem) */ {
 public:
  inline DetailBtyData_EvtItem() : DetailBtyData_EvtItem(nullptr) {}
  virtual ~DetailBtyData_EvtItem();

  DetailBtyData_EvtItem(const DetailBtyData_EvtItem& from);
  DetailBtyData_EvtItem(DetailBtyData_EvtItem&& from) noexcept
    : DetailBtyData_EvtItem() {
    *this = ::std::move(from);
  }

  inline DetailBtyData_EvtItem& operator=(const DetailBtyData_EvtItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetailBtyData_EvtItem& operator=(DetailBtyData_EvtItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetailBtyData_EvtItem& default_instance();

  static inline const DetailBtyData_EvtItem* internal_default_instance() {
    return reinterpret_cast<const DetailBtyData_EvtItem*>(
               &_DetailBtyData_EvtItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DetailBtyData_EvtItem& a, DetailBtyData_EvtItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DetailBtyData_EvtItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetailBtyData_EvtItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetailBtyData_EvtItem* New() const final {
    return CreateMaybeMessage<DetailBtyData_EvtItem>(nullptr);
  }

  DetailBtyData_EvtItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetailBtyData_EvtItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetailBtyData_EvtItem& from);
  void MergeFrom(const DetailBtyData_EvtItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetailBtyData_EvtItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "batteryMonitor.DetailBtyData.EvtItem";
  }
  protected:
  explicit DetailBtyData_EvtItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_batteryMonitor_2eproto);
    return ::descriptor_table_batteryMonitor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBtyRfidFieldNumber = 2,
    kEvtItemFieldNumber = 3,
    kStartTimeFieldNumber = 5,
    kEndTimeFieldNumber = 6,
    kInterTimeFieldNumber = 7,
    kBtyTagFieldNumber = 1,
    kAGVFieldNumber = 4,
  };
  // string bty_Rfid = 2;
  void clear_bty_rfid();
  const std::string& bty_rfid() const;
  void set_bty_rfid(const std::string& value);
  void set_bty_rfid(std::string&& value);
  void set_bty_rfid(const char* value);
  void set_bty_rfid(const char* value, size_t size);
  std::string* mutable_bty_rfid();
  std::string* release_bty_rfid();
  void set_allocated_bty_rfid(std::string* bty_rfid);
  private:
  const std::string& _internal_bty_rfid() const;
  void _internal_set_bty_rfid(const std::string& value);
  std::string* _internal_mutable_bty_rfid();
  public:

  // string evtItem = 3;
  void clear_evtitem();
  const std::string& evtitem() const;
  void set_evtitem(const std::string& value);
  void set_evtitem(std::string&& value);
  void set_evtitem(const char* value);
  void set_evtitem(const char* value, size_t size);
  std::string* mutable_evtitem();
  std::string* release_evtitem();
  void set_allocated_evtitem(std::string* evtitem);
  private:
  const std::string& _internal_evtitem() const;
  void _internal_set_evtitem(const std::string& value);
  std::string* _internal_mutable_evtitem();
  public:

  // string startTime = 5;
  void clear_starttime();
  const std::string& starttime() const;
  void set_starttime(const std::string& value);
  void set_starttime(std::string&& value);
  void set_starttime(const char* value);
  void set_starttime(const char* value, size_t size);
  std::string* mutable_starttime();
  std::string* release_starttime();
  void set_allocated_starttime(std::string* starttime);
  private:
  const std::string& _internal_starttime() const;
  void _internal_set_starttime(const std::string& value);
  std::string* _internal_mutable_starttime();
  public:

  // string endTime = 6;
  void clear_endtime();
  const std::string& endtime() const;
  void set_endtime(const std::string& value);
  void set_endtime(std::string&& value);
  void set_endtime(const char* value);
  void set_endtime(const char* value, size_t size);
  std::string* mutable_endtime();
  std::string* release_endtime();
  void set_allocated_endtime(std::string* endtime);
  private:
  const std::string& _internal_endtime() const;
  void _internal_set_endtime(const std::string& value);
  std::string* _internal_mutable_endtime();
  public:

  // string interTime = 7;
  void clear_intertime();
  const std::string& intertime() const;
  void set_intertime(const std::string& value);
  void set_intertime(std::string&& value);
  void set_intertime(const char* value);
  void set_intertime(const char* value, size_t size);
  std::string* mutable_intertime();
  std::string* release_intertime();
  void set_allocated_intertime(std::string* intertime);
  private:
  const std::string& _internal_intertime() const;
  void _internal_set_intertime(const std::string& value);
  std::string* _internal_mutable_intertime();
  public:

  // int32 bty_Tag = 1;
  void clear_bty_tag();
  ::PROTOBUF_NAMESPACE_ID::int32 bty_tag() const;
  void set_bty_tag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bty_tag() const;
  void _internal_set_bty_tag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 AGV = 4;
  void clear_agv();
  ::PROTOBUF_NAMESPACE_ID::int32 agv() const;
  void set_agv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_agv() const;
  void _internal_set_agv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:batteryMonitor.DetailBtyData.EvtItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bty_rfid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr evtitem_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starttime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intertime_;
  ::PROTOBUF_NAMESPACE_ID::int32 bty_tag_;
  ::PROTOBUF_NAMESPACE_ID::int32 agv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_batteryMonitor_2eproto;
};
// -------------------------------------------------------------------

class DetailBtyData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:batteryMonitor.DetailBtyData) */ {
 public:
  inline DetailBtyData() : DetailBtyData(nullptr) {}
  virtual ~DetailBtyData();

  DetailBtyData(const DetailBtyData& from);
  DetailBtyData(DetailBtyData&& from) noexcept
    : DetailBtyData() {
    *this = ::std::move(from);
  }

  inline DetailBtyData& operator=(const DetailBtyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetailBtyData& operator=(DetailBtyData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetailBtyData& default_instance();

  static inline const DetailBtyData* internal_default_instance() {
    return reinterpret_cast<const DetailBtyData*>(
               &_DetailBtyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DetailBtyData& a, DetailBtyData& b) {
    a.Swap(&b);
  }
  inline void Swap(DetailBtyData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetailBtyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetailBtyData* New() const final {
    return CreateMaybeMessage<DetailBtyData>(nullptr);
  }

  DetailBtyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetailBtyData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetailBtyData& from);
  void MergeFrom(const DetailBtyData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetailBtyData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "batteryMonitor.DetailBtyData";
  }
  protected:
  explicit DetailBtyData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_batteryMonitor_2eproto);
    return ::descriptor_table_batteryMonitor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DetailBtyData_EvtItem EvtItem;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .batteryMonitor.DetailBtyData.EvtItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::batteryMonitor::DetailBtyData_EvtItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::batteryMonitor::DetailBtyData_EvtItem >*
      mutable_items();
  private:
  const ::batteryMonitor::DetailBtyData_EvtItem& _internal_items(int index) const;
  ::batteryMonitor::DetailBtyData_EvtItem* _internal_add_items();
  public:
  const ::batteryMonitor::DetailBtyData_EvtItem& items(int index) const;
  ::batteryMonitor::DetailBtyData_EvtItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::batteryMonitor::DetailBtyData_EvtItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:batteryMonitor.DetailBtyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::batteryMonitor::DetailBtyData_EvtItem > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_batteryMonitor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BatteryData

// .batteryMonitor.BatteryData.InfoType info = 1;
inline void BatteryData::clear_info() {
  info_ = 0;
}
inline ::batteryMonitor::BatteryData_InfoType BatteryData::_internal_info() const {
  return static_cast< ::batteryMonitor::BatteryData_InfoType >(info_);
}
inline ::batteryMonitor::BatteryData_InfoType BatteryData::info() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.BatteryData.info)
  return _internal_info();
}
inline void BatteryData::_internal_set_info(::batteryMonitor::BatteryData_InfoType value) {
  
  info_ = value;
}
inline void BatteryData::set_info(::batteryMonitor::BatteryData_InfoType value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.BatteryData.info)
}

// int32 stationID = 2;
inline void BatteryData::clear_stationid() {
  stationid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatteryData::_internal_stationid() const {
  return stationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatteryData::stationid() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.BatteryData.stationID)
  return _internal_stationid();
}
inline void BatteryData::_internal_set_stationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stationid_ = value;
}
inline void BatteryData::set_stationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stationid(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.BatteryData.stationID)
}

// int32 btyTag = 3;
inline void BatteryData::clear_btytag() {
  btytag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatteryData::_internal_btytag() const {
  return btytag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatteryData::btytag() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.BatteryData.btyTag)
  return _internal_btytag();
}
inline void BatteryData::_internal_set_btytag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  btytag_ = value;
}
inline void BatteryData::set_btytag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_btytag(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.BatteryData.btyTag)
}

// int32 agvID = 4;
inline void BatteryData::clear_agvid() {
  agvid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatteryData::_internal_agvid() const {
  return agvid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatteryData::agvid() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.BatteryData.agvID)
  return _internal_agvid();
}
inline void BatteryData::_internal_set_agvid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  agvid_ = value;
}
inline void BatteryData::set_agvid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_agvid(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.BatteryData.agvID)
}

// -------------------------------------------------------------------

// ProfileBtyData_BatData

// int32 bty_Tag = 1;
inline void ProfileBtyData_BatData::clear_bty_tag() {
  bty_tag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileBtyData_BatData::_internal_bty_tag() const {
  return bty_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileBtyData_BatData::bty_tag() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.ProfileBtyData.BatData.bty_Tag)
  return _internal_bty_tag();
}
inline void ProfileBtyData_BatData::_internal_set_bty_tag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bty_tag_ = value;
}
inline void ProfileBtyData_BatData::set_bty_tag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bty_tag(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.ProfileBtyData.BatData.bty_Tag)
}

// string bty_Rfid = 2;
inline void ProfileBtyData_BatData::clear_bty_rfid() {
  bty_rfid_.ClearToEmpty();
}
inline const std::string& ProfileBtyData_BatData::bty_rfid() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.ProfileBtyData.BatData.bty_Rfid)
  return _internal_bty_rfid();
}
inline void ProfileBtyData_BatData::set_bty_rfid(const std::string& value) {
  _internal_set_bty_rfid(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.ProfileBtyData.BatData.bty_Rfid)
}
inline std::string* ProfileBtyData_BatData::mutable_bty_rfid() {
  // @@protoc_insertion_point(field_mutable:batteryMonitor.ProfileBtyData.BatData.bty_Rfid)
  return _internal_mutable_bty_rfid();
}
inline const std::string& ProfileBtyData_BatData::_internal_bty_rfid() const {
  return bty_rfid_.Get();
}
inline void ProfileBtyData_BatData::_internal_set_bty_rfid(const std::string& value) {
  
  bty_rfid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfileBtyData_BatData::set_bty_rfid(std::string&& value) {
  
  bty_rfid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:batteryMonitor.ProfileBtyData.BatData.bty_Rfid)
}
inline void ProfileBtyData_BatData::set_bty_rfid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bty_rfid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:batteryMonitor.ProfileBtyData.BatData.bty_Rfid)
}
inline void ProfileBtyData_BatData::set_bty_rfid(const char* value,
    size_t size) {
  
  bty_rfid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:batteryMonitor.ProfileBtyData.BatData.bty_Rfid)
}
inline std::string* ProfileBtyData_BatData::_internal_mutable_bty_rfid() {
  
  return bty_rfid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfileBtyData_BatData::release_bty_rfid() {
  // @@protoc_insertion_point(field_release:batteryMonitor.ProfileBtyData.BatData.bty_Rfid)
  return bty_rfid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfileBtyData_BatData::set_allocated_bty_rfid(std::string* bty_rfid) {
  if (bty_rfid != nullptr) {
    
  } else {
    
  }
  bty_rfid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bty_rfid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:batteryMonitor.ProfileBtyData.BatData.bty_Rfid)
}

// int32 inAGV = 3;
inline void ProfileBtyData_BatData::clear_inagv() {
  inagv_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileBtyData_BatData::_internal_inagv() const {
  return inagv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileBtyData_BatData::inagv() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.ProfileBtyData.BatData.inAGV)
  return _internal_inagv();
}
inline void ProfileBtyData_BatData::_internal_set_inagv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inagv_ = value;
}
inline void ProfileBtyData_BatData::set_inagv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inagv(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.ProfileBtyData.BatData.inAGV)
}

// int32 inStation = 4;
inline void ProfileBtyData_BatData::clear_instation() {
  instation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileBtyData_BatData::_internal_instation() const {
  return instation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileBtyData_BatData::instation() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.ProfileBtyData.BatData.inStation)
  return _internal_instation();
}
inline void ProfileBtyData_BatData::_internal_set_instation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  instation_ = value;
}
inline void ProfileBtyData_BatData::set_instation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_instation(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.ProfileBtyData.BatData.inStation)
}

// int32 stationSpace = 5;
inline void ProfileBtyData_BatData::clear_stationspace() {
  stationspace_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileBtyData_BatData::_internal_stationspace() const {
  return stationspace_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileBtyData_BatData::stationspace() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.ProfileBtyData.BatData.stationSpace)
  return _internal_stationspace();
}
inline void ProfileBtyData_BatData::_internal_set_stationspace(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stationspace_ = value;
}
inline void ProfileBtyData_BatData::set_stationspace(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stationspace(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.ProfileBtyData.BatData.stationSpace)
}

// int32 power = 6;
inline void ProfileBtyData_BatData::clear_power() {
  power_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileBtyData_BatData::_internal_power() const {
  return power_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileBtyData_BatData::power() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.ProfileBtyData.BatData.power)
  return _internal_power();
}
inline void ProfileBtyData_BatData::_internal_set_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  power_ = value;
}
inline void ProfileBtyData_BatData::set_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.ProfileBtyData.BatData.power)
}

// int32 useAvgTime = 7;
inline void ProfileBtyData_BatData::clear_useavgtime() {
  useavgtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileBtyData_BatData::_internal_useavgtime() const {
  return useavgtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileBtyData_BatData::useavgtime() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.ProfileBtyData.BatData.useAvgTime)
  return _internal_useavgtime();
}
inline void ProfileBtyData_BatData::_internal_set_useavgtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  useavgtime_ = value;
}
inline void ProfileBtyData_BatData::set_useavgtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_useavgtime(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.ProfileBtyData.BatData.useAvgTime)
}

// int32 chargeAvgTime = 8;
inline void ProfileBtyData_BatData::clear_chargeavgtime() {
  chargeavgtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileBtyData_BatData::_internal_chargeavgtime() const {
  return chargeavgtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileBtyData_BatData::chargeavgtime() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.ProfileBtyData.BatData.chargeAvgTime)
  return _internal_chargeavgtime();
}
inline void ProfileBtyData_BatData::_internal_set_chargeavgtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chargeavgtime_ = value;
}
inline void ProfileBtyData_BatData::set_chargeavgtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chargeavgtime(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.ProfileBtyData.BatData.chargeAvgTime)
}

// int32 idleAvgTime = 9;
inline void ProfileBtyData_BatData::clear_idleavgtime() {
  idleavgtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileBtyData_BatData::_internal_idleavgtime() const {
  return idleavgtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileBtyData_BatData::idleavgtime() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.ProfileBtyData.BatData.idleAvgTime)
  return _internal_idleavgtime();
}
inline void ProfileBtyData_BatData::_internal_set_idleavgtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idleavgtime_ = value;
}
inline void ProfileBtyData_BatData::set_idleavgtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idleavgtime(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.ProfileBtyData.BatData.idleAvgTime)
}

// int32 addWaterInter = 10;
inline void ProfileBtyData_BatData::clear_addwaterinter() {
  addwaterinter_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileBtyData_BatData::_internal_addwaterinter() const {
  return addwaterinter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileBtyData_BatData::addwaterinter() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.ProfileBtyData.BatData.addWaterInter)
  return _internal_addwaterinter();
}
inline void ProfileBtyData_BatData::_internal_set_addwaterinter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  addwaterinter_ = value;
}
inline void ProfileBtyData_BatData::set_addwaterinter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_addwaterinter(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.ProfileBtyData.BatData.addWaterInter)
}

// string addWaterTime = 11;
inline void ProfileBtyData_BatData::clear_addwatertime() {
  addwatertime_.ClearToEmpty();
}
inline const std::string& ProfileBtyData_BatData::addwatertime() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.ProfileBtyData.BatData.addWaterTime)
  return _internal_addwatertime();
}
inline void ProfileBtyData_BatData::set_addwatertime(const std::string& value) {
  _internal_set_addwatertime(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.ProfileBtyData.BatData.addWaterTime)
}
inline std::string* ProfileBtyData_BatData::mutable_addwatertime() {
  // @@protoc_insertion_point(field_mutable:batteryMonitor.ProfileBtyData.BatData.addWaterTime)
  return _internal_mutable_addwatertime();
}
inline const std::string& ProfileBtyData_BatData::_internal_addwatertime() const {
  return addwatertime_.Get();
}
inline void ProfileBtyData_BatData::_internal_set_addwatertime(const std::string& value) {
  
  addwatertime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfileBtyData_BatData::set_addwatertime(std::string&& value) {
  
  addwatertime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:batteryMonitor.ProfileBtyData.BatData.addWaterTime)
}
inline void ProfileBtyData_BatData::set_addwatertime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addwatertime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:batteryMonitor.ProfileBtyData.BatData.addWaterTime)
}
inline void ProfileBtyData_BatData::set_addwatertime(const char* value,
    size_t size) {
  
  addwatertime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:batteryMonitor.ProfileBtyData.BatData.addWaterTime)
}
inline std::string* ProfileBtyData_BatData::_internal_mutable_addwatertime() {
  
  return addwatertime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfileBtyData_BatData::release_addwatertime() {
  // @@protoc_insertion_point(field_release:batteryMonitor.ProfileBtyData.BatData.addWaterTime)
  return addwatertime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfileBtyData_BatData::set_allocated_addwatertime(std::string* addwatertime) {
  if (addwatertime != nullptr) {
    
  } else {
    
  }
  addwatertime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addwatertime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:batteryMonitor.ProfileBtyData.BatData.addWaterTime)
}

// string startUseTime = 12;
inline void ProfileBtyData_BatData::clear_startusetime() {
  startusetime_.ClearToEmpty();
}
inline const std::string& ProfileBtyData_BatData::startusetime() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.ProfileBtyData.BatData.startUseTime)
  return _internal_startusetime();
}
inline void ProfileBtyData_BatData::set_startusetime(const std::string& value) {
  _internal_set_startusetime(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.ProfileBtyData.BatData.startUseTime)
}
inline std::string* ProfileBtyData_BatData::mutable_startusetime() {
  // @@protoc_insertion_point(field_mutable:batteryMonitor.ProfileBtyData.BatData.startUseTime)
  return _internal_mutable_startusetime();
}
inline const std::string& ProfileBtyData_BatData::_internal_startusetime() const {
  return startusetime_.Get();
}
inline void ProfileBtyData_BatData::_internal_set_startusetime(const std::string& value) {
  
  startusetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProfileBtyData_BatData::set_startusetime(std::string&& value) {
  
  startusetime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:batteryMonitor.ProfileBtyData.BatData.startUseTime)
}
inline void ProfileBtyData_BatData::set_startusetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  startusetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:batteryMonitor.ProfileBtyData.BatData.startUseTime)
}
inline void ProfileBtyData_BatData::set_startusetime(const char* value,
    size_t size) {
  
  startusetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:batteryMonitor.ProfileBtyData.BatData.startUseTime)
}
inline std::string* ProfileBtyData_BatData::_internal_mutable_startusetime() {
  
  return startusetime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProfileBtyData_BatData::release_startusetime() {
  // @@protoc_insertion_point(field_release:batteryMonitor.ProfileBtyData.BatData.startUseTime)
  return startusetime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfileBtyData_BatData::set_allocated_startusetime(std::string* startusetime) {
  if (startusetime != nullptr) {
    
  } else {
    
  }
  startusetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), startusetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:batteryMonitor.ProfileBtyData.BatData.startUseTime)
}

// -------------------------------------------------------------------

// ProfileBtyData

// repeated .batteryMonitor.ProfileBtyData.BatData bats = 1;
inline int ProfileBtyData::_internal_bats_size() const {
  return bats_.size();
}
inline int ProfileBtyData::bats_size() const {
  return _internal_bats_size();
}
inline void ProfileBtyData::clear_bats() {
  bats_.Clear();
}
inline ::batteryMonitor::ProfileBtyData_BatData* ProfileBtyData::mutable_bats(int index) {
  // @@protoc_insertion_point(field_mutable:batteryMonitor.ProfileBtyData.bats)
  return bats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::batteryMonitor::ProfileBtyData_BatData >*
ProfileBtyData::mutable_bats() {
  // @@protoc_insertion_point(field_mutable_list:batteryMonitor.ProfileBtyData.bats)
  return &bats_;
}
inline const ::batteryMonitor::ProfileBtyData_BatData& ProfileBtyData::_internal_bats(int index) const {
  return bats_.Get(index);
}
inline const ::batteryMonitor::ProfileBtyData_BatData& ProfileBtyData::bats(int index) const {
  // @@protoc_insertion_point(field_get:batteryMonitor.ProfileBtyData.bats)
  return _internal_bats(index);
}
inline ::batteryMonitor::ProfileBtyData_BatData* ProfileBtyData::_internal_add_bats() {
  return bats_.Add();
}
inline ::batteryMonitor::ProfileBtyData_BatData* ProfileBtyData::add_bats() {
  // @@protoc_insertion_point(field_add:batteryMonitor.ProfileBtyData.bats)
  return _internal_add_bats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::batteryMonitor::ProfileBtyData_BatData >&
ProfileBtyData::bats() const {
  // @@protoc_insertion_point(field_list:batteryMonitor.ProfileBtyData.bats)
  return bats_;
}

// -------------------------------------------------------------------

// DetailBtyData_EvtItem

// int32 bty_Tag = 1;
inline void DetailBtyData_EvtItem::clear_bty_tag() {
  bty_tag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetailBtyData_EvtItem::_internal_bty_tag() const {
  return bty_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetailBtyData_EvtItem::bty_tag() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.DetailBtyData.EvtItem.bty_Tag)
  return _internal_bty_tag();
}
inline void DetailBtyData_EvtItem::_internal_set_bty_tag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bty_tag_ = value;
}
inline void DetailBtyData_EvtItem::set_bty_tag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bty_tag(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.DetailBtyData.EvtItem.bty_Tag)
}

// string bty_Rfid = 2;
inline void DetailBtyData_EvtItem::clear_bty_rfid() {
  bty_rfid_.ClearToEmpty();
}
inline const std::string& DetailBtyData_EvtItem::bty_rfid() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.DetailBtyData.EvtItem.bty_Rfid)
  return _internal_bty_rfid();
}
inline void DetailBtyData_EvtItem::set_bty_rfid(const std::string& value) {
  _internal_set_bty_rfid(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.DetailBtyData.EvtItem.bty_Rfid)
}
inline std::string* DetailBtyData_EvtItem::mutable_bty_rfid() {
  // @@protoc_insertion_point(field_mutable:batteryMonitor.DetailBtyData.EvtItem.bty_Rfid)
  return _internal_mutable_bty_rfid();
}
inline const std::string& DetailBtyData_EvtItem::_internal_bty_rfid() const {
  return bty_rfid_.Get();
}
inline void DetailBtyData_EvtItem::_internal_set_bty_rfid(const std::string& value) {
  
  bty_rfid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DetailBtyData_EvtItem::set_bty_rfid(std::string&& value) {
  
  bty_rfid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:batteryMonitor.DetailBtyData.EvtItem.bty_Rfid)
}
inline void DetailBtyData_EvtItem::set_bty_rfid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bty_rfid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:batteryMonitor.DetailBtyData.EvtItem.bty_Rfid)
}
inline void DetailBtyData_EvtItem::set_bty_rfid(const char* value,
    size_t size) {
  
  bty_rfid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:batteryMonitor.DetailBtyData.EvtItem.bty_Rfid)
}
inline std::string* DetailBtyData_EvtItem::_internal_mutable_bty_rfid() {
  
  return bty_rfid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DetailBtyData_EvtItem::release_bty_rfid() {
  // @@protoc_insertion_point(field_release:batteryMonitor.DetailBtyData.EvtItem.bty_Rfid)
  return bty_rfid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetailBtyData_EvtItem::set_allocated_bty_rfid(std::string* bty_rfid) {
  if (bty_rfid != nullptr) {
    
  } else {
    
  }
  bty_rfid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bty_rfid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:batteryMonitor.DetailBtyData.EvtItem.bty_Rfid)
}

// string evtItem = 3;
inline void DetailBtyData_EvtItem::clear_evtitem() {
  evtitem_.ClearToEmpty();
}
inline const std::string& DetailBtyData_EvtItem::evtitem() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.DetailBtyData.EvtItem.evtItem)
  return _internal_evtitem();
}
inline void DetailBtyData_EvtItem::set_evtitem(const std::string& value) {
  _internal_set_evtitem(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.DetailBtyData.EvtItem.evtItem)
}
inline std::string* DetailBtyData_EvtItem::mutable_evtitem() {
  // @@protoc_insertion_point(field_mutable:batteryMonitor.DetailBtyData.EvtItem.evtItem)
  return _internal_mutable_evtitem();
}
inline const std::string& DetailBtyData_EvtItem::_internal_evtitem() const {
  return evtitem_.Get();
}
inline void DetailBtyData_EvtItem::_internal_set_evtitem(const std::string& value) {
  
  evtitem_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DetailBtyData_EvtItem::set_evtitem(std::string&& value) {
  
  evtitem_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:batteryMonitor.DetailBtyData.EvtItem.evtItem)
}
inline void DetailBtyData_EvtItem::set_evtitem(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  evtitem_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:batteryMonitor.DetailBtyData.EvtItem.evtItem)
}
inline void DetailBtyData_EvtItem::set_evtitem(const char* value,
    size_t size) {
  
  evtitem_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:batteryMonitor.DetailBtyData.EvtItem.evtItem)
}
inline std::string* DetailBtyData_EvtItem::_internal_mutable_evtitem() {
  
  return evtitem_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DetailBtyData_EvtItem::release_evtitem() {
  // @@protoc_insertion_point(field_release:batteryMonitor.DetailBtyData.EvtItem.evtItem)
  return evtitem_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetailBtyData_EvtItem::set_allocated_evtitem(std::string* evtitem) {
  if (evtitem != nullptr) {
    
  } else {
    
  }
  evtitem_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), evtitem,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:batteryMonitor.DetailBtyData.EvtItem.evtItem)
}

// int32 AGV = 4;
inline void DetailBtyData_EvtItem::clear_agv() {
  agv_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetailBtyData_EvtItem::_internal_agv() const {
  return agv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetailBtyData_EvtItem::agv() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.DetailBtyData.EvtItem.AGV)
  return _internal_agv();
}
inline void DetailBtyData_EvtItem::_internal_set_agv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  agv_ = value;
}
inline void DetailBtyData_EvtItem::set_agv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_agv(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.DetailBtyData.EvtItem.AGV)
}

// string startTime = 5;
inline void DetailBtyData_EvtItem::clear_starttime() {
  starttime_.ClearToEmpty();
}
inline const std::string& DetailBtyData_EvtItem::starttime() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.DetailBtyData.EvtItem.startTime)
  return _internal_starttime();
}
inline void DetailBtyData_EvtItem::set_starttime(const std::string& value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.DetailBtyData.EvtItem.startTime)
}
inline std::string* DetailBtyData_EvtItem::mutable_starttime() {
  // @@protoc_insertion_point(field_mutable:batteryMonitor.DetailBtyData.EvtItem.startTime)
  return _internal_mutable_starttime();
}
inline const std::string& DetailBtyData_EvtItem::_internal_starttime() const {
  return starttime_.Get();
}
inline void DetailBtyData_EvtItem::_internal_set_starttime(const std::string& value) {
  
  starttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DetailBtyData_EvtItem::set_starttime(std::string&& value) {
  
  starttime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:batteryMonitor.DetailBtyData.EvtItem.startTime)
}
inline void DetailBtyData_EvtItem::set_starttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  starttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:batteryMonitor.DetailBtyData.EvtItem.startTime)
}
inline void DetailBtyData_EvtItem::set_starttime(const char* value,
    size_t size) {
  
  starttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:batteryMonitor.DetailBtyData.EvtItem.startTime)
}
inline std::string* DetailBtyData_EvtItem::_internal_mutable_starttime() {
  
  return starttime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DetailBtyData_EvtItem::release_starttime() {
  // @@protoc_insertion_point(field_release:batteryMonitor.DetailBtyData.EvtItem.startTime)
  return starttime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetailBtyData_EvtItem::set_allocated_starttime(std::string* starttime) {
  if (starttime != nullptr) {
    
  } else {
    
  }
  starttime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), starttime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:batteryMonitor.DetailBtyData.EvtItem.startTime)
}

// string endTime = 6;
inline void DetailBtyData_EvtItem::clear_endtime() {
  endtime_.ClearToEmpty();
}
inline const std::string& DetailBtyData_EvtItem::endtime() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.DetailBtyData.EvtItem.endTime)
  return _internal_endtime();
}
inline void DetailBtyData_EvtItem::set_endtime(const std::string& value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.DetailBtyData.EvtItem.endTime)
}
inline std::string* DetailBtyData_EvtItem::mutable_endtime() {
  // @@protoc_insertion_point(field_mutable:batteryMonitor.DetailBtyData.EvtItem.endTime)
  return _internal_mutable_endtime();
}
inline const std::string& DetailBtyData_EvtItem::_internal_endtime() const {
  return endtime_.Get();
}
inline void DetailBtyData_EvtItem::_internal_set_endtime(const std::string& value) {
  
  endtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DetailBtyData_EvtItem::set_endtime(std::string&& value) {
  
  endtime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:batteryMonitor.DetailBtyData.EvtItem.endTime)
}
inline void DetailBtyData_EvtItem::set_endtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:batteryMonitor.DetailBtyData.EvtItem.endTime)
}
inline void DetailBtyData_EvtItem::set_endtime(const char* value,
    size_t size) {
  
  endtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:batteryMonitor.DetailBtyData.EvtItem.endTime)
}
inline std::string* DetailBtyData_EvtItem::_internal_mutable_endtime() {
  
  return endtime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DetailBtyData_EvtItem::release_endtime() {
  // @@protoc_insertion_point(field_release:batteryMonitor.DetailBtyData.EvtItem.endTime)
  return endtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetailBtyData_EvtItem::set_allocated_endtime(std::string* endtime) {
  if (endtime != nullptr) {
    
  } else {
    
  }
  endtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:batteryMonitor.DetailBtyData.EvtItem.endTime)
}

// string interTime = 7;
inline void DetailBtyData_EvtItem::clear_intertime() {
  intertime_.ClearToEmpty();
}
inline const std::string& DetailBtyData_EvtItem::intertime() const {
  // @@protoc_insertion_point(field_get:batteryMonitor.DetailBtyData.EvtItem.interTime)
  return _internal_intertime();
}
inline void DetailBtyData_EvtItem::set_intertime(const std::string& value) {
  _internal_set_intertime(value);
  // @@protoc_insertion_point(field_set:batteryMonitor.DetailBtyData.EvtItem.interTime)
}
inline std::string* DetailBtyData_EvtItem::mutable_intertime() {
  // @@protoc_insertion_point(field_mutable:batteryMonitor.DetailBtyData.EvtItem.interTime)
  return _internal_mutable_intertime();
}
inline const std::string& DetailBtyData_EvtItem::_internal_intertime() const {
  return intertime_.Get();
}
inline void DetailBtyData_EvtItem::_internal_set_intertime(const std::string& value) {
  
  intertime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DetailBtyData_EvtItem::set_intertime(std::string&& value) {
  
  intertime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:batteryMonitor.DetailBtyData.EvtItem.interTime)
}
inline void DetailBtyData_EvtItem::set_intertime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  intertime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:batteryMonitor.DetailBtyData.EvtItem.interTime)
}
inline void DetailBtyData_EvtItem::set_intertime(const char* value,
    size_t size) {
  
  intertime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:batteryMonitor.DetailBtyData.EvtItem.interTime)
}
inline std::string* DetailBtyData_EvtItem::_internal_mutable_intertime() {
  
  return intertime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DetailBtyData_EvtItem::release_intertime() {
  // @@protoc_insertion_point(field_release:batteryMonitor.DetailBtyData.EvtItem.interTime)
  return intertime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetailBtyData_EvtItem::set_allocated_intertime(std::string* intertime) {
  if (intertime != nullptr) {
    
  } else {
    
  }
  intertime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intertime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:batteryMonitor.DetailBtyData.EvtItem.interTime)
}

// -------------------------------------------------------------------

// DetailBtyData

// repeated .batteryMonitor.DetailBtyData.EvtItem items = 1;
inline int DetailBtyData::_internal_items_size() const {
  return items_.size();
}
inline int DetailBtyData::items_size() const {
  return _internal_items_size();
}
inline void DetailBtyData::clear_items() {
  items_.Clear();
}
inline ::batteryMonitor::DetailBtyData_EvtItem* DetailBtyData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:batteryMonitor.DetailBtyData.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::batteryMonitor::DetailBtyData_EvtItem >*
DetailBtyData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:batteryMonitor.DetailBtyData.items)
  return &items_;
}
inline const ::batteryMonitor::DetailBtyData_EvtItem& DetailBtyData::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::batteryMonitor::DetailBtyData_EvtItem& DetailBtyData::items(int index) const {
  // @@protoc_insertion_point(field_get:batteryMonitor.DetailBtyData.items)
  return _internal_items(index);
}
inline ::batteryMonitor::DetailBtyData_EvtItem* DetailBtyData::_internal_add_items() {
  return items_.Add();
}
inline ::batteryMonitor::DetailBtyData_EvtItem* DetailBtyData::add_items() {
  // @@protoc_insertion_point(field_add:batteryMonitor.DetailBtyData.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::batteryMonitor::DetailBtyData_EvtItem >&
DetailBtyData::items() const {
  // @@protoc_insertion_point(field_list:batteryMonitor.DetailBtyData.items)
  return items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace batteryMonitor

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::batteryMonitor::BatteryData_InfoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::batteryMonitor::BatteryData_InfoType>() {
  return ::batteryMonitor::BatteryData_InfoType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_batteryMonitor_2eproto
