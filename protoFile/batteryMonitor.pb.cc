// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: batteryMonitor.proto

#include "batteryMonitor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_batteryMonitor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DetailBtyData_EvtItem_batteryMonitor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_batteryMonitor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileBtyData_BatData_batteryMonitor_2eproto;
namespace batteryMonitor {
class BatteryDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatteryData> _instance;
} _BatteryData_default_instance_;
class ProfileBtyData_BatDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileBtyData_BatData> _instance;
} _ProfileBtyData_BatData_default_instance_;
class ProfileBtyDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileBtyData> _instance;
} _ProfileBtyData_default_instance_;
class DetailBtyData_EvtItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetailBtyData_EvtItem> _instance;
} _DetailBtyData_EvtItem_default_instance_;
class DetailBtyDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetailBtyData> _instance;
} _DetailBtyData_default_instance_;
}  // namespace batteryMonitor
static void InitDefaultsscc_info_BatteryData_batteryMonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::batteryMonitor::_BatteryData_default_instance_;
    new (ptr) ::batteryMonitor::BatteryData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatteryData_batteryMonitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BatteryData_batteryMonitor_2eproto}, {}};

static void InitDefaultsscc_info_DetailBtyData_batteryMonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::batteryMonitor::_DetailBtyData_default_instance_;
    new (ptr) ::batteryMonitor::DetailBtyData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetailBtyData_batteryMonitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DetailBtyData_batteryMonitor_2eproto}, {
      &scc_info_DetailBtyData_EvtItem_batteryMonitor_2eproto.base,}};

static void InitDefaultsscc_info_DetailBtyData_EvtItem_batteryMonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::batteryMonitor::_DetailBtyData_EvtItem_default_instance_;
    new (ptr) ::batteryMonitor::DetailBtyData_EvtItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DetailBtyData_EvtItem_batteryMonitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DetailBtyData_EvtItem_batteryMonitor_2eproto}, {}};

static void InitDefaultsscc_info_ProfileBtyData_batteryMonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::batteryMonitor::_ProfileBtyData_default_instance_;
    new (ptr) ::batteryMonitor::ProfileBtyData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileBtyData_batteryMonitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfileBtyData_batteryMonitor_2eproto}, {
      &scc_info_ProfileBtyData_BatData_batteryMonitor_2eproto.base,}};

static void InitDefaultsscc_info_ProfileBtyData_BatData_batteryMonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::batteryMonitor::_ProfileBtyData_BatData_default_instance_;
    new (ptr) ::batteryMonitor::ProfileBtyData_BatData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileBtyData_BatData_batteryMonitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileBtyData_BatData_batteryMonitor_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_batteryMonitor_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_batteryMonitor_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_batteryMonitor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_batteryMonitor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::BatteryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::BatteryData, info_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::BatteryData, stationid_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::BatteryData, btytag_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::BatteryData, agvid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::ProfileBtyData_BatData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::ProfileBtyData_BatData, bty_tag_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::ProfileBtyData_BatData, bty_rfid_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::ProfileBtyData_BatData, inagv_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::ProfileBtyData_BatData, instation_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::ProfileBtyData_BatData, stationspace_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::ProfileBtyData_BatData, power_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::ProfileBtyData_BatData, useavgtime_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::ProfileBtyData_BatData, chargeavgtime_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::ProfileBtyData_BatData, idleavgtime_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::ProfileBtyData_BatData, addwaterinter_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::ProfileBtyData_BatData, addwatertime_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::ProfileBtyData_BatData, startusetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::ProfileBtyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::ProfileBtyData, bats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::DetailBtyData_EvtItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::DetailBtyData_EvtItem, bty_tag_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::DetailBtyData_EvtItem, bty_rfid_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::DetailBtyData_EvtItem, evtitem_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::DetailBtyData_EvtItem, agv_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::DetailBtyData_EvtItem, starttime_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::DetailBtyData_EvtItem, endtime_),
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::DetailBtyData_EvtItem, intertime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::DetailBtyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::batteryMonitor::DetailBtyData, items_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::batteryMonitor::BatteryData)},
  { 9, -1, sizeof(::batteryMonitor::ProfileBtyData_BatData)},
  { 26, -1, sizeof(::batteryMonitor::ProfileBtyData)},
  { 32, -1, sizeof(::batteryMonitor::DetailBtyData_EvtItem)},
  { 44, -1, sizeof(::batteryMonitor::DetailBtyData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::batteryMonitor::_BatteryData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::batteryMonitor::_ProfileBtyData_BatData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::batteryMonitor::_ProfileBtyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::batteryMonitor::_DetailBtyData_EvtItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::batteryMonitor::_DetailBtyData_default_instance_),
};

const char descriptor_table_protodef_batteryMonitor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024batteryMonitor.proto\022\016batteryMonitor\"\244"
  "\001\n\013BatteryData\0222\n\004info\030\001 \001(\0162$.batteryMo"
  "nitor.BatteryData.InfoType\022\021\n\tstationID\030"
  "\002 \001(\005\022\016\n\006btyTag\030\003 \001(\005\022\r\n\005agvID\030\004 \001(\005\"/\n\010"
  "InfoType\022\013\n\007PROFILE\020\000\022\n\n\006DETAIL\020\001\022\n\n\006REM"
  "IND\020\002\"\277\002\n\016ProfileBtyData\0224\n\004bats\030\001 \003(\0132&"
  ".batteryMonitor.ProfileBtyData.BatData\032\366"
  "\001\n\007BatData\022\017\n\007bty_Tag\030\001 \001(\005\022\020\n\010bty_Rfid\030"
  "\002 \001(\t\022\r\n\005inAGV\030\003 \001(\005\022\021\n\tinStation\030\004 \001(\005\022"
  "\024\n\014stationSpace\030\005 \001(\005\022\r\n\005power\030\006 \001(\005\022\022\n\n"
  "useAvgTime\030\007 \001(\005\022\025\n\rchargeAvgTime\030\010 \001(\005\022"
  "\023\n\013idleAvgTime\030\t \001(\005\022\025\n\raddWaterInter\030\n "
  "\001(\005\022\024\n\014addWaterTime\030\013 \001(\t\022\024\n\014startUseTim"
  "e\030\014 \001(\t\"\311\001\n\rDetailBtyData\0224\n\005items\030\001 \003(\013"
  "2%.batteryMonitor.DetailBtyData.EvtItem\032"
  "\201\001\n\007EvtItem\022\017\n\007bty_Tag\030\001 \001(\005\022\020\n\010bty_Rfid"
  "\030\002 \001(\t\022\017\n\007evtItem\030\003 \001(\t\022\013\n\003AGV\030\004 \001(\005\022\021\n\t"
  "startTime\030\005 \001(\t\022\017\n\007endTime\030\006 \001(\t\022\021\n\tinte"
  "rTime\030\007 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_batteryMonitor_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_batteryMonitor_2eproto_sccs[5] = {
  &scc_info_BatteryData_batteryMonitor_2eproto.base,
  &scc_info_DetailBtyData_batteryMonitor_2eproto.base,
  &scc_info_DetailBtyData_EvtItem_batteryMonitor_2eproto.base,
  &scc_info_ProfileBtyData_batteryMonitor_2eproto.base,
  &scc_info_ProfileBtyData_BatData_batteryMonitor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_batteryMonitor_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_batteryMonitor_2eproto = {
  false, false, descriptor_table_protodef_batteryMonitor_2eproto, "batteryMonitor.proto", 739,
  &descriptor_table_batteryMonitor_2eproto_once, descriptor_table_batteryMonitor_2eproto_sccs, descriptor_table_batteryMonitor_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_batteryMonitor_2eproto::offsets,
  file_level_metadata_batteryMonitor_2eproto, 5, file_level_enum_descriptors_batteryMonitor_2eproto, file_level_service_descriptors_batteryMonitor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_batteryMonitor_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_batteryMonitor_2eproto)), true);
namespace batteryMonitor {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatteryData_InfoType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_batteryMonitor_2eproto);
  return file_level_enum_descriptors_batteryMonitor_2eproto[0];
}
bool BatteryData_InfoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BatteryData_InfoType BatteryData::PROFILE;
constexpr BatteryData_InfoType BatteryData::DETAIL;
constexpr BatteryData_InfoType BatteryData::REMIND;
constexpr BatteryData_InfoType BatteryData::InfoType_MIN;
constexpr BatteryData_InfoType BatteryData::InfoType_MAX;
constexpr int BatteryData::InfoType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class BatteryData::_Internal {
 public:
};

BatteryData::BatteryData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:batteryMonitor.BatteryData)
}
BatteryData::BatteryData(const BatteryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&info_, &from.info_,
    static_cast<size_t>(reinterpret_cast<char*>(&agvid_) -
    reinterpret_cast<char*>(&info_)) + sizeof(agvid_));
  // @@protoc_insertion_point(copy_constructor:batteryMonitor.BatteryData)
}

void BatteryData::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&agvid_) -
      reinterpret_cast<char*>(&info_)) + sizeof(agvid_));
}

BatteryData::~BatteryData() {
  // @@protoc_insertion_point(destructor:batteryMonitor.BatteryData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatteryData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BatteryData::ArenaDtor(void* object) {
  BatteryData* _this = reinterpret_cast< BatteryData* >(object);
  (void)_this;
}
void BatteryData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatteryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatteryData& BatteryData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatteryData_batteryMonitor_2eproto.base);
  return *internal_default_instance();
}


void BatteryData::Clear() {
// @@protoc_insertion_point(message_clear_start:batteryMonitor.BatteryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agvid_) -
      reinterpret_cast<char*>(&info_)) + sizeof(agvid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatteryData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .batteryMonitor.BatteryData.InfoType info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_info(static_cast<::batteryMonitor::BatteryData_InfoType>(val));
        } else goto handle_unusual;
        continue;
      // int32 stationID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 btyTag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          btytag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 agvID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          agvid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatteryData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:batteryMonitor.BatteryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .batteryMonitor.BatteryData.InfoType info = 1;
  if (this->info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_info(), target);
  }

  // int32 stationID = 2;
  if (this->stationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_stationid(), target);
  }

  // int32 btyTag = 3;
  if (this->btytag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_btytag(), target);
  }

  // int32 agvID = 4;
  if (this->agvid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_agvid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:batteryMonitor.BatteryData)
  return target;
}

size_t BatteryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batteryMonitor.BatteryData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .batteryMonitor.BatteryData.InfoType info = 1;
  if (this->info() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_info());
  }

  // int32 stationID = 2;
  if (this->stationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stationid());
  }

  // int32 btyTag = 3;
  if (this->btytag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_btytag());
  }

  // int32 agvID = 4;
  if (this->agvid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_agvid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatteryData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batteryMonitor.BatteryData)
  GOOGLE_DCHECK_NE(&from, this);
  const BatteryData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatteryData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batteryMonitor.BatteryData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batteryMonitor.BatteryData)
    MergeFrom(*source);
  }
}

void BatteryData::MergeFrom(const BatteryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batteryMonitor.BatteryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.info() != 0) {
    _internal_set_info(from._internal_info());
  }
  if (from.stationid() != 0) {
    _internal_set_stationid(from._internal_stationid());
  }
  if (from.btytag() != 0) {
    _internal_set_btytag(from._internal_btytag());
  }
  if (from.agvid() != 0) {
    _internal_set_agvid(from._internal_agvid());
  }
}

void BatteryData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batteryMonitor.BatteryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatteryData::CopyFrom(const BatteryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batteryMonitor.BatteryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryData::IsInitialized() const {
  return true;
}

void BatteryData::InternalSwap(BatteryData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatteryData, agvid_)
      + sizeof(BatteryData::agvid_)
      - PROTOBUF_FIELD_OFFSET(BatteryData, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfileBtyData_BatData::_Internal {
 public:
};

ProfileBtyData_BatData::ProfileBtyData_BatData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:batteryMonitor.ProfileBtyData.BatData)
}
ProfileBtyData_BatData::ProfileBtyData_BatData(const ProfileBtyData_BatData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bty_rfid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bty_rfid().empty()) {
    bty_rfid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bty_rfid(), 
      GetArena());
  }
  addwatertime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addwatertime().empty()) {
    addwatertime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addwatertime(), 
      GetArena());
  }
  startusetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_startusetime().empty()) {
    startusetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_startusetime(), 
      GetArena());
  }
  ::memcpy(&bty_tag_, &from.bty_tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&addwaterinter_) -
    reinterpret_cast<char*>(&bty_tag_)) + sizeof(addwaterinter_));
  // @@protoc_insertion_point(copy_constructor:batteryMonitor.ProfileBtyData.BatData)
}

void ProfileBtyData_BatData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileBtyData_BatData_batteryMonitor_2eproto.base);
  bty_rfid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  addwatertime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  startusetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bty_tag_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&addwaterinter_) -
      reinterpret_cast<char*>(&bty_tag_)) + sizeof(addwaterinter_));
}

ProfileBtyData_BatData::~ProfileBtyData_BatData() {
  // @@protoc_insertion_point(destructor:batteryMonitor.ProfileBtyData.BatData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfileBtyData_BatData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bty_rfid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  addwatertime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  startusetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileBtyData_BatData::ArenaDtor(void* object) {
  ProfileBtyData_BatData* _this = reinterpret_cast< ProfileBtyData_BatData* >(object);
  (void)_this;
}
void ProfileBtyData_BatData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileBtyData_BatData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileBtyData_BatData& ProfileBtyData_BatData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileBtyData_BatData_batteryMonitor_2eproto.base);
  return *internal_default_instance();
}


void ProfileBtyData_BatData::Clear() {
// @@protoc_insertion_point(message_clear_start:batteryMonitor.ProfileBtyData.BatData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bty_rfid_.ClearToEmpty();
  addwatertime_.ClearToEmpty();
  startusetime_.ClearToEmpty();
  ::memset(&bty_tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addwaterinter_) -
      reinterpret_cast<char*>(&bty_tag_)) + sizeof(addwaterinter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileBtyData_BatData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bty_Tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bty_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bty_Rfid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bty_rfid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "batteryMonitor.ProfileBtyData.BatData.bty_Rfid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 inAGV = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          inagv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 inStation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          instation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stationSpace = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          stationspace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 power = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 useAvgTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          useavgtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chargeAvgTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          chargeavgtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 idleAvgTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          idleavgtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 addWaterInter = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          addwaterinter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string addWaterTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_addwatertime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "batteryMonitor.ProfileBtyData.BatData.addWaterTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string startUseTime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_startusetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "batteryMonitor.ProfileBtyData.BatData.startUseTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileBtyData_BatData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:batteryMonitor.ProfileBtyData.BatData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bty_Tag = 1;
  if (this->bty_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bty_tag(), target);
  }

  // string bty_Rfid = 2;
  if (this->bty_rfid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bty_rfid().data(), static_cast<int>(this->_internal_bty_rfid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "batteryMonitor.ProfileBtyData.BatData.bty_Rfid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bty_rfid(), target);
  }

  // int32 inAGV = 3;
  if (this->inagv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_inagv(), target);
  }

  // int32 inStation = 4;
  if (this->instation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_instation(), target);
  }

  // int32 stationSpace = 5;
  if (this->stationspace() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_stationspace(), target);
  }

  // int32 power = 6;
  if (this->power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_power(), target);
  }

  // int32 useAvgTime = 7;
  if (this->useavgtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_useavgtime(), target);
  }

  // int32 chargeAvgTime = 8;
  if (this->chargeavgtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_chargeavgtime(), target);
  }

  // int32 idleAvgTime = 9;
  if (this->idleavgtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_idleavgtime(), target);
  }

  // int32 addWaterInter = 10;
  if (this->addwaterinter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_addwaterinter(), target);
  }

  // string addWaterTime = 11;
  if (this->addwatertime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addwatertime().data(), static_cast<int>(this->_internal_addwatertime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "batteryMonitor.ProfileBtyData.BatData.addWaterTime");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_addwatertime(), target);
  }

  // string startUseTime = 12;
  if (this->startusetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_startusetime().data(), static_cast<int>(this->_internal_startusetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "batteryMonitor.ProfileBtyData.BatData.startUseTime");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_startusetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:batteryMonitor.ProfileBtyData.BatData)
  return target;
}

size_t ProfileBtyData_BatData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batteryMonitor.ProfileBtyData.BatData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bty_Rfid = 2;
  if (this->bty_rfid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bty_rfid());
  }

  // string addWaterTime = 11;
  if (this->addwatertime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addwatertime());
  }

  // string startUseTime = 12;
  if (this->startusetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_startusetime());
  }

  // int32 bty_Tag = 1;
  if (this->bty_tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bty_tag());
  }

  // int32 inAGV = 3;
  if (this->inagv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inagv());
  }

  // int32 inStation = 4;
  if (this->instation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_instation());
  }

  // int32 stationSpace = 5;
  if (this->stationspace() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stationspace());
  }

  // int32 power = 6;
  if (this->power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_power());
  }

  // int32 useAvgTime = 7;
  if (this->useavgtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_useavgtime());
  }

  // int32 chargeAvgTime = 8;
  if (this->chargeavgtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chargeavgtime());
  }

  // int32 idleAvgTime = 9;
  if (this->idleavgtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idleavgtime());
  }

  // int32 addWaterInter = 10;
  if (this->addwaterinter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_addwaterinter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileBtyData_BatData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batteryMonitor.ProfileBtyData.BatData)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileBtyData_BatData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileBtyData_BatData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batteryMonitor.ProfileBtyData.BatData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batteryMonitor.ProfileBtyData.BatData)
    MergeFrom(*source);
  }
}

void ProfileBtyData_BatData::MergeFrom(const ProfileBtyData_BatData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batteryMonitor.ProfileBtyData.BatData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bty_rfid().size() > 0) {
    _internal_set_bty_rfid(from._internal_bty_rfid());
  }
  if (from.addwatertime().size() > 0) {
    _internal_set_addwatertime(from._internal_addwatertime());
  }
  if (from.startusetime().size() > 0) {
    _internal_set_startusetime(from._internal_startusetime());
  }
  if (from.bty_tag() != 0) {
    _internal_set_bty_tag(from._internal_bty_tag());
  }
  if (from.inagv() != 0) {
    _internal_set_inagv(from._internal_inagv());
  }
  if (from.instation() != 0) {
    _internal_set_instation(from._internal_instation());
  }
  if (from.stationspace() != 0) {
    _internal_set_stationspace(from._internal_stationspace());
  }
  if (from.power() != 0) {
    _internal_set_power(from._internal_power());
  }
  if (from.useavgtime() != 0) {
    _internal_set_useavgtime(from._internal_useavgtime());
  }
  if (from.chargeavgtime() != 0) {
    _internal_set_chargeavgtime(from._internal_chargeavgtime());
  }
  if (from.idleavgtime() != 0) {
    _internal_set_idleavgtime(from._internal_idleavgtime());
  }
  if (from.addwaterinter() != 0) {
    _internal_set_addwaterinter(from._internal_addwaterinter());
  }
}

void ProfileBtyData_BatData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batteryMonitor.ProfileBtyData.BatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileBtyData_BatData::CopyFrom(const ProfileBtyData_BatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batteryMonitor.ProfileBtyData.BatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileBtyData_BatData::IsInitialized() const {
  return true;
}

void ProfileBtyData_BatData::InternalSwap(ProfileBtyData_BatData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bty_rfid_.Swap(&other->bty_rfid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  addwatertime_.Swap(&other->addwatertime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  startusetime_.Swap(&other->startusetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfileBtyData_BatData, addwaterinter_)
      + sizeof(ProfileBtyData_BatData::addwaterinter_)
      - PROTOBUF_FIELD_OFFSET(ProfileBtyData_BatData, bty_tag_)>(
          reinterpret_cast<char*>(&bty_tag_),
          reinterpret_cast<char*>(&other->bty_tag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileBtyData_BatData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProfileBtyData::_Internal {
 public:
};

ProfileBtyData::ProfileBtyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:batteryMonitor.ProfileBtyData)
}
ProfileBtyData::ProfileBtyData(const ProfileBtyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bats_(from.bats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:batteryMonitor.ProfileBtyData)
}

void ProfileBtyData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileBtyData_batteryMonitor_2eproto.base);
}

ProfileBtyData::~ProfileBtyData() {
  // @@protoc_insertion_point(destructor:batteryMonitor.ProfileBtyData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfileBtyData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProfileBtyData::ArenaDtor(void* object) {
  ProfileBtyData* _this = reinterpret_cast< ProfileBtyData* >(object);
  (void)_this;
}
void ProfileBtyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileBtyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileBtyData& ProfileBtyData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileBtyData_batteryMonitor_2eproto.base);
  return *internal_default_instance();
}


void ProfileBtyData::Clear() {
// @@protoc_insertion_point(message_clear_start:batteryMonitor.ProfileBtyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileBtyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .batteryMonitor.ProfileBtyData.BatData bats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileBtyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:batteryMonitor.ProfileBtyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .batteryMonitor.ProfileBtyData.BatData bats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:batteryMonitor.ProfileBtyData)
  return target;
}

size_t ProfileBtyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batteryMonitor.ProfileBtyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .batteryMonitor.ProfileBtyData.BatData bats = 1;
  total_size += 1UL * this->_internal_bats_size();
  for (const auto& msg : this->bats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileBtyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batteryMonitor.ProfileBtyData)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileBtyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileBtyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batteryMonitor.ProfileBtyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batteryMonitor.ProfileBtyData)
    MergeFrom(*source);
  }
}

void ProfileBtyData::MergeFrom(const ProfileBtyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batteryMonitor.ProfileBtyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bats_.MergeFrom(from.bats_);
}

void ProfileBtyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batteryMonitor.ProfileBtyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileBtyData::CopyFrom(const ProfileBtyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batteryMonitor.ProfileBtyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileBtyData::IsInitialized() const {
  return true;
}

void ProfileBtyData::InternalSwap(ProfileBtyData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bats_.InternalSwap(&other->bats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileBtyData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DetailBtyData_EvtItem::_Internal {
 public:
};

DetailBtyData_EvtItem::DetailBtyData_EvtItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:batteryMonitor.DetailBtyData.EvtItem)
}
DetailBtyData_EvtItem::DetailBtyData_EvtItem(const DetailBtyData_EvtItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bty_rfid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bty_rfid().empty()) {
    bty_rfid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bty_rfid(), 
      GetArena());
  }
  evtitem_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_evtitem().empty()) {
    evtitem_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_evtitem(), 
      GetArena());
  }
  starttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_starttime().empty()) {
    starttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_starttime(), 
      GetArena());
  }
  endtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_endtime().empty()) {
    endtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_endtime(), 
      GetArena());
  }
  intertime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_intertime().empty()) {
    intertime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_intertime(), 
      GetArena());
  }
  ::memcpy(&bty_tag_, &from.bty_tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&agv_) -
    reinterpret_cast<char*>(&bty_tag_)) + sizeof(agv_));
  // @@protoc_insertion_point(copy_constructor:batteryMonitor.DetailBtyData.EvtItem)
}

void DetailBtyData_EvtItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetailBtyData_EvtItem_batteryMonitor_2eproto.base);
  bty_rfid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  evtitem_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  starttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intertime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bty_tag_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&agv_) -
      reinterpret_cast<char*>(&bty_tag_)) + sizeof(agv_));
}

DetailBtyData_EvtItem::~DetailBtyData_EvtItem() {
  // @@protoc_insertion_point(destructor:batteryMonitor.DetailBtyData.EvtItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetailBtyData_EvtItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bty_rfid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  evtitem_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  starttime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endtime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intertime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DetailBtyData_EvtItem::ArenaDtor(void* object) {
  DetailBtyData_EvtItem* _this = reinterpret_cast< DetailBtyData_EvtItem* >(object);
  (void)_this;
}
void DetailBtyData_EvtItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetailBtyData_EvtItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetailBtyData_EvtItem& DetailBtyData_EvtItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetailBtyData_EvtItem_batteryMonitor_2eproto.base);
  return *internal_default_instance();
}


void DetailBtyData_EvtItem::Clear() {
// @@protoc_insertion_point(message_clear_start:batteryMonitor.DetailBtyData.EvtItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bty_rfid_.ClearToEmpty();
  evtitem_.ClearToEmpty();
  starttime_.ClearToEmpty();
  endtime_.ClearToEmpty();
  intertime_.ClearToEmpty();
  ::memset(&bty_tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agv_) -
      reinterpret_cast<char*>(&bty_tag_)) + sizeof(agv_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailBtyData_EvtItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bty_Tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bty_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bty_Rfid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bty_rfid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "batteryMonitor.DetailBtyData.EvtItem.bty_Rfid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string evtItem = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_evtitem();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "batteryMonitor.DetailBtyData.EvtItem.evtItem"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 AGV = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          agv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string startTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_starttime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "batteryMonitor.DetailBtyData.EvtItem.startTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string endTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_endtime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "batteryMonitor.DetailBtyData.EvtItem.endTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string interTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_intertime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "batteryMonitor.DetailBtyData.EvtItem.interTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetailBtyData_EvtItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:batteryMonitor.DetailBtyData.EvtItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bty_Tag = 1;
  if (this->bty_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bty_tag(), target);
  }

  // string bty_Rfid = 2;
  if (this->bty_rfid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bty_rfid().data(), static_cast<int>(this->_internal_bty_rfid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "batteryMonitor.DetailBtyData.EvtItem.bty_Rfid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bty_rfid(), target);
  }

  // string evtItem = 3;
  if (this->evtitem().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_evtitem().data(), static_cast<int>(this->_internal_evtitem().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "batteryMonitor.DetailBtyData.EvtItem.evtItem");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_evtitem(), target);
  }

  // int32 AGV = 4;
  if (this->agv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_agv(), target);
  }

  // string startTime = 5;
  if (this->starttime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_starttime().data(), static_cast<int>(this->_internal_starttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "batteryMonitor.DetailBtyData.EvtItem.startTime");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_starttime(), target);
  }

  // string endTime = 6;
  if (this->endtime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endtime().data(), static_cast<int>(this->_internal_endtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "batteryMonitor.DetailBtyData.EvtItem.endTime");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_endtime(), target);
  }

  // string interTime = 7;
  if (this->intertime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_intertime().data(), static_cast<int>(this->_internal_intertime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "batteryMonitor.DetailBtyData.EvtItem.interTime");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_intertime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:batteryMonitor.DetailBtyData.EvtItem)
  return target;
}

size_t DetailBtyData_EvtItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batteryMonitor.DetailBtyData.EvtItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bty_Rfid = 2;
  if (this->bty_rfid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bty_rfid());
  }

  // string evtItem = 3;
  if (this->evtitem().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_evtitem());
  }

  // string startTime = 5;
  if (this->starttime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_starttime());
  }

  // string endTime = 6;
  if (this->endtime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endtime());
  }

  // string interTime = 7;
  if (this->intertime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_intertime());
  }

  // int32 bty_Tag = 1;
  if (this->bty_tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bty_tag());
  }

  // int32 AGV = 4;
  if (this->agv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_agv());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetailBtyData_EvtItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batteryMonitor.DetailBtyData.EvtItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DetailBtyData_EvtItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetailBtyData_EvtItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batteryMonitor.DetailBtyData.EvtItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batteryMonitor.DetailBtyData.EvtItem)
    MergeFrom(*source);
  }
}

void DetailBtyData_EvtItem::MergeFrom(const DetailBtyData_EvtItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batteryMonitor.DetailBtyData.EvtItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bty_rfid().size() > 0) {
    _internal_set_bty_rfid(from._internal_bty_rfid());
  }
  if (from.evtitem().size() > 0) {
    _internal_set_evtitem(from._internal_evtitem());
  }
  if (from.starttime().size() > 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from.endtime().size() > 0) {
    _internal_set_endtime(from._internal_endtime());
  }
  if (from.intertime().size() > 0) {
    _internal_set_intertime(from._internal_intertime());
  }
  if (from.bty_tag() != 0) {
    _internal_set_bty_tag(from._internal_bty_tag());
  }
  if (from.agv() != 0) {
    _internal_set_agv(from._internal_agv());
  }
}

void DetailBtyData_EvtItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batteryMonitor.DetailBtyData.EvtItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailBtyData_EvtItem::CopyFrom(const DetailBtyData_EvtItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batteryMonitor.DetailBtyData.EvtItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailBtyData_EvtItem::IsInitialized() const {
  return true;
}

void DetailBtyData_EvtItem::InternalSwap(DetailBtyData_EvtItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bty_rfid_.Swap(&other->bty_rfid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  evtitem_.Swap(&other->evtitem_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  starttime_.Swap(&other->starttime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  endtime_.Swap(&other->endtime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  intertime_.Swap(&other->intertime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetailBtyData_EvtItem, agv_)
      + sizeof(DetailBtyData_EvtItem::agv_)
      - PROTOBUF_FIELD_OFFSET(DetailBtyData_EvtItem, bty_tag_)>(
          reinterpret_cast<char*>(&bty_tag_),
          reinterpret_cast<char*>(&other->bty_tag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailBtyData_EvtItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DetailBtyData::_Internal {
 public:
};

DetailBtyData::DetailBtyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:batteryMonitor.DetailBtyData)
}
DetailBtyData::DetailBtyData(const DetailBtyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:batteryMonitor.DetailBtyData)
}

void DetailBtyData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetailBtyData_batteryMonitor_2eproto.base);
}

DetailBtyData::~DetailBtyData() {
  // @@protoc_insertion_point(destructor:batteryMonitor.DetailBtyData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetailBtyData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DetailBtyData::ArenaDtor(void* object) {
  DetailBtyData* _this = reinterpret_cast< DetailBtyData* >(object);
  (void)_this;
}
void DetailBtyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetailBtyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetailBtyData& DetailBtyData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetailBtyData_batteryMonitor_2eproto.base);
  return *internal_default_instance();
}


void DetailBtyData::Clear() {
// @@protoc_insertion_point(message_clear_start:batteryMonitor.DetailBtyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailBtyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .batteryMonitor.DetailBtyData.EvtItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetailBtyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:batteryMonitor.DetailBtyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .batteryMonitor.DetailBtyData.EvtItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:batteryMonitor.DetailBtyData)
  return target;
}

size_t DetailBtyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:batteryMonitor.DetailBtyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .batteryMonitor.DetailBtyData.EvtItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetailBtyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:batteryMonitor.DetailBtyData)
  GOOGLE_DCHECK_NE(&from, this);
  const DetailBtyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetailBtyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:batteryMonitor.DetailBtyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:batteryMonitor.DetailBtyData)
    MergeFrom(*source);
  }
}

void DetailBtyData::MergeFrom(const DetailBtyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:batteryMonitor.DetailBtyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void DetailBtyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:batteryMonitor.DetailBtyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailBtyData::CopyFrom(const DetailBtyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:batteryMonitor.DetailBtyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailBtyData::IsInitialized() const {
  return true;
}

void DetailBtyData::InternalSwap(DetailBtyData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailBtyData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace batteryMonitor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::batteryMonitor::BatteryData* Arena::CreateMaybeMessage< ::batteryMonitor::BatteryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::batteryMonitor::BatteryData >(arena);
}
template<> PROTOBUF_NOINLINE ::batteryMonitor::ProfileBtyData_BatData* Arena::CreateMaybeMessage< ::batteryMonitor::ProfileBtyData_BatData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::batteryMonitor::ProfileBtyData_BatData >(arena);
}
template<> PROTOBUF_NOINLINE ::batteryMonitor::ProfileBtyData* Arena::CreateMaybeMessage< ::batteryMonitor::ProfileBtyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::batteryMonitor::ProfileBtyData >(arena);
}
template<> PROTOBUF_NOINLINE ::batteryMonitor::DetailBtyData_EvtItem* Arena::CreateMaybeMessage< ::batteryMonitor::DetailBtyData_EvtItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::batteryMonitor::DetailBtyData_EvtItem >(arena);
}
template<> PROTOBUF_NOINLINE ::batteryMonitor::DetailBtyData* Arena::CreateMaybeMessage< ::batteryMonitor::DetailBtyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::batteryMonitor::DetailBtyData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
